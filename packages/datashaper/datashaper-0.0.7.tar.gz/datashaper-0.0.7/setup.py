# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['datashaper',
 'datashaper.engine',
 'datashaper.engine.pandas',
 'datashaper.engine.verbs',
 'datashaper.engine.verbs.utils']

package_data = \
{'': ['*']}

install_requires = \
['black>=22.3.0,<23.0.0', 'jsonschema>=4.5.1,<5.0.0', 'pandas>=1.4.1,<2.0.0']

setup_kwargs = {
    'name': 'datashaper',
    'version': '0.0.7',
    'description': 'This project provides a collection of utilities for doing lightweight data wrangling.',
    'long_description': '# datashaper\n\nThis project provides a collection of utilities for doing lightweight data wrangling.\n\nThere are two goals of the project:\n\n1. Create a shareable client/server schema for serialized wrangling instructions\n2. Maintain an implementation of a basic wrangling engine (based on Arquero) and in the case of python implemented in Pandas\n\n# Building\n\n- You need to install [poetry](https://python-poetry.org/docs/) python package manager.\n- Run: `poetry install`\n\n# Usage\n\nThis project is inteded to be used as a library for lightweight data wrangling. In the examples folder there is a [Notebook](examples/examples.ipynb) which provides several examples of how to create data wrangling pipelines and how to read json specifications that can be generated by the js implementation.\n\nExample of joining two tables:\n\n```python\nfrom datashaper.pipeline import Pipeline\nimport datashaper.types as types\nimport pandas as pd\n\n# id   name\n# 1    bob\n# 2    joe\n# 3    jane\nparents = pd.DataFrame({\n    "id": [1, 2, 3],\n    "name": [\'bob\', \'joe\', \'jane\']\n})\n\n# id   kid\n# 1    billy\n# 1    jill\n# 2    kaden\n# 2    kyle\n# 3    moe\nkids = pd.DataFrame({\n    "id": [1, 1, 2, 2, 3],\n    "kid": [\'billy\', \'jill\', \'kaden\', \'kyle\', \'moe\']\n})\n\npipeline = Pipeline()\n\npipeline.add_dataset(\'parents\', parents)\npipeline.add_dataset(\'kids\', kids)\n\npipeline.add(Step(\n    verb=Verb.join,\n    input="parents",\n    output="output",\n    args={\n        "other": "kids",\n        "on":["id"]\n    }\n))\n\n# id   name    kid\n# 1    bob     billy\n# 1    bob     jill\n# 2    joe     kaden\n# 2    joe     kyle\n# 3    jane    moe\nresult = pipeline.run()\n```\n\n# Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\nthe rights to use your contribution. For details, visit https://cla.opensource.microsoft.com.\n\nWhen you submit a pull request, a CLA bot will automatically determine whether you need to provide\na CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions\nprovided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n# Trademarks\n\nThis project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft\ntrademarks or logos is subject to and must follow\n[Microsoft\'s Trademark & Brand Guidelines](https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general).\nUse of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship.\nAny use of third-party trademarks or logos are subject to those third-party\'s policies.\n',
    'author': 'Nathan Evans',
    'author_email': 'naevans@microsoft.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': None,
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.8,<3.10',
}


setup(**setup_kwargs)
