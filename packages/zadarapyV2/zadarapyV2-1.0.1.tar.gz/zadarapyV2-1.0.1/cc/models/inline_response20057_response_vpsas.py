# coding: utf-8

"""
    CC api

    Command Center operations  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cc.configuration import Configuration


class InlineResponse20057ResponseVpsas(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'internal_name': 'str',
        'user': 'str',
        'status': 'str',
        'engine_type': 'str',
        'app_engine_type': 'str',
        'drives': 'int',
        'cache': 'int',
        'image': 'str',
        'management_address': 'str',
        'network_configuration': 'InlineResponse20057ResponseNetworkConfiguration',
        'active_vc_index': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'internal_name': 'internal_name',
        'user': 'user',
        'status': 'status',
        'engine_type': 'engine_type',
        'app_engine_type': 'app_engine_type',
        'drives': 'drives',
        'cache': 'cache',
        'image': 'image',
        'management_address': 'management_address',
        'network_configuration': 'network_configuration',
        'active_vc_index': 'active_vc_index'
    }

    def __init__(self, id=None, name=None, internal_name=None, user=None, status=None, engine_type=None, app_engine_type=None, drives=None, cache=None, image=None, management_address=None, network_configuration=None, active_vc_index=None, _configuration=None):  # noqa: E501
        """InlineResponse20057ResponseVpsas - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._internal_name = None
        self._user = None
        self._status = None
        self._engine_type = None
        self._app_engine_type = None
        self._drives = None
        self._cache = None
        self._image = None
        self._management_address = None
        self._network_configuration = None
        self._active_vc_index = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if internal_name is not None:
            self.internal_name = internal_name
        if user is not None:
            self.user = user
        if status is not None:
            self.status = status
        if engine_type is not None:
            self.engine_type = engine_type
        if app_engine_type is not None:
            self.app_engine_type = app_engine_type
        if drives is not None:
            self.drives = drives
        if cache is not None:
            self.cache = cache
        if image is not None:
            self.image = image
        if management_address is not None:
            self.management_address = management_address
        if network_configuration is not None:
            self.network_configuration = network_configuration
        if active_vc_index is not None:
            self.active_vc_index = active_vc_index

    @property
    def id(self):
        """Gets the id of this InlineResponse20057ResponseVpsas.  # noqa: E501


        :return: The id of this InlineResponse20057ResponseVpsas.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20057ResponseVpsas.


        :param id: The id of this InlineResponse20057ResponseVpsas.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this InlineResponse20057ResponseVpsas.  # noqa: E501


        :return: The name of this InlineResponse20057ResponseVpsas.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20057ResponseVpsas.


        :param name: The name of this InlineResponse20057ResponseVpsas.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def internal_name(self):
        """Gets the internal_name of this InlineResponse20057ResponseVpsas.  # noqa: E501


        :return: The internal_name of this InlineResponse20057ResponseVpsas.  # noqa: E501
        :rtype: str
        """
        return self._internal_name

    @internal_name.setter
    def internal_name(self, internal_name):
        """Sets the internal_name of this InlineResponse20057ResponseVpsas.


        :param internal_name: The internal_name of this InlineResponse20057ResponseVpsas.  # noqa: E501
        :type: str
        """

        self._internal_name = internal_name

    @property
    def user(self):
        """Gets the user of this InlineResponse20057ResponseVpsas.  # noqa: E501


        :return: The user of this InlineResponse20057ResponseVpsas.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this InlineResponse20057ResponseVpsas.


        :param user: The user of this InlineResponse20057ResponseVpsas.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def status(self):
        """Gets the status of this InlineResponse20057ResponseVpsas.  # noqa: E501


        :return: The status of this InlineResponse20057ResponseVpsas.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse20057ResponseVpsas.


        :param status: The status of this InlineResponse20057ResponseVpsas.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def engine_type(self):
        """Gets the engine_type of this InlineResponse20057ResponseVpsas.  # noqa: E501


        :return: The engine_type of this InlineResponse20057ResponseVpsas.  # noqa: E501
        :rtype: str
        """
        return self._engine_type

    @engine_type.setter
    def engine_type(self, engine_type):
        """Sets the engine_type of this InlineResponse20057ResponseVpsas.


        :param engine_type: The engine_type of this InlineResponse20057ResponseVpsas.  # noqa: E501
        :type: str
        """

        self._engine_type = engine_type

    @property
    def app_engine_type(self):
        """Gets the app_engine_type of this InlineResponse20057ResponseVpsas.  # noqa: E501


        :return: The app_engine_type of this InlineResponse20057ResponseVpsas.  # noqa: E501
        :rtype: str
        """
        return self._app_engine_type

    @app_engine_type.setter
    def app_engine_type(self, app_engine_type):
        """Sets the app_engine_type of this InlineResponse20057ResponseVpsas.


        :param app_engine_type: The app_engine_type of this InlineResponse20057ResponseVpsas.  # noqa: E501
        :type: str
        """

        self._app_engine_type = app_engine_type

    @property
    def drives(self):
        """Gets the drives of this InlineResponse20057ResponseVpsas.  # noqa: E501


        :return: The drives of this InlineResponse20057ResponseVpsas.  # noqa: E501
        :rtype: int
        """
        return self._drives

    @drives.setter
    def drives(self, drives):
        """Sets the drives of this InlineResponse20057ResponseVpsas.


        :param drives: The drives of this InlineResponse20057ResponseVpsas.  # noqa: E501
        :type: int
        """

        self._drives = drives

    @property
    def cache(self):
        """Gets the cache of this InlineResponse20057ResponseVpsas.  # noqa: E501


        :return: The cache of this InlineResponse20057ResponseVpsas.  # noqa: E501
        :rtype: int
        """
        return self._cache

    @cache.setter
    def cache(self, cache):
        """Sets the cache of this InlineResponse20057ResponseVpsas.


        :param cache: The cache of this InlineResponse20057ResponseVpsas.  # noqa: E501
        :type: int
        """

        self._cache = cache

    @property
    def image(self):
        """Gets the image of this InlineResponse20057ResponseVpsas.  # noqa: E501


        :return: The image of this InlineResponse20057ResponseVpsas.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this InlineResponse20057ResponseVpsas.


        :param image: The image of this InlineResponse20057ResponseVpsas.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def management_address(self):
        """Gets the management_address of this InlineResponse20057ResponseVpsas.  # noqa: E501


        :return: The management_address of this InlineResponse20057ResponseVpsas.  # noqa: E501
        :rtype: str
        """
        return self._management_address

    @management_address.setter
    def management_address(self, management_address):
        """Sets the management_address of this InlineResponse20057ResponseVpsas.


        :param management_address: The management_address of this InlineResponse20057ResponseVpsas.  # noqa: E501
        :type: str
        """

        self._management_address = management_address

    @property
    def network_configuration(self):
        """Gets the network_configuration of this InlineResponse20057ResponseVpsas.  # noqa: E501


        :return: The network_configuration of this InlineResponse20057ResponseVpsas.  # noqa: E501
        :rtype: InlineResponse20057ResponseNetworkConfiguration
        """
        return self._network_configuration

    @network_configuration.setter
    def network_configuration(self, network_configuration):
        """Sets the network_configuration of this InlineResponse20057ResponseVpsas.


        :param network_configuration: The network_configuration of this InlineResponse20057ResponseVpsas.  # noqa: E501
        :type: InlineResponse20057ResponseNetworkConfiguration
        """

        self._network_configuration = network_configuration

    @property
    def active_vc_index(self):
        """Gets the active_vc_index of this InlineResponse20057ResponseVpsas.  # noqa: E501


        :return: The active_vc_index of this InlineResponse20057ResponseVpsas.  # noqa: E501
        :rtype: int
        """
        return self._active_vc_index

    @active_vc_index.setter
    def active_vc_index(self, active_vc_index):
        """Sets the active_vc_index of this InlineResponse20057ResponseVpsas.


        :param active_vc_index: The active_vc_index of this InlineResponse20057ResponseVpsas.  # noqa: E501
        :type: int
        """

        self._active_vc_index = active_vc_index

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20057ResponseVpsas, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20057ResponseVpsas):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20057ResponseVpsas):
            return True

        return self.to_dict() != other.to_dict()
