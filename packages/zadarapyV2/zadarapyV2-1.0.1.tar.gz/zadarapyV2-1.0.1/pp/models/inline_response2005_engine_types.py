# coding: utf-8

"""
    PP api

    PP operations  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pp.configuration import Configuration


class InlineResponse2005EngineTypes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hourly_price_usd': 'str',
        'base_cache_partitions': 'int',
        'name': 'str',
        'max_cache_partitions': 'int',
        'max_drives': 'int',
        'max_cache_gb': 'int',
        'key': 'str',
        'encryption_hourly_price_usd': 'str',
        'specs': 'str',
        'base_cache_gb': 'int'
    }

    attribute_map = {
        'hourly_price_usd': 'hourly_price_usd',
        'base_cache_partitions': 'base_cache_partitions',
        'name': 'name',
        'max_cache_partitions': 'max_cache_partitions',
        'max_drives': 'max_drives',
        'max_cache_gb': 'max_cache_gb',
        'key': 'key',
        'encryption_hourly_price_usd': 'encryption_hourly_price_usd',
        'specs': 'specs',
        'base_cache_gb': 'base_cache_gb'
    }

    def __init__(self, hourly_price_usd=None, base_cache_partitions=None, name=None, max_cache_partitions=None, max_drives=None, max_cache_gb=None, key=None, encryption_hourly_price_usd=None, specs=None, base_cache_gb=None, _configuration=None):  # noqa: E501
        """InlineResponse2005EngineTypes - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._hourly_price_usd = None
        self._base_cache_partitions = None
        self._name = None
        self._max_cache_partitions = None
        self._max_drives = None
        self._max_cache_gb = None
        self._key = None
        self._encryption_hourly_price_usd = None
        self._specs = None
        self._base_cache_gb = None
        self.discriminator = None

        if hourly_price_usd is not None:
            self.hourly_price_usd = hourly_price_usd
        if base_cache_partitions is not None:
            self.base_cache_partitions = base_cache_partitions
        if name is not None:
            self.name = name
        if max_cache_partitions is not None:
            self.max_cache_partitions = max_cache_partitions
        if max_drives is not None:
            self.max_drives = max_drives
        if max_cache_gb is not None:
            self.max_cache_gb = max_cache_gb
        if key is not None:
            self.key = key
        if encryption_hourly_price_usd is not None:
            self.encryption_hourly_price_usd = encryption_hourly_price_usd
        if specs is not None:
            self.specs = specs
        if base_cache_gb is not None:
            self.base_cache_gb = base_cache_gb

    @property
    def hourly_price_usd(self):
        """Gets the hourly_price_usd of this InlineResponse2005EngineTypes.  # noqa: E501


        :return: The hourly_price_usd of this InlineResponse2005EngineTypes.  # noqa: E501
        :rtype: str
        """
        return self._hourly_price_usd

    @hourly_price_usd.setter
    def hourly_price_usd(self, hourly_price_usd):
        """Sets the hourly_price_usd of this InlineResponse2005EngineTypes.


        :param hourly_price_usd: The hourly_price_usd of this InlineResponse2005EngineTypes.  # noqa: E501
        :type: str
        """

        self._hourly_price_usd = hourly_price_usd

    @property
    def base_cache_partitions(self):
        """Gets the base_cache_partitions of this InlineResponse2005EngineTypes.  # noqa: E501


        :return: The base_cache_partitions of this InlineResponse2005EngineTypes.  # noqa: E501
        :rtype: int
        """
        return self._base_cache_partitions

    @base_cache_partitions.setter
    def base_cache_partitions(self, base_cache_partitions):
        """Sets the base_cache_partitions of this InlineResponse2005EngineTypes.


        :param base_cache_partitions: The base_cache_partitions of this InlineResponse2005EngineTypes.  # noqa: E501
        :type: int
        """

        self._base_cache_partitions = base_cache_partitions

    @property
    def name(self):
        """Gets the name of this InlineResponse2005EngineTypes.  # noqa: E501


        :return: The name of this InlineResponse2005EngineTypes.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse2005EngineTypes.


        :param name: The name of this InlineResponse2005EngineTypes.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def max_cache_partitions(self):
        """Gets the max_cache_partitions of this InlineResponse2005EngineTypes.  # noqa: E501


        :return: The max_cache_partitions of this InlineResponse2005EngineTypes.  # noqa: E501
        :rtype: int
        """
        return self._max_cache_partitions

    @max_cache_partitions.setter
    def max_cache_partitions(self, max_cache_partitions):
        """Sets the max_cache_partitions of this InlineResponse2005EngineTypes.


        :param max_cache_partitions: The max_cache_partitions of this InlineResponse2005EngineTypes.  # noqa: E501
        :type: int
        """

        self._max_cache_partitions = max_cache_partitions

    @property
    def max_drives(self):
        """Gets the max_drives of this InlineResponse2005EngineTypes.  # noqa: E501


        :return: The max_drives of this InlineResponse2005EngineTypes.  # noqa: E501
        :rtype: int
        """
        return self._max_drives

    @max_drives.setter
    def max_drives(self, max_drives):
        """Sets the max_drives of this InlineResponse2005EngineTypes.


        :param max_drives: The max_drives of this InlineResponse2005EngineTypes.  # noqa: E501
        :type: int
        """

        self._max_drives = max_drives

    @property
    def max_cache_gb(self):
        """Gets the max_cache_gb of this InlineResponse2005EngineTypes.  # noqa: E501


        :return: The max_cache_gb of this InlineResponse2005EngineTypes.  # noqa: E501
        :rtype: int
        """
        return self._max_cache_gb

    @max_cache_gb.setter
    def max_cache_gb(self, max_cache_gb):
        """Sets the max_cache_gb of this InlineResponse2005EngineTypes.


        :param max_cache_gb: The max_cache_gb of this InlineResponse2005EngineTypes.  # noqa: E501
        :type: int
        """

        self._max_cache_gb = max_cache_gb

    @property
    def key(self):
        """Gets the key of this InlineResponse2005EngineTypes.  # noqa: E501


        :return: The key of this InlineResponse2005EngineTypes.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this InlineResponse2005EngineTypes.


        :param key: The key of this InlineResponse2005EngineTypes.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def encryption_hourly_price_usd(self):
        """Gets the encryption_hourly_price_usd of this InlineResponse2005EngineTypes.  # noqa: E501


        :return: The encryption_hourly_price_usd of this InlineResponse2005EngineTypes.  # noqa: E501
        :rtype: str
        """
        return self._encryption_hourly_price_usd

    @encryption_hourly_price_usd.setter
    def encryption_hourly_price_usd(self, encryption_hourly_price_usd):
        """Sets the encryption_hourly_price_usd of this InlineResponse2005EngineTypes.


        :param encryption_hourly_price_usd: The encryption_hourly_price_usd of this InlineResponse2005EngineTypes.  # noqa: E501
        :type: str
        """

        self._encryption_hourly_price_usd = encryption_hourly_price_usd

    @property
    def specs(self):
        """Gets the specs of this InlineResponse2005EngineTypes.  # noqa: E501


        :return: The specs of this InlineResponse2005EngineTypes.  # noqa: E501
        :rtype: str
        """
        return self._specs

    @specs.setter
    def specs(self, specs):
        """Sets the specs of this InlineResponse2005EngineTypes.


        :param specs: The specs of this InlineResponse2005EngineTypes.  # noqa: E501
        :type: str
        """

        self._specs = specs

    @property
    def base_cache_gb(self):
        """Gets the base_cache_gb of this InlineResponse2005EngineTypes.  # noqa: E501


        :return: The base_cache_gb of this InlineResponse2005EngineTypes.  # noqa: E501
        :rtype: int
        """
        return self._base_cache_gb

    @base_cache_gb.setter
    def base_cache_gb(self, base_cache_gb):
        """Sets the base_cache_gb of this InlineResponse2005EngineTypes.


        :param base_cache_gb: The base_cache_gb of this InlineResponse2005EngineTypes.  # noqa: E501
        :type: int
        """

        self._base_cache_gb = base_cache_gb

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2005EngineTypes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2005EngineTypes):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse2005EngineTypes):
            return True

        return self.to_dict() != other.to_dict()
