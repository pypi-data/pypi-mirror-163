from nmappalyzer import NmapScan

from .base import BaseModule


class Nmap(BaseModule):

    watched_events = [
        "IP_ADDRESS",
        "IP_ADDRESS",
        "IP_RANGE",
        "IP_RANGE",
        "DNS_NAME",
        "OPEN_TCP_PORT",
    ]
    flags = ["portscan"]
    produced_events = ["OPEN_TCP_PORT", "SERVICE"]
    max_threads = 10
    batch_size = 10
    deps_apt = ["nmap"]
    deps_pip = ["git+https://github.com/blacklanternsecurity/nmappalyzer"]

    def handle_batch(self, *events):

        portscan = dict()
        for event in events:

            if event.type in [
                "IP_ADDRESS",
                "IP_ADDRESS",
                "IP_RANGE",
                "IP_RANGE",
                "DNS_NAME",
            ]:
                portscan[event.data] = event

            elif event.type in ["OPEN_TCP_PORT"]:
                scan = NmapScan(event.host, ["-n", f"-p{event.port}", "-sV", "-Pn", "-T5", "--noninteractive"])
                for host in scan:
                    for portelem in host.etree.findall("ports/port"):
                        for service in portelem.findall("service"):
                            servicename = service.attrib.get("name", "")
                            if servicename:
                                self.emit_event(
                                    f"{host.address}:{event.port}:{servicename}",
                                    "SERVICE",
                                    event,
                                )

        if portscan:
            scan = NmapScan(
                list(portscan),
                ["-n", "-Pn", "--top-ports", "100", "-T5", "--noninteractive"],
            )
            for host in scan:
                for i in [host.address] + list(host.hostnames):
                    source_event = portscan.get(i, None)
                    if source_event:
                        break

                for open_port in host.open_ports:
                    port, protocol = open_port.split("/")
                    if protocol.lower() == "tcp":
                        self.emit_event(f"{host.address}:{port}", "OPEN_TCP_PORT", source_event)
