# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['bbot',
 'bbot.agent',
 'bbot.core',
 'bbot.core.configurator',
 'bbot.core.event',
 'bbot.core.helpers',
 'bbot.core.helpers.depsinstaller',
 'bbot.core.logger',
 'bbot.db',
 'bbot.modules',
 'bbot.modules.deadly',
 'bbot.modules.internal',
 'bbot.modules.output',
 'bbot.modules.report',
 'bbot.scanner',
 'bbot.test']

package_data = \
{'': ['*'], 'bbot': ['wordlists/*']}

install_requires = \
['ansible-runner>=2.2.0,<3.0.0',
 'ansible>=5.7.1,<6.0.0',
 'deepdiff>=5.8.1,<6.0.0',
 'dnspython>=2.2.1,<3.0.0',
 'omegaconf>=2.1.1,<3.0.0',
 'psutil>=5.9.0,<6.0.0',
 'pycryptodome>=3.15.0,<4.0.0',
 'pydantic>=1.9.0,<2.0.0',
 'requests-cache>=0.9.3,<0.10.0',
 'tabulate>=0.8.10,<0.9.0',
 'tldextract>=3.2.0,<4.0.0',
 'websocket-client>=1.3.2,<2.0.0',
 'wordninja>=2.0.0,<3.0.0',
 'xmltojson>=2.0.1,<3.0.0']

entry_points = \
{'console_scripts': ['bbot = bbot.cli:main']}

setup_kwargs = {
    'name': 'bbot',
    'version': '1.0.0',
    'description': 'OSINT automation for hackers.',
    'long_description': '![bbot_banner](https://user-images.githubusercontent.com/20261699/158000235-6c1ace81-a267-4f8e-90a1-f4c16884ebac.png)\n\n# BEEÂ·bot\n### OSINT automation for hackers.\n\n[![Python Version](https://img.shields.io/badge/python-3.9+-FF8400)](https://www.python.org) [![Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black) [![License](https://img.shields.io/badge/license-GPLv3-FF8400.svg)](https://github.com/blacklanternsecurity/bbot/blob/dev/LICENSE) [![Tests](https://github.com/blacklanternsecurity/bbot/workflows/tests/badge.svg)](https://github.com/blacklanternsecurity/bbot/actions?query=workflow%3A"tests") [![Codecov](https://codecov.io/gh/blacklanternsecurity/bbot/branch/dev/graph/badge.svg?token=IR5AZBDM5K)](https://codecov.io/gh/blacklanternsecurity/bbot)\n\n![subdomain demo](https://user-images.githubusercontent.com/20261699/182274919-d4f5aa69-993a-40aa-95d5-f5e69e96026c.gif)\n\n### **BBOT** is a **recursive**, **modular** OSINT framework written in Python.\n\nIt is capable of executing the entire OSINT process in a single command, including subdomain enumeration, port scanning, web screenshots (with its `gowitness` module), vulnerability scanning (with `nuclei`), and much more.\n\nBBOT currently has over **50 modules** and counting.\n\n## Installation\n~~~bash\npipx install bbot\n~~~\nPrerequisites: \n- Python 3.9 or newer MUST be installed\n- `pipx` is recommended as an alternative to `pip` because it installs BBOT in its own Python environment. To install `pipx`:\n~~~bash\npython3 -m pip install --user pipx\npython3 -m pipx ensurepath\n~~~\n\n## Scanning with BBOT\n\n### Examples\n~~~bash\n# list modules\nbbot -l\n\n# subdomain enumeration\nbbot --flags subdomain-enum --targets evilcorp.com\n\n# passive only\nbbot --flags passive --targets evilcorp.com\n\n# web screenshots with gowitness\nbbot --modules naabu httpx gowitness --name my_scan --output-dir . --targets evilcorp.com 1.2.3.4/28 4.3.2.1 targets.txt\n\n# web spider (search for emails, etc.)\nbbot -m httpx -c web_spider_distance=2 -t www.evilcorp.com\n~~~\n\n### Notes\n\nRunning a BBOT scan is as simple as specifying a target and a list of modules.\n\nThere is **one module**, however, that\'s **especially important**, and that\'s `httpx`. BBOT\'s `httpx` module is the core of its web capability and used heavily by other modules. `httpx` is responsible for visiting webpages and verifying the validity of URLS. For this reason, if you want to run any web-related module, e.g. `wappalyzer`, `gowitness`, `nuclei`, etc., you\'ll need to enable `httpx` as well.\n\n`httpx` is especially powerful because it enables other BBOT modules (like `excavate`) to passively parse web pages for goodies like cleartext passwords, emails, subdomains, etc.\n\n## Using BBOT as a Python library\n~~~python\nfrom bbot.scanner import Scanner\n\n# this will prompt for a sudo password on first run\n# if you prefer, you can export BBOT_SUDO_PASS instead\nscan = Scanner("evilcorp.com", "1.2.3.0/24", modules=["naabu"], output_modules=["http"])\n\nlen(scan.target) # --> 257\n"1.2.3.4" in scan.target # --> True\n"4.3.2.1" in scan.target # --> False\n"www.evilcorp.com" in scan.target # --> True\n\nscan.start()\n~~~\n\n# Output\nBBOT outputs to STDOUT by default, but it can output in multiple formats simultaneously (with `--output-module`).\n~~~bash\n# tee to a file\nbbot -f subdomain-enum -t evilcorp.com | tee evilcorp.txt\n\n# output to JSON\nbbot --output-module json -f subdomain-enum -t evilcorp.com | jq\n\n# output to CSV, TXT, and JSON, in current directory\nbbot -o . --output-module human csv json -f subdomain-enum -t evilcorp.com\n~~~\nFor every scan, BBOT generates a unique and mildly-entertaining name like `fuzzy_gandalf`. Output for that scan, including the word cloud and any gowitness screenshots, etc., are saved to a folder by that name in `~/.bbot/scans`. The most recent 20 scans are kept, and older ones are removed. You can change the location of BBOT\'s output with `--output`, and you can also pick a custom scan name with `--name`.\n\nIf you reuse a scan name, it will append to its original output files and leverage the previous word cloud.\n\n# Neo4j\nNeo4j is the funnest (and prettiest) way to view and interact with BBOT data.\n\n![neo4j](https://user-images.githubusercontent.com/20261699/182398274-729f3c48-c23c-4db0-8c2e-8b403c1bf790.png)\n\n- You can get Neo4j up and running with a single docker command:\n~~~bash\ndocker run -p 7687:7687 -p 7474:7474 --env NEO4J_AUTH=neo4j/bbotislife neo4j\n~~~\n- After that, run bbot with `--output-modules neo4j`\n~~~bash\nbbot -f subdomain-enum -t evilcorp.com --output-modules human neo4j\n~~~\n- Browse data at http://localhost:7474\n\n# Modules\n| Module           | Needs API Key   | Description                                                       | Flags                                              | Produced Events                                      |\n|------------------|-----------------|-------------------------------------------------------------------|----------------------------------------------------|------------------------------------------------------|\n| aspnet_viewstate |                 | Parse web pages for viewstates and check them against blacklist3r | active,safe,web                                    | VULNERABILITY                                        |\n| bypass403        |                 | Check 403 pages for common bypasses                               | active,aggressive,web                              | FINDING                                              |\n| cookie_brute     |                 | Check for common HTTP cookie parameters                           | active,aggressive,brute-force,slow,web             | FINDING                                              |\n| dnszonetransfer  |                 | Attempt DNS zone transfers                                        | active,safe,subdomain-enum                         | DNS_NAME                                             |\n| ffuf             |                 | A fast web fuzzer written in Go                                   | active,aggressive,brute-force,deadly,web           | URL                                                  |\n| ffuf_shortnames  |                 | Use ffuf in combination IIS shortnames                            | active,aggressive,brute-force,web                  | URL                                                  |\n| generic_ssrf     |                 | Check for generic SSRFs                                           | active,aggressive,web                              | VULNERABILITY                                        |\n| getparam_brute   |                 | Check for common HTTP GET parameters                              | active,aggressive,brute-force,slow,web             | FINDING                                              |\n| gowitness        |                 | Take screenshots of webpages                                      | active,safe,web                                    | SCREENSHOT                                           |\n| header_brute     |                 | Check for common HTTP header parameters                           | active,aggressive,brute-force,slow,web             | FINDING                                              |\n| host_header      |                 | Try common HTTP Host header spoofing techniques                   | active,aggressive,web                              | FINDING                                              |\n| httpx            |                 | Visit webpages. Many other modules rely on httpx                  | active,safe,web                                    | HTTP_RESPONSE,URL                                    |\n| hunt             |                 | Watch for commonly-exploitable HTTP parameters                    | active,safe,web                                    | FINDING                                              |\n| iis_shortnames   |                 | Check for IIS shortname vulnerability                             | active,safe                                        | URL_HINT                                             |\n| naabu            |                 | Execute port scans with naabu                                     | active,aggressive,portscan                         | OPEN_TCP_PORT                                        |\n| ntlm             |                 | Watch for HTTP endpoints that support NTLM authentication         | active,safe,web                                    | DNS_NAME,FINDING                                     |\n| nuclei           |                 | Fast and customisable vulnerability scanner                       | active,aggressive,deadly,web                       | VULNERABILITY                                        |\n| smuggler         |                 | Check for HTTP smuggling                                          | active,aggressive,brute-force,slow,web             | FINDING                                              |\n| sslcert          |                 | Visit open ports and retrieve SSL certificates                    | active,email-enum,safe,subdomain-enum              | DNS_NAME,EMAIL_ADDRESS                               |\n| telerik          |                 | Scan for critical Telerik vulnerabilities                         | active,aggressive,web                              | FINDING,VULNERABILITY                                |\n| vhost            |                 | Fuzz for virtual hosts                                            | active,aggressive,brute-force,deadly,slow,web      | DNS_NAME,VHOST                                       |\n| wappalyzer       |                 | Extract technologies from web responses                           | active,safe,web                                    | TECHNOLOGY                                           |\n| affiliates       |                 | Summarize affiliate domains at the end of a scan                  | passive,report,safe                                |                                                      |\n| asn              |                 | Query bgpview.io for ASNs                                         | passive,report,safe,subdomain-enum                 | ASN                                                  |\n| azure_tenant     |                 | Query Azure for tenant sister domains                             | passive,safe,subdomain-enum                        | DNS_NAME                                             |\n| binaryedge       | X               | Query the BinaryEdge API                                          | passive,safe,subdomain-enum                        | DNS_NAME,EMAIL_ADDRESS,IP_ADDRESS,OPEN_PORT,PROTOCOL |\n| c99              | X               | Query the C99 API for subdomains                                  | passive,safe,subdomain-enum                        | DNS_NAME                                             |\n| censys           | X               | Query the Censys API                                              | email-enum,passive,safe,subdomain-enum             | DNS_NAME,EMAIL_ADDRESS,IP_ADDRESS,OPEN_PORT,PROTOCOL |\n| certspotter      |                 | Query Certspotter\'s API for subdomains                            | passive,safe,subdomain-enum                        | DNS_NAME                                             |\n| crobat           |                 | Query Project Crobat for subdomains                               | passive,safe,subdomain-enum                        | DNS_NAME                                             |\n| crt              |                 | Query crt.sh (certificate transparency) for subdomains            | passive,safe,subdomain-enum                        | DNS_NAME                                             |\n| dnscommonsrv     |                 | Check for common SRV records                                      | passive,safe,subdomain-enum                        | DNS_NAME                                             |\n| dnsdumpster      |                 | Query dnsdumpster for subdomains                                  | passive,safe,subdomain-enum                        | DNS_NAME                                             |\n| emailformat      |                 | Query email-format.com for email addresses                        | email-enum,passive,safe                            | EMAIL_ADDRESS                                        |\n| github           | X               | Query Github\'s API for related repositories                       | passive,safe,subdomain-enum                        | URL_UNVERIFIED                                       |\n| hackertarget     |                 | Query the hackertarget.com API for subdomains                     | passive,safe,subdomain-enum                        | DNS_NAME                                             |\n| hunterio         | X               | Query hunter.io for emails                                        | email-enum,passive,safe,subdomain-enum             | DNS_NAME,EMAIL_ADDRESS,URL_UNVERIFIED                |\n| ipneighbor       |                 | Look beside IPs in their surrounding subnet                       | aggressive,passive,subdomain-enum                  | IP_ADDRESS                                           |\n| leakix           |                 | Query leakix.net for subdomains                                   | passive,safe,subdomain-enum                        | DNS_NAME                                             |\n| massdns          |                 | Brute-force subdomains with massdns (highly effective)            | aggressive,brute-force,passive,slow,subdomain-enum | DNS_NAME                                             |\n| passivetotal     | X               | Query the PassiveTotal API for subdomains                         | passive,safe,subdomain-enum                        | DNS_NAME                                             |\n| pgp              |                 | Query common PGP servers for email addresses                      | email-enum,passive,safe                            | EMAIL_ADDRESS                                        |\n| securitytrails   | X               | Query the SecurityTrails API for subdomains                       | passive,safe,subdomain-enum                        | DNS_NAME                                             |\n| shodan_dns       | X               | Query Shodan for subdomains                                       | passive,safe,subdomain-enum                        | DNS_NAME                                             |\n| skymem           |                 | Query skymem.info for email addresses                             | email-enum,passive,safe                            | EMAIL_ADDRESS                                        |\n| sublist3r        |                 | Query sublist3r\'s API for subdomains                              | passive,safe,subdomain-enum                        | DNS_NAME                                             |\n| threatminer      |                 | Query threatminer\'s API for subdomains                            | passive,safe,subdomain-enum                        | DNS_NAME                                             |\n| urlscan          |                 | Query urlscan.io for subdomains                                   | passive,safe,subdomain-enum                        | DNS_NAME,URL_UNVERIFIED                              |\n| viewdns          |                 | Query viewdns.info\'s reverse whois for related domains            | passive,safe,subdomain-enum                        | DNS_NAME                                             |\n| wayback          |                 | Query archive.org\'s API for subdomains                            | passive,safe,subdomain-enum                        | DNS_NAME,URL_UNVERIFIED                              |\n| zoomeye          | X               | Query ZoomEye\'s API for subdomains                                | passive,safe,subdomain-enum                        | DNS_NAME                                             |\n\n# Usage\n~~~\n$ bbot --help\nusage: bbot [-h] [-t TARGET [TARGET ...]] [-w WHITELIST [WHITELIST ...]] [-b BLACKLIST [BLACKLIST ...]] [-s] [-n SCAN_NAME] [-m MODULE [MODULE ...]] [-l] [-em MODULE [MODULE ...]] [-f FLAG [FLAG ...]]\n            [-rf FLAG [FLAG ...]] [-ef FLAG [FLAG ...]] [-om MODULE [MODULE ...]] [-o DIR] [-c [CONFIG ...]] [--allow-deadly] [-v] [-d] [--force] [-y] [--dry-run] [--current-config] [--save-wordcloud FILE]\n            [--load-wordcloud FILE] [--no-deps | --force-deps | --retry-deps | --ignore-failed-deps] [-a]\n\nBighuge BLS OSINT Tool\n\noptions:\n  -h, --help            show this help message and exit\n  -n SCAN_NAME, --name SCAN_NAME\n                        Name of scan (default: random)\n  -m MODULE [MODULE ...], --modules MODULE [MODULE ...]\n                        Modules to enable. Choices: affiliates,asn,aspnet_viewstate,azure_tenant,binaryedge,blind_ssrf,bypass403,c99,censys,certspotter,cookie_brute,crobat,crt,dnscommonsrv,dnsdumpster,dnszonetransfer,emailformat,ffuf,ffuf_shortnames,generic_ssrf,getparam_brute,github,gowitness,hackertarget,header_brute,host_header,httpx,hunt,hunterio,iis_shortnames,ipneighbor,leakix,massdns,naabu,ntlm,nuclei,passivetotal,pgp,securitytrails,shodan_dns,skymem,smuggler,sslcert,sublist3r,telerik,threatminer,urlscan,viewdns,wappalyzer,wayback,zoomeye\n  -l, --list-modules    List available modules.\n  -em MODULE [MODULE ...], --exclude-modules MODULE [MODULE ...]\n                        Exclude these modules.\n  -f FLAG [FLAG ...], --flags FLAG [FLAG ...]\n                        Enable modules by flag. Choices: active,aggressive,brute-force,deadly,passive,portscan,report,safe,slow,subdomain-enum,web\n  -rf FLAG [FLAG ...], --require-flags FLAG [FLAG ...]\n                        Disable modules that don\'t have these flags (e.g. --require-flags passive)\n  -ef FLAG [FLAG ...], --exclude-flags FLAG [FLAG ...]\n                        Disable modules with these flags. (e.g. --exclude-flags brute-force)\n  -om MODULE [MODULE ...], --output-modules MODULE [MODULE ...]\n                        Output module(s). Choices: csv,http,human,json,neo4j,websocket\n  -o DIR, --output-dir DIR\n  -c [CONFIG ...], --config [CONFIG ...]\n                        custom config file, or configuration options in key=value format: \'modules.shodan.api_key=1234\'\n  --allow-deadly        Enable running modules tagged as "deadly"\n  -v, --verbose         Be more verbose\n  -d, --debug           Enable debugging\n  --force               Run scan even if module setups fail\n  -y, --yes             Skip scan confirmation prompt\n  --dry-run             Abort before executing scan\n  --current-config      Show current config in YAML format\n\nTarget:\n  -t TARGET [TARGET ...], --targets TARGET [TARGET ...]\n                        Targets to seed the scan\n  -w WHITELIST [WHITELIST ...], --whitelist WHITELIST [WHITELIST ...]\n                        What\'s considered in-scope (by default it\'s the same as --targets)\n  -b BLACKLIST [BLACKLIST ...], --blacklist BLACKLIST [BLACKLIST ...]\n                        Don\'t touch these things\n  -s, --strict-scope    Don\'t consider subdomains of target/whitelist to be in-scope\n\nWord cloud:\n  Save/load wordlist of common words gathered during a scan\n\n  --save-wordcloud FILE\n                        Output wordcloud to custom file when the scan completes\n  --load-wordcloud FILE\n                        Load wordcloud from a custom file\n\nModule dependencies:\n  Control how modules install their dependencies\n\n  --no-deps             Don\'t install module dependencies\n  --force-deps          Force install all module dependencies\n  --retry-deps          Try again to install failed module dependencies\n  --ignore-failed-deps  Run modules even if they have failed dependencies\n\nAgent:\n  Report back to a central server\n\n  -a, --agent-mode      Start in agent mode\n~~~\n\n# BBOT Config\nBBOT loads its config from these places in the following order:\n\n- `~/.config/bbot/defaults.yml`\n- `~/.config/bbot/bbot.yml`\n- `~/.config/bbot/secrets.yml`\n- command line (via `--config`)\n\nCommand-line arguments take precedence over all others. You can give BBOT a custom config file with `--config myconf.yml`, or individual arguments like this: `--config http_proxy=http://127.0.0.1:8080 modules.shodan_dns.api_key=1234`. To display the full and current BBOT config, including any command-line arguments, use `bbot --current-config`.\n\n~~~yaml\n### BASIC OPTIONS ###\n\n# BBOT working directory\nhome: ~/.bbot\n# How far out from the main scope to search\nscope_search_distance: 1\n# Don\'t output events that are further than this from the main scope\nscope_report_distance: 1\n# How far out from the main scope to resolve DNS names / IPs\nscope_dns_search_distance: 2\n# Limit the number of BBOT threads\nmax_threads: 20\n# Limit the number of DNS threads\nmax_dns_threads: 100\n# Limit the number of brute force modules that can run at one time\nmax_brute_forcers: 2\n\n\n### ADVANCED OPTIONS ###\n\n# Infer certain events from others, e.g. IPs from IP ranges, DNS_NAMEs from URLs, etc.\nspeculate: True\n# Passively search event data for URLs, hostnames, emails, etc.\nexcavate: True\n# Summarize activity at the end of a scan\naggregate: True\n# HTTP proxy\nhttp_proxy: \n# HTTP timeout (for Python requests; API calls, etc.)\nhttp_timeout: 30\n# HTTP timeout (for httpx)\nhttpx_timeout: 5\n# Enable/disable debug messages for web requests/responses\nhttp_debug: false\n# Set the maximum number of HTTP links that can be followed in a row (0 == no spidering allowed)\nweb_spider_distance: 0\n# Set the maximum directory depth for the web spider\nweb_spider_depth: 1\n# Generate new DNS_NAME and IP_ADDRESS events through DNS resolution\ndns_resolution: true\n# DNS query timeout\ndns_timeout: 10\n# Disable BBOT\'s smart DNS wildcard handling for select domains\ndns_wildcard_ignore: []\n# How many sanity checks to make when verifying wildcard DNS\n# Increase this value if BBOT\'s wildcard detection isn\'t working\ndns_wildcard_tests: 5\n# Skip DNS requests for a certain domain and rdtype after encountering this many timeouts or SERVFAILs\n# This helps prevent faulty DNS servers from hanging up the scan\ndns_abort_threshold: 10\n# Enable/disable filtering of PTR records containing IP addresses\ndns_filter_ptrs: true\n# Enable/disable debug messages for dns queries\ndns_debug: false\n# Whether to verify SSL certificates\nssl_verify: false\n# How many scan results to keep before cleaning up the older ones\nkeep_scans: 20\n# Web user-agent\nuser_agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36\n# Completely ignore URLs with these extensions\nurl_extension_blacklist:\n    # images\n    - png\n    - jpg\n    - bmp\n    - ico\n    - jpeg\n    - gif\n    - svg\n    # web/fonts\n    - css\n    - woff\n    - woff2\n    - ttf\n    # audio\n    - mp3\n    - m4a\n    - wav\n    - flac\n    # video\n    - mp4\n    - mkv\n    - avi\n    - wmv\n    - mov\n    - flv\n    - webm\n# Distribute URLs with these extensions only to httpx (these are omitted from output)\nurl_extension_httpx_only:\n    - js\n# Don\'t output these types of events (they are still distributed to modules)\nomit_event_types:\n    - HTTP_RESPONSE\n    - URL_UNVERIFIED\n# URL of BBOT server\nagent_url: \'\'\n# Agent Bearer authentication token\nagent_token: \'\'\n\n# Custom interactsh server settings\ninteractsh_server: null\ninteractsh_token: null\ninteractsh_disable: false\n~~~\n\n# Devving on BBOT\n\n## Installation\n\nClone BBOT and set up a developent environment with Poetry:\n~~~bash\ngit clone git@github.com:blacklanternsecurity/bbot.git && cd bbot\n\npip install poetry\npoetry shell\npoetry install\n\nbbot --help\n~~~\n\n## Writing modules\nWriting a module is easy and requires only a basic understanding of Python. It consists of a few steps:\n\n1. Create a new `.py` file in `bbot/modules`\n1. At the top of the file, import `BaseModule`\n1. Declare a class that inherits from `BaseModule`\n    - the class must have the same name as your file (case-insensitive)\n1. Define (via `watched_events` and `produced_events`) what types of events your module consumes\n1. Define (via `flags`) whether your module is `active` or `passive`\n1. Override `.handle_event()`\n    - this is where you put your custom code\n\nHere is a simple example of a working module (`bbot/modules/mymodule.py`):\n~~~python\nfrom bbot.modules.base import BaseModule\n\nclass MyModule(BaseModule):\n    """\n    Reverse-resolve DNS_NAMEs\n    """\n    watched_events = ["DNS_NAME"]\n    produced_events = ["IP_ADDRESS"]\n    flags = ["passive"]\n\n    def handle_event(self, event):\n        for ip in self.helpers.resolve(event.data):\n            self.emit_event(ip, "IP_ADDRESS", source=event)\n~~~\n\n## Feature: Dependency Handling\n\nBBOT automates module dependencies with **Ansible**. If your module has external dependencies (including pip dependencies), you can specify them in the `deps_*` attributes of your module.\n\n~~~python\nclass MyModule(BaseModule):\n    ...\n    deps_pip = ["beautifulsoup4"]\n    deps_apt = ["chromium-browser"]\n    deps_ansible = [\n        {\n            "name": "Download massdns source code",\n            "git": {\n                "repo": "https://github.com/blechschmidt/massdns.git",\n                "dest": "{BBOT_TEMP}/massdns",\n                "single_branch": True,\n                "version": "master",\n            },\n        },\n        {\n            "name": "Build massdns",\n            "command": {"chdir": "{BBOT_TEMP}/massdns", "cmd": "make", "creates": "{BBOT_TEMP}/massdns/bin/massdns"},\n        },\n        {\n            "name": "Install massdns",\n            "copy": {"src": "{BBOT_TEMP}/massdns/bin/massdns", "dest": "{BBOT_TOOLS}/", "mode": "u+x,g+x,o+x"},\n        },\n    ]\n~~~\n\n## Module helpers\nModules have easy access to scan information (via `self.scan`) and helper functions (via `self.helpers`):\n~~~python\n# Access scan target:\nif event in self.scan.target:\n    self.info(f"{event} is part of target!")\n\n# Use a helper function\nif not self.helpers.is_domain(event.data):\n    self.warning(f"{event} is not a domain.")\n\n# Access module config\nif not self.config.api_key:\n    self.error(f"No API key specified for module {self.name}!")\n\n# Make a DNS query\nmx_records = self.helpers.resolve("evilcorp.com", type="mx")\n\n# Make a web request\nresponse = self.helpers.request("https://evilcorp.com")\n\n# Download a file\nfilename = self.helpers.download("https://example.com/test.pdf", cache_hrs=720)\n\n# Download a wordlist\nfilename = self.helpers.wordlist("https://example.com/wordlist.txt", lines=1000)\nfilename = self.helpers.wordlist("/tmp/wordlist.txt", lines=1000)\n\n# Reverse resolve IP\nptrs = self.helpers.resolve("8.8.8.8")\n\n# Execute a shell command\nprocess = self.helpers.run(["ls", "-lah"])\nlog.info(process.stdout)\n\n# Use the shared thread pool\n# limit threads by setting self.config.max_threads\nfutures = {}\nfor url in urls:\n    future = self.submit_task(self.helpers.request, url)\n    futures[future] = url\n\nfor future in self.helpers.as_completed(futures):\n    url = futures[future]\n    response = future.result()\n    if getattr(response, "status_code", 0) == 200:\n        log.success(f"Found URL: {url}")\n\n# Access the global word cloud\n# The word cloud contains commonly-encountered words from the scan\n# These words come from dns names, etc., and you can use them for \n# smart brute-forcing of subdomains, vhosts, storage buckets, etc.\nself.helpers.word_cloud\n# {"www": 1, black": 3, "lantern": 1, "security": 1, ...}\nself.helpers.word_cloud.modifiers()\n# {"1", "2", "3", "dev", "api", "test", "qa", ...}\nself.helpers.word_cloud.mutations("www")\n"""\n[\n    ("www", "dev"),\n    ("dev", "www"),\n    ("www", "api"),\n    ("api", "www"),\n    ("www", "1"),\n    ("1", "www")\n]\n"""\n~~~\n\n## Run tests\n~~~bash\n# run tests\nbbot/test/run_tests.sh\n\n# re-run a specific test\npytest --disable-warnings --log-cli-level=ERROR -k test_modules\n\n# format with black\nblack .\n~~~\n\n## Adding a dependency\n~~~\n1. poetry add <package>\n~~~\n\n# Credit\nBBOT is written by @TheTechromancer. Web hacking in BBOT is made possible by @pmueller-bls, who wrote most of the web-oriented modules and helpers.\n\nVery special thanks to the following people who made BBOT possible:\n- Steve Micallef (@smicallef) for creating Spiderfoot, by which BBOT is heavily inspired\n- Aleksei Kornev (@alekseiko) for allowing us ownership of the `bbot` Pypi repository <3\n',
    'author': 'TheTechromancer',
    'author_email': None,
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/blacklanternsecurity/bbot',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.9,<4.0',
}


setup(**setup_kwargs)
