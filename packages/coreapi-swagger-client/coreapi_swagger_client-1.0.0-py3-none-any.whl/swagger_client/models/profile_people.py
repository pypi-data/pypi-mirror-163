# coding: utf-8

"""
    FABRIC Core API

    FABRIC Core API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: stealey@unc.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProfilePeople(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bio': 'str',
        'cv': 'str',
        'job': 'str',
        'other_identities': 'list[ProfilePeopleOtherIdentities]',
        'preferences': 'Preferences',
        'personal_pages': 'list[ProfilePeoplePersonalPages]',
        'pronouns': 'str',
        'website': 'str'
    }

    attribute_map = {
        'bio': 'bio',
        'cv': 'cv',
        'job': 'job',
        'other_identities': 'other_identities',
        'preferences': 'preferences',
        'personal_pages': 'personal_pages',
        'pronouns': 'pronouns',
        'website': 'website'
    }

    def __init__(self, bio=None, cv=None, job=None, other_identities=None, preferences=None, personal_pages=None, pronouns=None, website=None):  # noqa: E501
        """ProfilePeople - a model defined in Swagger"""  # noqa: E501
        self._bio = None
        self._cv = None
        self._job = None
        self._other_identities = None
        self._preferences = None
        self._personal_pages = None
        self._pronouns = None
        self._website = None
        self.discriminator = None
        if bio is not None:
            self.bio = bio
        if cv is not None:
            self.cv = cv
        if job is not None:
            self.job = job
        if other_identities is not None:
            self.other_identities = other_identities
        if preferences is not None:
            self.preferences = preferences
        if personal_pages is not None:
            self.personal_pages = personal_pages
        if pronouns is not None:
            self.pronouns = pronouns
        if website is not None:
            self.website = website

    @property
    def bio(self):
        """Gets the bio of this ProfilePeople.  # noqa: E501


        :return: The bio of this ProfilePeople.  # noqa: E501
        :rtype: str
        """
        return self._bio

    @bio.setter
    def bio(self, bio):
        """Sets the bio of this ProfilePeople.


        :param bio: The bio of this ProfilePeople.  # noqa: E501
        :type: str
        """

        self._bio = bio

    @property
    def cv(self):
        """Gets the cv of this ProfilePeople.  # noqa: E501


        :return: The cv of this ProfilePeople.  # noqa: E501
        :rtype: str
        """
        return self._cv

    @cv.setter
    def cv(self, cv):
        """Sets the cv of this ProfilePeople.


        :param cv: The cv of this ProfilePeople.  # noqa: E501
        :type: str
        """

        self._cv = cv

    @property
    def job(self):
        """Gets the job of this ProfilePeople.  # noqa: E501


        :return: The job of this ProfilePeople.  # noqa: E501
        :rtype: str
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this ProfilePeople.


        :param job: The job of this ProfilePeople.  # noqa: E501
        :type: str
        """

        self._job = job

    @property
    def other_identities(self):
        """Gets the other_identities of this ProfilePeople.  # noqa: E501


        :return: The other_identities of this ProfilePeople.  # noqa: E501
        :rtype: list[ProfilePeopleOtherIdentities]
        """
        return self._other_identities

    @other_identities.setter
    def other_identities(self, other_identities):
        """Sets the other_identities of this ProfilePeople.


        :param other_identities: The other_identities of this ProfilePeople.  # noqa: E501
        :type: list[ProfilePeopleOtherIdentities]
        """

        self._other_identities = other_identities

    @property
    def preferences(self):
        """Gets the preferences of this ProfilePeople.  # noqa: E501


        :return: The preferences of this ProfilePeople.  # noqa: E501
        :rtype: Preferences
        """
        return self._preferences

    @preferences.setter
    def preferences(self, preferences):
        """Sets the preferences of this ProfilePeople.


        :param preferences: The preferences of this ProfilePeople.  # noqa: E501
        :type: Preferences
        """

        self._preferences = preferences

    @property
    def personal_pages(self):
        """Gets the personal_pages of this ProfilePeople.  # noqa: E501


        :return: The personal_pages of this ProfilePeople.  # noqa: E501
        :rtype: list[ProfilePeoplePersonalPages]
        """
        return self._personal_pages

    @personal_pages.setter
    def personal_pages(self, personal_pages):
        """Sets the personal_pages of this ProfilePeople.


        :param personal_pages: The personal_pages of this ProfilePeople.  # noqa: E501
        :type: list[ProfilePeoplePersonalPages]
        """

        self._personal_pages = personal_pages

    @property
    def pronouns(self):
        """Gets the pronouns of this ProfilePeople.  # noqa: E501


        :return: The pronouns of this ProfilePeople.  # noqa: E501
        :rtype: str
        """
        return self._pronouns

    @pronouns.setter
    def pronouns(self, pronouns):
        """Sets the pronouns of this ProfilePeople.


        :param pronouns: The pronouns of this ProfilePeople.  # noqa: E501
        :type: str
        """

        self._pronouns = pronouns

    @property
    def website(self):
        """Gets the website of this ProfilePeople.  # noqa: E501


        :return: The website of this ProfilePeople.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this ProfilePeople.


        :param website: The website of this ProfilePeople.  # noqa: E501
        :type: str
        """

        self._website = website

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProfilePeople, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProfilePeople):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
