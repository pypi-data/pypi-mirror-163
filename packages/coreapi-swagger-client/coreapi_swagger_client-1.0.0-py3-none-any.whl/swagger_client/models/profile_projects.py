# coding: utf-8

"""
    FABRIC Core API

    FABRIC Core API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: stealey@unc.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProfileProjects(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'award_information': 'str',
        'goals': 'str',
        'keywords': 'list[str]',
        'notebooks': 'list[object]',
        'preferences': 'Preferences',
        'project_status': 'str',
        'purpose': 'str',
        'references': 'list[ProfileProjectsReferences]'
    }

    attribute_map = {
        'award_information': 'award_information',
        'goals': 'goals',
        'keywords': 'keywords',
        'notebooks': 'notebooks',
        'preferences': 'preferences',
        'project_status': 'project_status',
        'purpose': 'purpose',
        'references': 'references'
    }

    def __init__(self, award_information=None, goals=None, keywords=None, notebooks=None, preferences=None, project_status=None, purpose=None, references=None):  # noqa: E501
        """ProfileProjects - a model defined in Swagger"""  # noqa: E501
        self._award_information = None
        self._goals = None
        self._keywords = None
        self._notebooks = None
        self._preferences = None
        self._project_status = None
        self._purpose = None
        self._references = None
        self.discriminator = None
        if award_information is not None:
            self.award_information = award_information
        if goals is not None:
            self.goals = goals
        if keywords is not None:
            self.keywords = keywords
        if notebooks is not None:
            self.notebooks = notebooks
        if preferences is not None:
            self.preferences = preferences
        if project_status is not None:
            self.project_status = project_status
        if purpose is not None:
            self.purpose = purpose
        if references is not None:
            self.references = references

    @property
    def award_information(self):
        """Gets the award_information of this ProfileProjects.  # noqa: E501


        :return: The award_information of this ProfileProjects.  # noqa: E501
        :rtype: str
        """
        return self._award_information

    @award_information.setter
    def award_information(self, award_information):
        """Sets the award_information of this ProfileProjects.


        :param award_information: The award_information of this ProfileProjects.  # noqa: E501
        :type: str
        """

        self._award_information = award_information

    @property
    def goals(self):
        """Gets the goals of this ProfileProjects.  # noqa: E501


        :return: The goals of this ProfileProjects.  # noqa: E501
        :rtype: str
        """
        return self._goals

    @goals.setter
    def goals(self, goals):
        """Sets the goals of this ProfileProjects.


        :param goals: The goals of this ProfileProjects.  # noqa: E501
        :type: str
        """

        self._goals = goals

    @property
    def keywords(self):
        """Gets the keywords of this ProfileProjects.  # noqa: E501


        :return: The keywords of this ProfileProjects.  # noqa: E501
        :rtype: list[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this ProfileProjects.


        :param keywords: The keywords of this ProfileProjects.  # noqa: E501
        :type: list[str]
        """

        self._keywords = keywords

    @property
    def notebooks(self):
        """Gets the notebooks of this ProfileProjects.  # noqa: E501


        :return: The notebooks of this ProfileProjects.  # noqa: E501
        :rtype: list[object]
        """
        return self._notebooks

    @notebooks.setter
    def notebooks(self, notebooks):
        """Sets the notebooks of this ProfileProjects.


        :param notebooks: The notebooks of this ProfileProjects.  # noqa: E501
        :type: list[object]
        """

        self._notebooks = notebooks

    @property
    def preferences(self):
        """Gets the preferences of this ProfileProjects.  # noqa: E501


        :return: The preferences of this ProfileProjects.  # noqa: E501
        :rtype: Preferences
        """
        return self._preferences

    @preferences.setter
    def preferences(self, preferences):
        """Sets the preferences of this ProfileProjects.


        :param preferences: The preferences of this ProfileProjects.  # noqa: E501
        :type: Preferences
        """

        self._preferences = preferences

    @property
    def project_status(self):
        """Gets the project_status of this ProfileProjects.  # noqa: E501


        :return: The project_status of this ProfileProjects.  # noqa: E501
        :rtype: str
        """
        return self._project_status

    @project_status.setter
    def project_status(self, project_status):
        """Sets the project_status of this ProfileProjects.


        :param project_status: The project_status of this ProfileProjects.  # noqa: E501
        :type: str
        """

        self._project_status = project_status

    @property
    def purpose(self):
        """Gets the purpose of this ProfileProjects.  # noqa: E501


        :return: The purpose of this ProfileProjects.  # noqa: E501
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this ProfileProjects.


        :param purpose: The purpose of this ProfileProjects.  # noqa: E501
        :type: str
        """

        self._purpose = purpose

    @property
    def references(self):
        """Gets the references of this ProfileProjects.  # noqa: E501


        :return: The references of this ProfileProjects.  # noqa: E501
        :rtype: list[ProfileProjectsReferences]
        """
        return self._references

    @references.setter
    def references(self, references):
        """Sets the references of this ProfileProjects.


        :param references: The references of this ProfileProjects.  # noqa: E501
        :type: list[ProfileProjectsReferences]
        """

        self._references = references

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProfileProjects, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProfileProjects):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
