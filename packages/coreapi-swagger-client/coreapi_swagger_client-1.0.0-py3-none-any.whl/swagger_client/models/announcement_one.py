# coding: utf-8

"""
    FABRIC Core API

    FABRIC Core API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: stealey@unc.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnnouncementOne(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'announcement_type': 'str',
        'button': 'str',
        'content': 'str',
        'display_date': 'date',
        'end_date': 'date',
        'is_active': 'bool',
        'link': 'str',
        'start_date': 'date',
        'title': 'str',
        'uuid': 'str'
    }

    attribute_map = {
        'announcement_type': 'announcement_type',
        'button': 'button',
        'content': 'content',
        'display_date': 'display_date',
        'end_date': 'end_date',
        'is_active': 'is_active',
        'link': 'link',
        'start_date': 'start_date',
        'title': 'title',
        'uuid': 'uuid'
    }

    def __init__(self, announcement_type=None, button=None, content=None, display_date=None, end_date=None, is_active=None, link=None, start_date=None, title=None, uuid=None):  # noqa: E501
        """AnnouncementOne - a model defined in Swagger"""  # noqa: E501
        self._announcement_type = None
        self._button = None
        self._content = None
        self._display_date = None
        self._end_date = None
        self._is_active = None
        self._link = None
        self._start_date = None
        self._title = None
        self._uuid = None
        self.discriminator = None
        self.announcement_type = announcement_type
        if button is not None:
            self.button = button
        self.content = content
        if display_date is not None:
            self.display_date = display_date
        if end_date is not None:
            self.end_date = end_date
        self.is_active = is_active
        if link is not None:
            self.link = link
        self.start_date = start_date
        self.title = title
        if uuid is not None:
            self.uuid = uuid

    @property
    def announcement_type(self):
        """Gets the announcement_type of this AnnouncementOne.  # noqa: E501


        :return: The announcement_type of this AnnouncementOne.  # noqa: E501
        :rtype: str
        """
        return self._announcement_type

    @announcement_type.setter
    def announcement_type(self, announcement_type):
        """Sets the announcement_type of this AnnouncementOne.


        :param announcement_type: The announcement_type of this AnnouncementOne.  # noqa: E501
        :type: str
        """
        if announcement_type is None:
            raise ValueError("Invalid value for `announcement_type`, must not be `None`")  # noqa: E501

        self._announcement_type = announcement_type

    @property
    def button(self):
        """Gets the button of this AnnouncementOne.  # noqa: E501


        :return: The button of this AnnouncementOne.  # noqa: E501
        :rtype: str
        """
        return self._button

    @button.setter
    def button(self, button):
        """Sets the button of this AnnouncementOne.


        :param button: The button of this AnnouncementOne.  # noqa: E501
        :type: str
        """

        self._button = button

    @property
    def content(self):
        """Gets the content of this AnnouncementOne.  # noqa: E501


        :return: The content of this AnnouncementOne.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this AnnouncementOne.


        :param content: The content of this AnnouncementOne.  # noqa: E501
        :type: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def display_date(self):
        """Gets the display_date of this AnnouncementOne.  # noqa: E501


        :return: The display_date of this AnnouncementOne.  # noqa: E501
        :rtype: date
        """
        return self._display_date

    @display_date.setter
    def display_date(self, display_date):
        """Sets the display_date of this AnnouncementOne.


        :param display_date: The display_date of this AnnouncementOne.  # noqa: E501
        :type: date
        """

        self._display_date = display_date

    @property
    def end_date(self):
        """Gets the end_date of this AnnouncementOne.  # noqa: E501


        :return: The end_date of this AnnouncementOne.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this AnnouncementOne.


        :param end_date: The end_date of this AnnouncementOne.  # noqa: E501
        :type: date
        """

        self._end_date = end_date

    @property
    def is_active(self):
        """Gets the is_active of this AnnouncementOne.  # noqa: E501


        :return: The is_active of this AnnouncementOne.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this AnnouncementOne.


        :param is_active: The is_active of this AnnouncementOne.  # noqa: E501
        :type: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")  # noqa: E501

        self._is_active = is_active

    @property
    def link(self):
        """Gets the link of this AnnouncementOne.  # noqa: E501


        :return: The link of this AnnouncementOne.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this AnnouncementOne.


        :param link: The link of this AnnouncementOne.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def start_date(self):
        """Gets the start_date of this AnnouncementOne.  # noqa: E501


        :return: The start_date of this AnnouncementOne.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this AnnouncementOne.


        :param start_date: The start_date of this AnnouncementOne.  # noqa: E501
        :type: date
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def title(self):
        """Gets the title of this AnnouncementOne.  # noqa: E501


        :return: The title of this AnnouncementOne.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AnnouncementOne.


        :param title: The title of this AnnouncementOne.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def uuid(self):
        """Gets the uuid of this AnnouncementOne.  # noqa: E501


        :return: The uuid of this AnnouncementOne.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this AnnouncementOne.


        :param uuid: The uuid of this AnnouncementOne.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnnouncementOne, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnnouncementOne):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
