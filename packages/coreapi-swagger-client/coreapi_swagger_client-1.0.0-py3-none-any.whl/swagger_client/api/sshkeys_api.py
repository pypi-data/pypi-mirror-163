# coding: utf-8

"""
    FABRIC Core API

    FABRIC Core API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: stealey@unc.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SshkeysApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def bastionkeys_get(self, secret, since_date, **kwargs):  # noqa: E501
        """Get active SSH Keys  # noqa: E501

        Get active SSH Keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bastionkeys_get(secret, since_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str secret: unique secret token (required)
        :param datetime since_date: starting date to search from (required)
        :return: Bastionkeys
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bastionkeys_get_with_http_info(secret, since_date, **kwargs)  # noqa: E501
        else:
            (data) = self.bastionkeys_get_with_http_info(secret, since_date, **kwargs)  # noqa: E501
            return data

    def bastionkeys_get_with_http_info(self, secret, since_date, **kwargs):  # noqa: E501
        """Get active SSH Keys  # noqa: E501

        Get active SSH Keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bastionkeys_get_with_http_info(secret, since_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str secret: unique secret token (required)
        :param datetime since_date: starting date to search from (required)
        :return: Bastionkeys
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['secret', 'since_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bastionkeys_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'secret' is set
        if ('secret' not in params or
                params['secret'] is None):
            raise ValueError("Missing the required parameter `secret` when calling `bastionkeys_get`")  # noqa: E501
        # verify the required parameter 'since_date' is set
        if ('since_date' not in params or
                params['since_date'] is None):
            raise ValueError("Missing the required parameter `since_date` when calling `bastionkeys_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'secret' in params:
            query_params.append(('secret', params['secret']))  # noqa: E501
        if 'since_date' in params:
            query_params.append(('since_date', params['since_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bastionkeys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Bastionkeys',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sshkeys_get(self, person_uuid, **kwargs):  # noqa: E501
        """Get active SSH Keys  # noqa: E501

        Get active SSH Keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sshkeys_get(person_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str person_uuid: person uuid (required)
        :return: Sshkeys
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sshkeys_get_with_http_info(person_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.sshkeys_get_with_http_info(person_uuid, **kwargs)  # noqa: E501
            return data

    def sshkeys_get_with_http_info(self, person_uuid, **kwargs):  # noqa: E501
        """Get active SSH Keys  # noqa: E501

        Get active SSH Keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sshkeys_get_with_http_info(person_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str person_uuid: person uuid (required)
        :return: Sshkeys
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['person_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sshkeys_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'person_uuid' is set
        if ('person_uuid' not in params or
                params['person_uuid'] is None):
            raise ValueError("Missing the required parameter `person_uuid` when calling `sshkeys_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'person_uuid' in params:
            query_params.append(('person_uuid', params['person_uuid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sshkeys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Sshkeys',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sshkeys_post(self, **kwargs):  # noqa: E501
        """Create a public/private SSH Key Pair  # noqa: E501

        Create a public/private SSH Key Pair  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sshkeys_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SshkeysPost body: Create a public/private SSH Key Pair
        :return: SshkeyPair
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sshkeys_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sshkeys_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def sshkeys_post_with_http_info(self, **kwargs):  # noqa: E501
        """Create a public/private SSH Key Pair  # noqa: E501

        Create a public/private SSH Key Pair  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sshkeys_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SshkeysPost body: Create a public/private SSH Key Pair
        :return: SshkeyPair
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sshkeys_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sshkeys', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SshkeyPair',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sshkeys_put(self, **kwargs):  # noqa: E501
        """Add a public SSH Key  # noqa: E501

        Add a public SSH Key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sshkeys_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SshkeysPut body: Add a public SSH Key
        :return: Status200OkNoContent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sshkeys_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sshkeys_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def sshkeys_put_with_http_info(self, **kwargs):  # noqa: E501
        """Add a public SSH Key  # noqa: E501

        Add a public SSH Key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sshkeys_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SshkeysPut body: Add a public SSH Key
        :return: Status200OkNoContent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sshkeys_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sshkeys', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Status200OkNoContent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sshkeys_uuid_delete(self, uuid, **kwargs):  # noqa: E501
        """Delete SSH Key by UUID  # noqa: E501

        Delete SSH Key by UUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sshkeys_uuid_delete(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: universally unique identifier (required)
        :return: Status200OkNoContent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sshkeys_uuid_delete_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.sshkeys_uuid_delete_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def sshkeys_uuid_delete_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """Delete SSH Key by UUID  # noqa: E501

        Delete SSH Key by UUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sshkeys_uuid_delete_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: universally unique identifier (required)
        :return: Status200OkNoContent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sshkeys_uuid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `sshkeys_uuid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sshkeys/{uuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Status200OkNoContent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sshkeys_uuid_get(self, uuid, **kwargs):  # noqa: E501
        """SSH Key details by UUID  # noqa: E501

        SSH Key details by UUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sshkeys_uuid_get(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: universally unique identifier (required)
        :return: Sshkeys
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sshkeys_uuid_get_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.sshkeys_uuid_get_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def sshkeys_uuid_get_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """SSH Key details by UUID  # noqa: E501

        SSH Key details by UUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sshkeys_uuid_get_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: universally unique identifier (required)
        :return: Sshkeys
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sshkeys_uuid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `sshkeys_uuid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sshkeys/{uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Sshkeys',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
