# coding: utf-8

"""
    FABRIC Core API

    FABRIC Core API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: stealey@unc.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SshkeysOne(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comment': 'str',
        'created_on': 'datetime',
        'deactivated_on': 'datetime',
        'deactivated_reason': 'str',
        'description': 'str',
        'expires_on': 'datetime',
        'fabric_key_type': 'str',
        'fingerprint': 'str',
        'public_key': 'str',
        'ssh_key_type': 'str',
        'uuid': 'str'
    }

    attribute_map = {
        'comment': 'comment',
        'created_on': 'created_on',
        'deactivated_on': 'deactivated_on',
        'deactivated_reason': 'deactivated_reason',
        'description': 'description',
        'expires_on': 'expires_on',
        'fabric_key_type': 'fabric_key_type',
        'fingerprint': 'fingerprint',
        'public_key': 'public_key',
        'ssh_key_type': 'ssh_key_type',
        'uuid': 'uuid'
    }

    def __init__(self, comment=None, created_on=None, deactivated_on=None, deactivated_reason=None, description=None, expires_on=None, fabric_key_type='sliver', fingerprint=None, public_key=None, ssh_key_type=None, uuid=None):  # noqa: E501
        """SshkeysOne - a model defined in Swagger"""  # noqa: E501
        self._comment = None
        self._created_on = None
        self._deactivated_on = None
        self._deactivated_reason = None
        self._description = None
        self._expires_on = None
        self._fabric_key_type = None
        self._fingerprint = None
        self._public_key = None
        self._ssh_key_type = None
        self._uuid = None
        self.discriminator = None
        if comment is not None:
            self.comment = comment
        if created_on is not None:
            self.created_on = created_on
        if deactivated_on is not None:
            self.deactivated_on = deactivated_on
        if deactivated_reason is not None:
            self.deactivated_reason = deactivated_reason
        if description is not None:
            self.description = description
        if expires_on is not None:
            self.expires_on = expires_on
        if fabric_key_type is not None:
            self.fabric_key_type = fabric_key_type
        if fingerprint is not None:
            self.fingerprint = fingerprint
        if public_key is not None:
            self.public_key = public_key
        if ssh_key_type is not None:
            self.ssh_key_type = ssh_key_type
        if uuid is not None:
            self.uuid = uuid

    @property
    def comment(self):
        """Gets the comment of this SshkeysOne.  # noqa: E501


        :return: The comment of this SshkeysOne.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this SshkeysOne.


        :param comment: The comment of this SshkeysOne.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def created_on(self):
        """Gets the created_on of this SshkeysOne.  # noqa: E501


        :return: The created_on of this SshkeysOne.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this SshkeysOne.


        :param created_on: The created_on of this SshkeysOne.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def deactivated_on(self):
        """Gets the deactivated_on of this SshkeysOne.  # noqa: E501


        :return: The deactivated_on of this SshkeysOne.  # noqa: E501
        :rtype: datetime
        """
        return self._deactivated_on

    @deactivated_on.setter
    def deactivated_on(self, deactivated_on):
        """Sets the deactivated_on of this SshkeysOne.


        :param deactivated_on: The deactivated_on of this SshkeysOne.  # noqa: E501
        :type: datetime
        """

        self._deactivated_on = deactivated_on

    @property
    def deactivated_reason(self):
        """Gets the deactivated_reason of this SshkeysOne.  # noqa: E501


        :return: The deactivated_reason of this SshkeysOne.  # noqa: E501
        :rtype: str
        """
        return self._deactivated_reason

    @deactivated_reason.setter
    def deactivated_reason(self, deactivated_reason):
        """Sets the deactivated_reason of this SshkeysOne.


        :param deactivated_reason: The deactivated_reason of this SshkeysOne.  # noqa: E501
        :type: str
        """

        self._deactivated_reason = deactivated_reason

    @property
    def description(self):
        """Gets the description of this SshkeysOne.  # noqa: E501


        :return: The description of this SshkeysOne.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SshkeysOne.


        :param description: The description of this SshkeysOne.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def expires_on(self):
        """Gets the expires_on of this SshkeysOne.  # noqa: E501


        :return: The expires_on of this SshkeysOne.  # noqa: E501
        :rtype: datetime
        """
        return self._expires_on

    @expires_on.setter
    def expires_on(self, expires_on):
        """Sets the expires_on of this SshkeysOne.


        :param expires_on: The expires_on of this SshkeysOne.  # noqa: E501
        :type: datetime
        """

        self._expires_on = expires_on

    @property
    def fabric_key_type(self):
        """Gets the fabric_key_type of this SshkeysOne.  # noqa: E501


        :return: The fabric_key_type of this SshkeysOne.  # noqa: E501
        :rtype: str
        """
        return self._fabric_key_type

    @fabric_key_type.setter
    def fabric_key_type(self, fabric_key_type):
        """Sets the fabric_key_type of this SshkeysOne.


        :param fabric_key_type: The fabric_key_type of this SshkeysOne.  # noqa: E501
        :type: str
        """
        allowed_values = ["bastion", "sliver"]  # noqa: E501
        if fabric_key_type not in allowed_values:
            raise ValueError(
                "Invalid value for `fabric_key_type` ({0}), must be one of {1}"  # noqa: E501
                .format(fabric_key_type, allowed_values)
            )

        self._fabric_key_type = fabric_key_type

    @property
    def fingerprint(self):
        """Gets the fingerprint of this SshkeysOne.  # noqa: E501


        :return: The fingerprint of this SshkeysOne.  # noqa: E501
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this SshkeysOne.


        :param fingerprint: The fingerprint of this SshkeysOne.  # noqa: E501
        :type: str
        """

        self._fingerprint = fingerprint

    @property
    def public_key(self):
        """Gets the public_key of this SshkeysOne.  # noqa: E501


        :return: The public_key of this SshkeysOne.  # noqa: E501
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this SshkeysOne.


        :param public_key: The public_key of this SshkeysOne.  # noqa: E501
        :type: str
        """

        self._public_key = public_key

    @property
    def ssh_key_type(self):
        """Gets the ssh_key_type of this SshkeysOne.  # noqa: E501


        :return: The ssh_key_type of this SshkeysOne.  # noqa: E501
        :rtype: str
        """
        return self._ssh_key_type

    @ssh_key_type.setter
    def ssh_key_type(self, ssh_key_type):
        """Sets the ssh_key_type of this SshkeysOne.


        :param ssh_key_type: The ssh_key_type of this SshkeysOne.  # noqa: E501
        :type: str
        """

        self._ssh_key_type = ssh_key_type

    @property
    def uuid(self):
        """Gets the uuid of this SshkeysOne.  # noqa: E501


        :return: The uuid of this SshkeysOne.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this SshkeysOne.


        :param uuid: The uuid of this SshkeysOne.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SshkeysOne, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SshkeysOne):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
