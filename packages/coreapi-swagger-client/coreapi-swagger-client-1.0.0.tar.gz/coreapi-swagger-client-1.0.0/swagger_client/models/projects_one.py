# coding: utf-8

"""
    FABRIC Core API

    FABRIC Core API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: stealey@unc.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProjectsOne(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'created': 'datetime',
        'description': 'str',
        'facility': 'str',
        'is_public': 'bool',
        'memberships': 'ProjectMembership',
        'modified': 'datetime',
        'name': 'str',
        'preferences': 'Preferences',
        'profile': 'ProfileProjects',
        'project_creators': 'list[Person]',
        'project_members': 'list[Person]',
        'project_owners': 'list[Person]',
        'publications': 'list[object]',
        'tags': 'list[str]',
        'uuid': 'str'
    }

    attribute_map = {
        'active': 'active',
        'created': 'created',
        'description': 'description',
        'facility': 'facility',
        'is_public': 'is_public',
        'memberships': 'memberships',
        'modified': 'modified',
        'name': 'name',
        'preferences': 'preferences',
        'profile': 'profile',
        'project_creators': 'project_creators',
        'project_members': 'project_members',
        'project_owners': 'project_owners',
        'publications': 'publications',
        'tags': 'tags',
        'uuid': 'uuid'
    }

    def __init__(self, active=True, created=None, description=None, facility=None, is_public=True, memberships=None, modified=None, name=None, preferences=None, profile=None, project_creators=None, project_members=None, project_owners=None, publications=None, tags=None, uuid=None):  # noqa: E501
        """ProjectsOne - a model defined in Swagger"""  # noqa: E501
        self._active = None
        self._created = None
        self._description = None
        self._facility = None
        self._is_public = None
        self._memberships = None
        self._modified = None
        self._name = None
        self._preferences = None
        self._profile = None
        self._project_creators = None
        self._project_members = None
        self._project_owners = None
        self._publications = None
        self._tags = None
        self._uuid = None
        self.discriminator = None
        if active is not None:
            self.active = active
        self.created = created
        self.description = description
        self.facility = facility
        self.is_public = is_public
        self.memberships = memberships
        if modified is not None:
            self.modified = modified
        self.name = name
        if preferences is not None:
            self.preferences = preferences
        if profile is not None:
            self.profile = profile
        if project_creators is not None:
            self.project_creators = project_creators
        if project_members is not None:
            self.project_members = project_members
        if project_owners is not None:
            self.project_owners = project_owners
        if publications is not None:
            self.publications = publications
        if tags is not None:
            self.tags = tags
        self.uuid = uuid

    @property
    def active(self):
        """Gets the active of this ProjectsOne.  # noqa: E501


        :return: The active of this ProjectsOne.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ProjectsOne.


        :param active: The active of this ProjectsOne.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def created(self):
        """Gets the created of this ProjectsOne.  # noqa: E501


        :return: The created of this ProjectsOne.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ProjectsOne.


        :param created: The created of this ProjectsOne.  # noqa: E501
        :type: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def description(self):
        """Gets the description of this ProjectsOne.  # noqa: E501


        :return: The description of this ProjectsOne.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProjectsOne.


        :param description: The description of this ProjectsOne.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def facility(self):
        """Gets the facility of this ProjectsOne.  # noqa: E501


        :return: The facility of this ProjectsOne.  # noqa: E501
        :rtype: str
        """
        return self._facility

    @facility.setter
    def facility(self, facility):
        """Sets the facility of this ProjectsOne.


        :param facility: The facility of this ProjectsOne.  # noqa: E501
        :type: str
        """
        if facility is None:
            raise ValueError("Invalid value for `facility`, must not be `None`")  # noqa: E501

        self._facility = facility

    @property
    def is_public(self):
        """Gets the is_public of this ProjectsOne.  # noqa: E501


        :return: The is_public of this ProjectsOne.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this ProjectsOne.


        :param is_public: The is_public of this ProjectsOne.  # noqa: E501
        :type: bool
        """
        if is_public is None:
            raise ValueError("Invalid value for `is_public`, must not be `None`")  # noqa: E501

        self._is_public = is_public

    @property
    def memberships(self):
        """Gets the memberships of this ProjectsOne.  # noqa: E501


        :return: The memberships of this ProjectsOne.  # noqa: E501
        :rtype: ProjectMembership
        """
        return self._memberships

    @memberships.setter
    def memberships(self, memberships):
        """Sets the memberships of this ProjectsOne.


        :param memberships: The memberships of this ProjectsOne.  # noqa: E501
        :type: ProjectMembership
        """
        if memberships is None:
            raise ValueError("Invalid value for `memberships`, must not be `None`")  # noqa: E501

        self._memberships = memberships

    @property
    def modified(self):
        """Gets the modified of this ProjectsOne.  # noqa: E501


        :return: The modified of this ProjectsOne.  # noqa: E501
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this ProjectsOne.


        :param modified: The modified of this ProjectsOne.  # noqa: E501
        :type: datetime
        """

        self._modified = modified

    @property
    def name(self):
        """Gets the name of this ProjectsOne.  # noqa: E501


        :return: The name of this ProjectsOne.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectsOne.


        :param name: The name of this ProjectsOne.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def preferences(self):
        """Gets the preferences of this ProjectsOne.  # noqa: E501


        :return: The preferences of this ProjectsOne.  # noqa: E501
        :rtype: Preferences
        """
        return self._preferences

    @preferences.setter
    def preferences(self, preferences):
        """Sets the preferences of this ProjectsOne.


        :param preferences: The preferences of this ProjectsOne.  # noqa: E501
        :type: Preferences
        """

        self._preferences = preferences

    @property
    def profile(self):
        """Gets the profile of this ProjectsOne.  # noqa: E501


        :return: The profile of this ProjectsOne.  # noqa: E501
        :rtype: ProfileProjects
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this ProjectsOne.


        :param profile: The profile of this ProjectsOne.  # noqa: E501
        :type: ProfileProjects
        """

        self._profile = profile

    @property
    def project_creators(self):
        """Gets the project_creators of this ProjectsOne.  # noqa: E501


        :return: The project_creators of this ProjectsOne.  # noqa: E501
        :rtype: list[Person]
        """
        return self._project_creators

    @project_creators.setter
    def project_creators(self, project_creators):
        """Sets the project_creators of this ProjectsOne.


        :param project_creators: The project_creators of this ProjectsOne.  # noqa: E501
        :type: list[Person]
        """

        self._project_creators = project_creators

    @property
    def project_members(self):
        """Gets the project_members of this ProjectsOne.  # noqa: E501


        :return: The project_members of this ProjectsOne.  # noqa: E501
        :rtype: list[Person]
        """
        return self._project_members

    @project_members.setter
    def project_members(self, project_members):
        """Sets the project_members of this ProjectsOne.


        :param project_members: The project_members of this ProjectsOne.  # noqa: E501
        :type: list[Person]
        """

        self._project_members = project_members

    @property
    def project_owners(self):
        """Gets the project_owners of this ProjectsOne.  # noqa: E501


        :return: The project_owners of this ProjectsOne.  # noqa: E501
        :rtype: list[Person]
        """
        return self._project_owners

    @project_owners.setter
    def project_owners(self, project_owners):
        """Sets the project_owners of this ProjectsOne.


        :param project_owners: The project_owners of this ProjectsOne.  # noqa: E501
        :type: list[Person]
        """

        self._project_owners = project_owners

    @property
    def publications(self):
        """Gets the publications of this ProjectsOne.  # noqa: E501


        :return: The publications of this ProjectsOne.  # noqa: E501
        :rtype: list[object]
        """
        return self._publications

    @publications.setter
    def publications(self, publications):
        """Sets the publications of this ProjectsOne.


        :param publications: The publications of this ProjectsOne.  # noqa: E501
        :type: list[object]
        """

        self._publications = publications

    @property
    def tags(self):
        """Gets the tags of this ProjectsOne.  # noqa: E501


        :return: The tags of this ProjectsOne.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ProjectsOne.


        :param tags: The tags of this ProjectsOne.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def uuid(self):
        """Gets the uuid of this ProjectsOne.  # noqa: E501


        :return: The uuid of this ProjectsOne.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ProjectsOne.


        :param uuid: The uuid of this ProjectsOne.  # noqa: E501
        :type: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectsOne, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectsOne):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
