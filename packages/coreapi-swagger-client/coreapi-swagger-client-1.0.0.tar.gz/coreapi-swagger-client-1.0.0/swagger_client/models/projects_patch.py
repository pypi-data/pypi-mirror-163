# coding: utf-8

"""
    FABRIC Core API

    FABRIC Core API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: stealey@unc.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProjectsPatch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'is_public': 'bool',
        'name': 'str',
        'preferences': 'Preferences'
    }

    attribute_map = {
        'description': 'description',
        'is_public': 'is_public',
        'name': 'name',
        'preferences': 'preferences'
    }

    def __init__(self, description=None, is_public=None, name=None, preferences=None):  # noqa: E501
        """ProjectsPatch - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._is_public = None
        self._name = None
        self._preferences = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if is_public is not None:
            self.is_public = is_public
        if name is not None:
            self.name = name
        if preferences is not None:
            self.preferences = preferences

    @property
    def description(self):
        """Gets the description of this ProjectsPatch.  # noqa: E501


        :return: The description of this ProjectsPatch.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProjectsPatch.


        :param description: The description of this ProjectsPatch.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def is_public(self):
        """Gets the is_public of this ProjectsPatch.  # noqa: E501


        :return: The is_public of this ProjectsPatch.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this ProjectsPatch.


        :param is_public: The is_public of this ProjectsPatch.  # noqa: E501
        :type: bool
        """

        self._is_public = is_public

    @property
    def name(self):
        """Gets the name of this ProjectsPatch.  # noqa: E501


        :return: The name of this ProjectsPatch.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectsPatch.


        :param name: The name of this ProjectsPatch.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def preferences(self):
        """Gets the preferences of this ProjectsPatch.  # noqa: E501


        :return: The preferences of this ProjectsPatch.  # noqa: E501
        :rtype: Preferences
        """
        return self._preferences

    @preferences.setter
    def preferences(self, preferences):
        """Sets the preferences of this ProjectsPatch.


        :param preferences: The preferences of this ProjectsPatch.  # noqa: E501
        :type: Preferences
        """

        self._preferences = preferences

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectsPatch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectsPatch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
