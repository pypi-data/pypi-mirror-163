# coding: utf-8

"""
    FABRIC Core API

    FABRIC Core API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: stealey@unc.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PeopleOne(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'affiliation': 'str',
        'bastion_login': 'str',
        'cilogon_email': 'str',
        'cilogon_family_name': 'str',
        'cilogon_given_name': 'str',
        'cilogon_id': 'str',
        'cilogon_name': 'str',
        'email': 'str',
        'email_addresses': 'list[str]',
        'eppn': 'str',
        'fabric_id': 'str',
        'name': 'str',
        'preferences': 'Preferences',
        'profile': 'ProfilePeople',
        'publications': 'list[object]',
        'registered_on': 'str',
        'roles': 'list[PeopleOneRoles]',
        'sshkeys': 'list[object]',
        'uuid': 'str'
    }

    attribute_map = {
        'affiliation': 'affiliation',
        'bastion_login': 'bastion_login',
        'cilogon_email': 'cilogon_email',
        'cilogon_family_name': 'cilogon_family_name',
        'cilogon_given_name': 'cilogon_given_name',
        'cilogon_id': 'cilogon_id',
        'cilogon_name': 'cilogon_name',
        'email': 'email',
        'email_addresses': 'email_addresses',
        'eppn': 'eppn',
        'fabric_id': 'fabric_id',
        'name': 'name',
        'preferences': 'preferences',
        'profile': 'profile',
        'publications': 'publications',
        'registered_on': 'registered_on',
        'roles': 'roles',
        'sshkeys': 'sshkeys',
        'uuid': 'uuid'
    }

    def __init__(self, affiliation=None, bastion_login=None, cilogon_email=None, cilogon_family_name=None, cilogon_given_name=None, cilogon_id=None, cilogon_name=None, email=None, email_addresses=None, eppn=None, fabric_id=None, name=None, preferences=None, profile=None, publications=None, registered_on=None, roles=None, sshkeys=None, uuid=None):  # noqa: E501
        """PeopleOne - a model defined in Swagger"""  # noqa: E501
        self._affiliation = None
        self._bastion_login = None
        self._cilogon_email = None
        self._cilogon_family_name = None
        self._cilogon_given_name = None
        self._cilogon_id = None
        self._cilogon_name = None
        self._email = None
        self._email_addresses = None
        self._eppn = None
        self._fabric_id = None
        self._name = None
        self._preferences = None
        self._profile = None
        self._publications = None
        self._registered_on = None
        self._roles = None
        self._sshkeys = None
        self._uuid = None
        self.discriminator = None
        self.affiliation = affiliation
        if bastion_login is not None:
            self.bastion_login = bastion_login
        if cilogon_email is not None:
            self.cilogon_email = cilogon_email
        if cilogon_family_name is not None:
            self.cilogon_family_name = cilogon_family_name
        if cilogon_given_name is not None:
            self.cilogon_given_name = cilogon_given_name
        if cilogon_id is not None:
            self.cilogon_id = cilogon_id
        if cilogon_name is not None:
            self.cilogon_name = cilogon_name
        if email is not None:
            self.email = email
        if email_addresses is not None:
            self.email_addresses = email_addresses
        if eppn is not None:
            self.eppn = eppn
        if fabric_id is not None:
            self.fabric_id = fabric_id
        self.name = name
        if preferences is not None:
            self.preferences = preferences
        if profile is not None:
            self.profile = profile
        if publications is not None:
            self.publications = publications
        self.registered_on = registered_on
        if roles is not None:
            self.roles = roles
        if sshkeys is not None:
            self.sshkeys = sshkeys
        self.uuid = uuid

    @property
    def affiliation(self):
        """Gets the affiliation of this PeopleOne.  # noqa: E501


        :return: The affiliation of this PeopleOne.  # noqa: E501
        :rtype: str
        """
        return self._affiliation

    @affiliation.setter
    def affiliation(self, affiliation):
        """Sets the affiliation of this PeopleOne.


        :param affiliation: The affiliation of this PeopleOne.  # noqa: E501
        :type: str
        """
        if affiliation is None:
            raise ValueError("Invalid value for `affiliation`, must not be `None`")  # noqa: E501

        self._affiliation = affiliation

    @property
    def bastion_login(self):
        """Gets the bastion_login of this PeopleOne.  # noqa: E501


        :return: The bastion_login of this PeopleOne.  # noqa: E501
        :rtype: str
        """
        return self._bastion_login

    @bastion_login.setter
    def bastion_login(self, bastion_login):
        """Sets the bastion_login of this PeopleOne.


        :param bastion_login: The bastion_login of this PeopleOne.  # noqa: E501
        :type: str
        """

        self._bastion_login = bastion_login

    @property
    def cilogon_email(self):
        """Gets the cilogon_email of this PeopleOne.  # noqa: E501


        :return: The cilogon_email of this PeopleOne.  # noqa: E501
        :rtype: str
        """
        return self._cilogon_email

    @cilogon_email.setter
    def cilogon_email(self, cilogon_email):
        """Sets the cilogon_email of this PeopleOne.


        :param cilogon_email: The cilogon_email of this PeopleOne.  # noqa: E501
        :type: str
        """

        self._cilogon_email = cilogon_email

    @property
    def cilogon_family_name(self):
        """Gets the cilogon_family_name of this PeopleOne.  # noqa: E501


        :return: The cilogon_family_name of this PeopleOne.  # noqa: E501
        :rtype: str
        """
        return self._cilogon_family_name

    @cilogon_family_name.setter
    def cilogon_family_name(self, cilogon_family_name):
        """Sets the cilogon_family_name of this PeopleOne.


        :param cilogon_family_name: The cilogon_family_name of this PeopleOne.  # noqa: E501
        :type: str
        """

        self._cilogon_family_name = cilogon_family_name

    @property
    def cilogon_given_name(self):
        """Gets the cilogon_given_name of this PeopleOne.  # noqa: E501


        :return: The cilogon_given_name of this PeopleOne.  # noqa: E501
        :rtype: str
        """
        return self._cilogon_given_name

    @cilogon_given_name.setter
    def cilogon_given_name(self, cilogon_given_name):
        """Sets the cilogon_given_name of this PeopleOne.


        :param cilogon_given_name: The cilogon_given_name of this PeopleOne.  # noqa: E501
        :type: str
        """

        self._cilogon_given_name = cilogon_given_name

    @property
    def cilogon_id(self):
        """Gets the cilogon_id of this PeopleOne.  # noqa: E501


        :return: The cilogon_id of this PeopleOne.  # noqa: E501
        :rtype: str
        """
        return self._cilogon_id

    @cilogon_id.setter
    def cilogon_id(self, cilogon_id):
        """Sets the cilogon_id of this PeopleOne.


        :param cilogon_id: The cilogon_id of this PeopleOne.  # noqa: E501
        :type: str
        """

        self._cilogon_id = cilogon_id

    @property
    def cilogon_name(self):
        """Gets the cilogon_name of this PeopleOne.  # noqa: E501


        :return: The cilogon_name of this PeopleOne.  # noqa: E501
        :rtype: str
        """
        return self._cilogon_name

    @cilogon_name.setter
    def cilogon_name(self, cilogon_name):
        """Sets the cilogon_name of this PeopleOne.


        :param cilogon_name: The cilogon_name of this PeopleOne.  # noqa: E501
        :type: str
        """

        self._cilogon_name = cilogon_name

    @property
    def email(self):
        """Gets the email of this PeopleOne.  # noqa: E501


        :return: The email of this PeopleOne.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this PeopleOne.


        :param email: The email of this PeopleOne.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def email_addresses(self):
        """Gets the email_addresses of this PeopleOne.  # noqa: E501


        :return: The email_addresses of this PeopleOne.  # noqa: E501
        :rtype: list[str]
        """
        return self._email_addresses

    @email_addresses.setter
    def email_addresses(self, email_addresses):
        """Sets the email_addresses of this PeopleOne.


        :param email_addresses: The email_addresses of this PeopleOne.  # noqa: E501
        :type: list[str]
        """

        self._email_addresses = email_addresses

    @property
    def eppn(self):
        """Gets the eppn of this PeopleOne.  # noqa: E501


        :return: The eppn of this PeopleOne.  # noqa: E501
        :rtype: str
        """
        return self._eppn

    @eppn.setter
    def eppn(self, eppn):
        """Sets the eppn of this PeopleOne.


        :param eppn: The eppn of this PeopleOne.  # noqa: E501
        :type: str
        """

        self._eppn = eppn

    @property
    def fabric_id(self):
        """Gets the fabric_id of this PeopleOne.  # noqa: E501


        :return: The fabric_id of this PeopleOne.  # noqa: E501
        :rtype: str
        """
        return self._fabric_id

    @fabric_id.setter
    def fabric_id(self, fabric_id):
        """Sets the fabric_id of this PeopleOne.


        :param fabric_id: The fabric_id of this PeopleOne.  # noqa: E501
        :type: str
        """

        self._fabric_id = fabric_id

    @property
    def name(self):
        """Gets the name of this PeopleOne.  # noqa: E501


        :return: The name of this PeopleOne.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PeopleOne.


        :param name: The name of this PeopleOne.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def preferences(self):
        """Gets the preferences of this PeopleOne.  # noqa: E501


        :return: The preferences of this PeopleOne.  # noqa: E501
        :rtype: Preferences
        """
        return self._preferences

    @preferences.setter
    def preferences(self, preferences):
        """Sets the preferences of this PeopleOne.


        :param preferences: The preferences of this PeopleOne.  # noqa: E501
        :type: Preferences
        """

        self._preferences = preferences

    @property
    def profile(self):
        """Gets the profile of this PeopleOne.  # noqa: E501


        :return: The profile of this PeopleOne.  # noqa: E501
        :rtype: ProfilePeople
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this PeopleOne.


        :param profile: The profile of this PeopleOne.  # noqa: E501
        :type: ProfilePeople
        """

        self._profile = profile

    @property
    def publications(self):
        """Gets the publications of this PeopleOne.  # noqa: E501


        :return: The publications of this PeopleOne.  # noqa: E501
        :rtype: list[object]
        """
        return self._publications

    @publications.setter
    def publications(self, publications):
        """Sets the publications of this PeopleOne.


        :param publications: The publications of this PeopleOne.  # noqa: E501
        :type: list[object]
        """

        self._publications = publications

    @property
    def registered_on(self):
        """Gets the registered_on of this PeopleOne.  # noqa: E501


        :return: The registered_on of this PeopleOne.  # noqa: E501
        :rtype: str
        """
        return self._registered_on

    @registered_on.setter
    def registered_on(self, registered_on):
        """Sets the registered_on of this PeopleOne.


        :param registered_on: The registered_on of this PeopleOne.  # noqa: E501
        :type: str
        """
        if registered_on is None:
            raise ValueError("Invalid value for `registered_on`, must not be `None`")  # noqa: E501

        self._registered_on = registered_on

    @property
    def roles(self):
        """Gets the roles of this PeopleOne.  # noqa: E501


        :return: The roles of this PeopleOne.  # noqa: E501
        :rtype: list[PeopleOneRoles]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this PeopleOne.


        :param roles: The roles of this PeopleOne.  # noqa: E501
        :type: list[PeopleOneRoles]
        """

        self._roles = roles

    @property
    def sshkeys(self):
        """Gets the sshkeys of this PeopleOne.  # noqa: E501


        :return: The sshkeys of this PeopleOne.  # noqa: E501
        :rtype: list[object]
        """
        return self._sshkeys

    @sshkeys.setter
    def sshkeys(self, sshkeys):
        """Sets the sshkeys of this PeopleOne.


        :param sshkeys: The sshkeys of this PeopleOne.  # noqa: E501
        :type: list[object]
        """

        self._sshkeys = sshkeys

    @property
    def uuid(self):
        """Gets the uuid of this PeopleOne.  # noqa: E501


        :return: The uuid of this PeopleOne.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this PeopleOne.


        :param uuid: The uuid of this PeopleOne.  # noqa: E501
        :type: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PeopleOne, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PeopleOne):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
