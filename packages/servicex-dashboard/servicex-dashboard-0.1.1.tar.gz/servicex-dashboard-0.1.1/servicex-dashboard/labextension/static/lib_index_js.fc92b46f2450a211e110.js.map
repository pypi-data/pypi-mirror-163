{"version":3,"file":"lib_index_js.fc92b46f2450a211e110.js","mappings":";;;;;;;;;;;;;;;;;AAAuE;AAC9B;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iEAAe;AAC9B;AACA;AACA,iEAAe,MAAM,EAAC;AACtB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,kBAAkB,UAAU;AAC7D;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA,cAAc;AACd;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,wBAAwB;AACxB,gCAAgC;AAChC,gDAAgD;AAChD;AACA,8CAA8C,QAAQ,OAAO;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA,yFAAyF;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA,sDAAsD;AACtmFAAmF;AACnF;AACA;AACA,qDAAqD;AACrD;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA,uCAAuC;AACvC,gEAAgE;AAChE,yBAAyB,8BAA8B,OAAO;AAC9D,oDAAoD;AACpD;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8GAA8G;AAC9G;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA,uEAAuE;AACvE;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA,4DAA4D;AAC5D;AACA,wBAAwB,mDAAM,IAAI;AAClC;AACA,uBAAuB,gEAAc,GAAG,SAAS;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA,4DAA4D;AAC5D;AACA;AACA,sDAAsD;AACtD;AACA;AACA,oBAAoB,yBAAyB,OAAO;AACpD;AACA,0CAA0C;AAC1C;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,sBAAsB,gCAAgC;AACtD","sources":["webpack://servicex-dashboard/./lib/index.js"],"sourcesContent":["import { ICommandPalette, MainAreaWidget } from '@jupyterlab/apputils';\r\nimport { Widget } from '@lumino/widgets';\r\n/**\r\n * Initialization data for the servicex-dashboard extension.\r\n */\r\nconst plugin = {\r\n    id: 'servicex-dashboard:plugin',\r\n    autoStart: true,\r\n    requires: [ICommandPalette],\r\n    activate: activate\r\n};\r\nexport default plugin;\r\nasync function activate(app, palette) {\r\n    console.log('JupyterLab extension servicex-dashboard is activated!');\r\n    let loop = null; //variable to set/reset polling (this was a bit of a rushed change, probably should get reworked in the future)\r\n    let state = {\r\n        'page': 1,\r\n        'rows': 7,\r\n        'window': 4,\r\n        'desc': true,\r\n    };\r\n    function pagination(querySet, page, rows) {\r\n        let trimStart = (page - 1) * rows;\r\n        let trimEnd = trimStart + rows;\r\n        var trimmedData = querySet.slice(trimStart, trimEnd);\r\n        var pages = Math.ceil(querySet.length / rows);\r\n        return {\r\n            'querySet': trimmedData,\r\n            'pages': pages\r\n        };\r\n    }\r\n    function createButtons(pageData, pagination_div) {\r\n        let maxLeft = (state.page - Math.floor(state.window / 2)); //Get leftmost and rightmost buttons for bar\r\n        let maxRight = (state.page + Math.floor(state.window / 2));\r\n        if (maxLeft < 1) {\r\n            maxLeft = 1;\r\n            maxRight = state.window;\r\n        }\r\n        if (maxRight > pageData.pages) {\r\n            maxLeft = pageData.pages - (state.window - 1);\r\n            if (maxLeft < 1) {\r\n                maxLeft = 1;\r\n            }\r\n            maxRight = pageData.pages;\r\n        }\r\n        if (maxLeft != 1) { //Add first button to bar if leftmost button is not 1\r\n            let first = document.createElement('button');\r\n            first.setAttribute('id', 'firstLastButton');\r\n            first.innerHTML = '<<';\r\n            first.onclick = function () {\r\n                state.page = 1;\r\n            };\r\n            pagination_div.appendChild(first);\r\n        }\r\n        for (var page = maxLeft; page <= maxRight; page++) { //Adding buttons to pagination bar\r\n            let button = document.createElement('button');\r\n            button.setAttribute('id', 'paginationButton');\r\n            button.innerHTML = page.toString();\r\n            if (page == state.page) { //Highlighting button of current page\r\n                button.style.backgroundColor = '#007bff';\r\n                button.style.color = 'white';\r\n                button.style.border = '0.5px solid #007bff';\r\n            }\r\n            else {\r\n                button.style.backgroundColor = 'white';\r\n                button.style.color = '#007bff';\r\n                button.style.border = '0.5px solid gray';\r\n            }\r\n            button.onclick = function () {\r\n                state.page = parseInt(button.innerHTML, 10);\r\n            };\r\n            pagination_div.appendChild(button);\r\n        }\r\n        if (maxRight != pageData.pages) { //Add last button if rightmost button is not the number of total pages\r\n            let last = document.createElement('button');\r\n            last.setAttribute('id', 'firstLastButton');\r\n            last.innerHTML = '>>';\r\n            last.onclick = function () {\r\n                state.page = pageData.pages;\r\n                //createTable();\r\n            };\r\n            pagination_div.appendChild(last);\r\n        }\r\n    }\r\n    async function createTable(SERVICEX_URL) {\r\n        //Code for retrieving live json result\r\n        const start = Date.now(); //For run time testing purposes\r\n        let response;\r\n        try { //Testing to see if fetch request to current instance works\r\n            response = await fetch(SERVICEX_URL + 'servicex/transformation');\r\n        }\r\n        catch (error) { //If not alert an error\r\n            alert('An error has occured: ' + error + '. This is most likely a CORS header issue with ' + SERVICEX_URL + '. Do cltr+shift+j to view the developer console for error specifics.');\r\n            return;\r\n        }\r\n        let arr_1 = []; //Overall array for unsorted data\r\n        if (response != null) { //If response is not null, proceed with the filling of arr_1. Else, exit.\r\n            const data = await response.json(); //Getting json response for all requests\r\n            let requests = data.requests;\r\n            for (var i = requests.length - 1; i > -1; i--) { //creating array containing objects for all of requests\r\n                const obj = {\r\n                    request_id: '',\r\n                    status: '',\r\n                    title_link: '',\r\n                    start_time: '',\r\n                    start_time_seconds: 0,\r\n                    finish_time: '',\r\n                    files_completed: 0,\r\n                    total_files: 0,\r\n                    files_skipped: -1,\r\n                    needs_action: false,\r\n                    workers: ''\r\n                };\r\n                let request_id = requests[i]['request_id']; //setting request_id, status, and titile link parameters \r\n                obj['request_id'] = request_id;\r\n                let status = requests[i]['status'];\r\n                obj['status'] = status;\r\n                obj['title_link'] = SERVICEX_URL + 'transformation-request/' + request_id;\r\n                let workers = requests[i]['workers'];\r\n                if (status == 'Complete' || status == 'Canceled' || status == 'Fatal') { //Depending on status, the number of workers/cancel button may show\r\n                    obj['needs_action'] = false;\r\n                    obj['workers'] = '-';\r\n                }\r\n                else {\r\n                    obj['needs_action'] = true;\r\n                    obj['workers'] = workers.toString();\r\n                }\r\n                let start_time = requests[i]['submit-time']; //Setting start time and finish time\r\n                start_time = start_time.slice(0, 19);\r\n                const date = new Date(start_time);\r\n                const seconds = Math.floor(date.getTime() / 1000);\r\n                obj['start_time_seconds'] = seconds;\r\n                start_time = start_time.replace(\"T\", \" \");\r\n                let finish_time = requests[i]['finish-time'];\r\n                if (finish_time != null) {\r\n                    finish_time = finish_time.replace(\"T\", \" \");\r\n                    finish_time = finish_time.slice(0, 19);\r\n                }\r\n                else {\r\n                    finish_time = '-';\r\n                }\r\n                obj['start_time'] = start_time;\r\n                obj['finish_time'] = finish_time;\r\n                let files_processed = requests[i][\"files-processed\"]; //setting parameters regarding files\r\n                let files_remaining = requests[i][\"files-remaining\"];\r\n                let files_skipped = requests[i][\"files-skipped\"];\r\n                let total_files;\r\n                if (files_remaining == null) {\r\n                    total_files = null;\r\n                }\r\n                else {\r\n                    total_files = files_processed + files_skipped + files_remaining;\r\n                }\r\n                obj['files_completed'] = files_processed;\r\n                obj['total_files'] = total_files;\r\n                obj['files_skipped'] = files_skipped;\r\n                arr_1.push(obj); //pushing object for a single request into main array\r\n            }\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n        let arr = quickSort(arr_1, 0, arr_1.length - 1); //Sorting array to be from latest to earliest\r\n        console.log(arr);\r\n        const duration = (Date.now() - start) / 1000; //For run time testing purposes\r\n        console.log('API Call Runtime: ' + duration);\r\n        function swap(arr, left, right) {\r\n            let temp = arr[left];\r\n            arr[left] = arr[right];\r\n            arr[right] = temp;\r\n        }\r\n        function partition(arr, left, right) {\r\n            let pivot = arr[Math.floor((right + left) / 2)].start_time_seconds;\r\n            let i = left;\r\n            let j = right;\r\n            while (i <= j) {\r\n                if (state.desc) {\r\n                    while (arr[i].start_time_seconds > pivot) {\r\n                        i++;\r\n                    }\r\n                    while (arr[j].start_time_seconds < pivot) {\r\n                        j--;\r\n                    }\r\n                    if (i <= j) {\r\n                        swap(arr, i, j);\r\n                        i++;\r\n                        j--;\r\n                    }\r\n                }\r\n                else {\r\n                    while (arr[i].start_time_seconds < pivot) {\r\n                        i++;\r\n                    }\r\n                    while (arr[j].start_time_seconds > pivot) {\r\n                        j--;\r\n                    }\r\n                    if (i <= j) {\r\n                        swap(arr, i, j);\r\n                        i++;\r\n                        j--;\r\n                    }\r\n                }\r\n            }\r\n            return i;\r\n        }\r\n        function quickSort(arr, left, right) {\r\n            let index;\r\n            if (arr.length > 1) {\r\n                index = partition(arr, left, right);\r\n                if (left < index - 1) {\r\n                    quickSort(arr, left, index - 1);\r\n                }\r\n                if (index < right) {\r\n                    quickSort(arr, index, right);\r\n                }\r\n            }\r\n            return arr;\r\n        }\r\n        /*\r\n        let arr = [  //For testing table functionality (until ServiceX issues are resolved)\r\n          {\r\n            request_id: 'e772add9-8163-45c0-ae8e-81fd5a2edb30',\r\n            status: 'Complete',\r\n            title_link: 'https://opendataaf-servicex-aod.servicex.coffea-opendata-dev.casa/transformation-request/e772add9-8163-45c0-ae8e-81fd5a2edb30',\r\n            start_time: '2022-08-04 18:28:49',\r\n            start_time_seconds: 1659655729,\r\n            finish_time: '2022-08-04 19:14:48',\r\n            files_completed: 1697,\r\n            total_files: 1697,\r\n            files_skipped: 0,\r\n            needs_action: false,\r\n            workers: '-'\r\n          },\r\n          {\r\n            request_id: 'ef57e235-ada0-4151-b82a-78d6851da431',\r\n            status: 'Complete',\r\n            title_link: 'https://opendataaf-servicex-aod.servicex.coffea-opendata-dev.casa/transformation-request/ef57e235-ada0-4151-b82a-78d6851da431',\r\n            start_time: '2022-07-26 09:24:50',\r\n            start_time_seconds: 1658845490,\r\n            finish_time: '2022-07-26 10:10:53',\r\n            files_completed: 1697,\r\n            total_files: 1697,\r\n            files_skipped: 0,\r\n            needs_action: false,\r\n            workers: '-'\r\n          },\r\n          {\r\n            request_id: '05cb9bf6-6fd8-477c-b9f6-d1352160cba9',\r\n            status: 'Complete',\r\n            title_link: 'https://opendataaf-servicex-aod.servicex.coffea-opendata-dev.casa/transformation-request/05cb9bf6-6fd8-477c-b9f6-d1352160cba9',\r\n            start_time: '2022-06-16 15:39:24',\r\n            start_time_seconds: 1655411964,\r\n            finish_time: '2022-06-16 16:35:54',\r\n            files_completed: 1697,\r\n            total_files: 1697,\r\n            files_skipped: 0,\r\n            needs_action: false,\r\n            workers: '-'\r\n          },\r\n          {\r\n            request_id: '6d7fb6c9-c64c-4614-98bd-fe62fde5fdcc',\r\n            status: 'Complete',\r\n            title_link: 'https://opendataaf-servicex-aod.servicex.coffea-opendata-dev.casa/transformation-request/6d7fb6c9-c64c-4614-98bd-fe62fde5fdcc',\r\n            start_time: '2022-04-23 13:28:49',\r\n            start_time_seconds: 1650738529,\r\n            finish_time: '2022-04-23 14:15:38',\r\n            files_completed: 1697,\r\n            total_files: 1697,\r\n            files_skipped: 0,\r\n            needs_action: false,\r\n            workers: '-'\r\n          },\r\n          {\r\n            request_id: '232ecf8a-b440-4002-a58f-1f28cd72ccca',\r\n            status: 'Complete',\r\n            title_link: 'https://opendataaf-servicex-aod.servicex.coffea-opendata-dev.casa/transformation-request/232ecf8a-b440-4002-a58f-1f28cd72ccca',\r\n            start_time: '2022-04-20 17:17:47',\r\n            start_time_seconds: 1650493067,\r\n            finish_time: '2022-04-20 18:03:27',\r\n            files_completed: 1697,\r\n            total_files: 1697,\r\n            files_skipped: 0,\r\n            needs_action: false,\r\n            workers: '-'\r\n          },\r\n          {\r\n            request_id: '3ad75289-7ef2-4ec4-95d3-c931aee41e45',\r\n            status: 'Complete',\r\n            title_link: 'https://opendataaf-servicex-aod.servicex.coffea-opendata-dev.casa/transformation-request/3ad75289-7ef2-4ec4-95d3-c931aee41e45',\r\n            start_time: '2022-04-20 10:28:58',\r\n            start_time_seconds: 1650468538,\r\n            finish_time: '2022-04-20 11:14:05',\r\n            files_completed: 1697,\r\n            total_files: 1697,\r\n            files_skipped: 0,\r\n            needs_action: false,\r\n            workers: '-'\r\n          },\r\n          {\r\n            request_id: 'aeef0b4f-4b15-4df9-af64-ec1f8449412d',\r\n            status: 'Complete',\r\n            title_link: 'https://opendataaf-servicex-aod.servicex.coffea-opendata-dev.casa/transformation-request/aeef0b4f-4b15-4df9-af64-ec1f8449412d',\r\n            start_time: '2022-04-19 16:52:01',\r\n            start_time_seconds: 1650405121,\r\n            finish_time: '2022-04-19 17:35:56',\r\n            files_completed: 1697,\r\n            total_files: 1697,\r\n            files_skipped: 0,\r\n            needs_action: false,\r\n            workers: '-'\r\n          },\r\n          {\r\n            request_id: '119201ab-f613-4363-bad3-1406af9f8daf',\r\n            status: 'Complete',\r\n            title_link: 'https://opendataaf-servicex-aod.servicex.coffea-opendata-dev.casa/transformation-request/119201ab-f613-4363-bad3-1406af9f8daf',\r\n            start_time: '2022-04-19 16:01:20',\r\n            start_time_seconds: 1650402080,\r\n            finish_time: '2022-04-19 16:56:06',\r\n            files_completed: 1697,\r\n            total_files: 1697,\r\n            files_skipped: 0,\r\n            needs_action: false,\r\n            workers: '-'\r\n          }\r\n        ];*/\r\n        if (content.node.hasChildNodes() && content.node.childElementCount >= 2) { //Checking if there is already an exisiting table\r\n            let table_div = content.node.lastElementChild;\r\n            if (table_div != null) {\r\n                content.node.removeChild(table_div); //If it exists, it is removed\r\n            }\r\n        }\r\n        let table = document.createElement('table'); //Creating table and various table elements\r\n        table.setAttribute('id', 'requestTable');\r\n        let caption = document.createElement('caption');\r\n        caption.innerHTML = 'Current instance: ' + SERVICEX_URL;\r\n        caption.style.marginBottom = '5px';\r\n        table.appendChild(caption);\r\n        let thead = document.createElement('thead');\r\n        let tbody = document.createElement('tbody');\r\n        table.appendChild(thead);\r\n        table.appendChild(tbody);\r\n        let div = document.createElement('div'); //Creating div that wraps around all other elements\r\n        div.style.backgroundColor = 'white';\r\n        div.style.padding = '7.5px 15px';\r\n        div.style.margin = '0px';\r\n        div.style.width = '535px';\r\n        let h4 = document.createElement('h4'); //Creating header for page\r\n        h4.setAttribute('id', 'header');\r\n        h4.textContent = 'Transformation Requests';\r\n        let exit = document.createElement('button'); //Creating exit button for dashboard\r\n        exit.setAttribute('id', 'exit');\r\n        exit.innerHTML = 'X';\r\n        exit.onclick = function () {\r\n            clearTimeout(loop);\r\n            content.node.removeChild(div);\r\n            return;\r\n        };\r\n        let div_row = document.createElement('div'); //Creating div that contains page header\r\n        div_row.appendChild(h4);\r\n        div_row.appendChild(exit);\r\n        div.appendChild(div_row);\r\n        div.appendChild(table);\r\n        content.node.appendChild(div); //Appends newly created table to widget\r\n        let pageData = pagination(arr, state.page, state.rows); //Getting data set for specific page\r\n        for (let i = -1; i < pageData.querySet.length; i++) { //for loop for creating table\r\n            let row = document.createElement('tr'); //creating an individual row and the elements within it\r\n            let elem_1, elem_2, elem_3, elem_4, elem_5, elem_6, elem_7;\r\n            if (i == -1) { //For header of table (creating elements and attaching them)\r\n                elem_1 = document.createElement('th');\r\n                elem_1.innerHTML = \"Request\";\r\n                row.appendChild(elem_1);\r\n                elem_2 = document.createElement('th');\r\n                elem_2.innerHTML = \"Start Time\";\r\n                row.appendChild(elem_2);\r\n                elem_3 = document.createElement('th');\r\n                elem_3.innerHTML = \"Finish Time\";\r\n                row.appendChild(elem_3);\r\n                elem_4 = document.createElement('th');\r\n                elem_4.innerHTML = \"Status\";\r\n                row.appendChild(elem_4);\r\n                elem_5 = document.createElement('th');\r\n                elem_5.innerHTML = \"Files Completed\";\r\n                row.appendChild(elem_5);\r\n                elem_6 = document.createElement('th');\r\n                elem_6.innerHTML = \"Workers\";\r\n                row.appendChild(elem_6);\r\n                elem_7 = document.createElement('th');\r\n                elem_7.innerHTML = \"Actions\";\r\n                row.appendChild(elem_7);\r\n                thead.appendChild(row);\r\n            }\r\n            else { //For the data section of the table (creating elements and attaching them)\r\n                elem_1 = document.createElement('td');\r\n                let link = document.createElement('a'); //Creating link to transform request page\r\n                link.style.fontWeight = 'bold';\r\n                link.setAttribute(\"href\", pageData.querySet[i]['title_link']);\r\n                let linkText = document.createTextNode('Link');\r\n                link.appendChild(linkText);\r\n                elem_1.appendChild(link);\r\n                row.appendChild(elem_1);\r\n                elem_2 = document.createElement('td');\r\n                elem_2.innerHTML = pageData.querySet[i].start_time;\r\n                row.appendChild(elem_2);\r\n                elem_3 = document.createElement('td');\r\n                elem_3.innerHTML = pageData.querySet[i].finish_time;\r\n                row.appendChild(elem_3);\r\n                elem_4 = document.createElement('td');\r\n                let statusText = document.createTextNode(pageData.querySet[i].status);\r\n                elem_4.appendChild(statusText);\r\n                if (pageData.querySet[i].status == 'Submitted' || pageData.querySet[i].status == 'Running') { //If status is 'submitted' or 'running', progres bar is displayed\r\n                    let total_files = pageData.querySet[i].total_files;\r\n                    let completed_files = pageData.querySet[i].files_completed;\r\n                    let loading_bar = document.createElement('div'); //Creating outer element of progress bar\r\n                    loading_bar.style.width = '60px';\r\n                    loading_bar.style.height = '15px';\r\n                    loading_bar.style.backgroundColor = 'rgb(200, 200, 200)';\r\n                    loading_bar.style.marginTop = '4px';\r\n                    loading_bar.style.borderRadius = '6px';\r\n                    let progress_bar = document.createElement('span'); //Creating inner element of progress bar\r\n                    progress_bar.classList.add('progressBar');\r\n                    progress_bar.classList.add('progressBarStripes');\r\n                    if (total_files != null) { //Null check to make sure code doesn't break\r\n                        progress_bar.style.width = ((completed_files / total_files) * 60).toString() + 'px';\r\n                        let progress = (completed_files / total_files) * 100;\r\n                        progress_bar.innerHTML = progress.toFixed(0) + '%';\r\n                    }\r\n                    else {\r\n                        progress_bar.style.width = '40px';\r\n                        progress_bar.innerHTML = 'NaN%';\r\n                    }\r\n                    loading_bar.appendChild(progress_bar);\r\n                    elem_4.appendChild(loading_bar);\r\n                }\r\n                row.appendChild(elem_4);\r\n                elem_5 = document.createElement('td');\r\n                let link_1 = document.createElement('a'); //Adding link to log of successful files\r\n                link_1.style.fontWeight = 'normal';\r\n                link_1.setAttribute(\"href\", SERVICEX_URL + 'transformation-request/' + pageData.querySet[i].request_id + '/results?status=success');\r\n                let linkText1 = document.createTextNode(pageData.querySet[i].files_completed.toString());\r\n                link_1.appendChild(linkText1);\r\n                elem_5.appendChild(link_1);\r\n                let text;\r\n                if (pageData.querySet[i].total_files != null) { //Null check to make sure code doesn't break\r\n                    text = document.createTextNode(' of ' + pageData.querySet[i].total_files);\r\n                }\r\n                else {\r\n                    text = document.createTextNode(' of Unknown');\r\n                }\r\n                elem_5.appendChild(text);\r\n                if (pageData.querySet[i].files_skipped != 0) { //Adding link to log of failed files (if there are skipped files)\r\n                    let text_1 = document.createTextNode('\\n  (');\r\n                    elem_5.appendChild(text_1);\r\n                    let link_2 = document.createElement('a');\r\n                    link_2.style.fontWeight = 'normal';\r\n                    link_2.setAttribute(\"href\", SERVICEX_URL + 'transformation-request/' + pageData.querySet[i].request_id + '/results?status=failure');\r\n                    let linkText2 = document.createTextNode(pageData.querySet[i].files_skipped.toString());\r\n                    link_2.appendChild(linkText2);\r\n                    elem_5.appendChild(link_2);\r\n                    let text_2 = document.createTextNode(' failed)');\r\n                    elem_5.appendChild(text_2);\r\n                }\r\n                row.appendChild(elem_5);\r\n                elem_6 = document.createElement('td');\r\n                elem_6.innerHTML = pageData.querySet[i].workers;\r\n                row.appendChild(elem_6);\r\n                elem_7 = document.createElement('td');\r\n                ;\r\n                if (pageData.querySet[i].needs_action) { //If status is 'submitted' or 'running', button is displayed to cancel the request\r\n                    let btn = document.createElement('button');\r\n                    btn.setAttribute('id', 'cancelButton');\r\n                    btn.innerHTML = 'Cancel';\r\n                    btn.type = 'button';\r\n                    btn.onclick = async function () {\r\n                        fetch(SERVICEX_URL + 'servicex/transformation/' + pageData.querySet[i].request_id + '/cancel');\r\n                    };\r\n                    elem_7.append(btn);\r\n                }\r\n                row.appendChild(elem_7);\r\n                tbody.append(row);\r\n            }\r\n        }\r\n        let pagination_div = document.createElement('div'); //Creating pagination bar\r\n        pagination_div.style.color = 'white';\r\n        pagination_div.style.justifyContent = 'center';\r\n        pagination_div.style.padding = '10px';\r\n        createButtons(pageData, pagination_div); //call to create pagination buttons for widget\r\n        div.appendChild(pagination_div);\r\n        //console.log(SERVICEX_URL);\r\n        loop = setTimeout(createTable, 2500, SERVICEX_URL); //Call for polling inside createTable()\r\n    }\r\n    const content = new Widget(); //Creating widget and adding scrolling capabilites to it\r\n    content.addClass('my-apodWidget');\r\n    const widget = new MainAreaWidget({ content });\r\n    widget.id = 'servicex-dashboard';\r\n    widget.title.icon = 'servicex-logo';\r\n    widget.title.closable = true;\r\n    /* //code for alternate user input bar (might use if dropdown menu runs into issues)\r\n    let input_div = document.createElement('div');\r\n    input_div.style.backgroundColor = 'white';\r\n    input_div.style.padding = '7.5px 15px';\r\n    input_div.style.margin = '0px';\r\n    input_div.style.width = '535px';\r\n    let header = document.createElement('h3');\r\n    header.innerHTML = 'Enter ServiceX Instance URL';\r\n    header.style.fontWeight = '500';\r\n    let input = document.createElement('input');\r\n    input.setAttribute('id', 'input');\r\n    input.setAttribute('value', 'https://opendataaf-servicex-aod.servicex.coffea-opendata-dev.casa/');\r\n    input.style.width = '400px';\r\n    let input_button = document.createElement('button');\r\n    input_button.setAttribute('id', 'inputButton');\r\n    input_button.innerHTML = 'Go';\r\n    input_div.appendChild(header);\r\n    input_div.appendChild(input);\r\n    input_div.appendChild(input_button);\r\n    content.node.appendChild(input_div);\r\n    console.log('appended child');\r\n    input_button.onclick = function(){ //Initial call to create table for widget\r\n      createTable(input.value);\r\n    }*/\r\n    let instance_arr = [\r\n        'https://opendataaf-servicex-aod.servicex.coffea-opendata-dev.casa/',\r\n        'https://uproot-atlas.servicex.af.uchicago.edu/',\r\n        'https://xaod.servicex.af.uchicago.edu/',\r\n        'https://opendataaf-servicex.servicex.coffea-opendata-dev.casa/',\r\n        'https://opendataaf-servicex.servicex.coffea-opendata.casa/'\r\n    ];\r\n    let dropdown_container_div = document.createElement('div'); //creating container div for the entire dropdown section\r\n    dropdown_container_div.style.backgroundColor = 'white';\r\n    dropdown_container_div.style.padding = '7.5px 15px';\r\n    dropdown_container_div.style.margin = '0px';\r\n    dropdown_container_div.style.width = '535px';\r\n    dropdown_container_div.style.borderBottom = '0.5px solid gray';\r\n    let header = document.createElement('h3'); //Creating header above dropdown menu\r\n    header.innerHTML = 'Select ServiceX Instance URL';\r\n    header.style.fontWeight = '500';\r\n    dropdown_container_div.appendChild(header);\r\n    let dropdown = document.createElement('div'); //Creating div for the contents of the dropdown menu (initially hidden)\r\n    dropdown.classList.add('dropdown');\r\n    dropdown_container_div.appendChild(dropdown);\r\n    let dropdown_button = document.createElement('button'); //Creating button for dropdown menu\r\n    dropdown_button.classList.add('dropdownButton');\r\n    dropdown_button.innerHTML = '▼     Select an instance';\r\n    let dropdown_div = document.createElement('div'); //Creating div that houses the dropdown menu \r\n    dropdown_div.setAttribute('id', 'dropdownDiv');\r\n    dropdown_div.classList.add('dropdownDiv');\r\n    for (let i = 0; i < instance_arr.length; i++) { //Adding links to dropdown menu\r\n        let link = document.createElement('a');\r\n        link.innerHTML = instance_arr[i]; //Set the current link text to the a ServiceX instance url\r\n        link.onclick = function () {\r\n            clearTimeout(loop); //When a link is clicked, reset the polling loop and start a new loop with the current ServiceX instance url\r\n            createTable(instance_arr[i]);\r\n        };\r\n        dropdown_div.appendChild(link);\r\n    }\r\n    dropdown.appendChild(dropdown_button);\r\n    dropdown.appendChild(dropdown_div);\r\n    dropdown_button.onclick = function () {\r\n        dropdown_div.classList.toggle('show');\r\n    };\r\n    window.onclick = function (event) {\r\n        if (!event.target.matches('.dropdownButton')) {\r\n            dropdown_div.classList.remove('show');\r\n        }\r\n    };\r\n    content.node.appendChild(dropdown_container_div);\r\n    const command = 'dashboard: open'; //Command for opening dashboard through Command Line\r\n    app.commands.addCommand(command, {\r\n        label: 'ServiceX Dashboard',\r\n        execute: () => {\r\n            if (!widget.isAttached) {\r\n                app.shell.add(widget, 'left');\r\n            }\r\n            app.shell.activateById(widget.id);\r\n        }\r\n    });\r\n    palette.addItem({ command, category: 'Dashboard' });\r\n}\r\n"],"names":[],"sourceRoot":""}