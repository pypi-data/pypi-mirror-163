# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from properly_model_python.models.base_model_ import Model
from properly_model_python import util


class Person(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, initial_city_code: str=None, current_city_code: str=None, unverified_email: str=None, verified_email: str=None, id: str=None, preferred_name: str=None, full_name: str=None, phone: str=None):  # noqa: E501
        """Person - a model defined in Swagger

        :param initial_city_code: The initial_city_code of this Person.  # noqa: E501
        :type initial_city_code: str
        :param current_city_code: The current_city_code of this Person.  # noqa: E501
        :type current_city_code: str
        :param unverified_email: The unverified_email of this Person.  # noqa: E501
        :type unverified_email: str
        :param verified_email: The verified_email of this Person.  # noqa: E501
        :type verified_email: str
        :param id: The id of this Person.  # noqa: E501
        :type id: str
        :param preferred_name: The preferred_name of this Person.  # noqa: E501
        :type preferred_name: str
        :param full_name: The full_name of this Person.  # noqa: E501
        :type full_name: str
        :param phone: The phone of this Person.  # noqa: E501
        :type phone: str
        """
        self.swagger_types = {
            'initial_city_code': str,
            'current_city_code': str,
            'unverified_email': str,
            'verified_email': str,
            'id': str,
            'preferred_name': str,
            'full_name': str,
            'phone': str
        }

        self.attribute_map = {
            'initial_city_code': 'initialCityCode',
            'current_city_code': 'currentCityCode',
            'unverified_email': 'unverifiedEmail',
            'verified_email': 'verifiedEmail',
            'id': 'id',
            'preferred_name': 'preferredName',
            'full_name': 'fullName',
            'phone': 'phone'
        }

        self._initial_city_code = initial_city_code
        self._current_city_code = current_city_code
        self._unverified_email = unverified_email
        self._verified_email = verified_email
        self._id = id
        self._preferred_name = preferred_name
        self._full_name = full_name
        self._phone = phone

    @classmethod
    def from_dict(cls, dikt) -> 'Person':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Person of this Person.  # noqa: E501
        :rtype: Person
        """
        return util.deserialize_model(dikt, cls)

    @property
    def initial_city_code(self) -> str:
        """Gets the initial_city_code of this Person.


        :return: The initial_city_code of this Person.
        :rtype: str
        """
        return self._initial_city_code

    @initial_city_code.setter
    def initial_city_code(self, initial_city_code: str):
        """Sets the initial_city_code of this Person.


        :param initial_city_code: The initial_city_code of this Person.
        :type initial_city_code: str
        """

        self._initial_city_code = initial_city_code

    @property
    def current_city_code(self) -> str:
        """Gets the current_city_code of this Person.


        :return: The current_city_code of this Person.
        :rtype: str
        """
        return self._current_city_code

    @current_city_code.setter
    def current_city_code(self, current_city_code: str):
        """Sets the current_city_code of this Person.


        :param current_city_code: The current_city_code of this Person.
        :type current_city_code: str
        """

        self._current_city_code = current_city_code

    @property
    def unverified_email(self) -> str:
        """Gets the unverified_email of this Person.


        :return: The unverified_email of this Person.
        :rtype: str
        """
        return self._unverified_email

    @unverified_email.setter
    def unverified_email(self, unverified_email: str):
        """Sets the unverified_email of this Person.


        :param unverified_email: The unverified_email of this Person.
        :type unverified_email: str
        """

        self._unverified_email = unverified_email

    @property
    def verified_email(self) -> str:
        """Gets the verified_email of this Person.


        :return: The verified_email of this Person.
        :rtype: str
        """
        return self._verified_email

    @verified_email.setter
    def verified_email(self, verified_email: str):
        """Sets the verified_email of this Person.


        :param verified_email: The verified_email of this Person.
        :type verified_email: str
        """

        self._verified_email = verified_email

    @property
    def id(self) -> str:
        """Gets the id of this Person.


        :return: The id of this Person.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Person.


        :param id: The id of this Person.
        :type id: str
        """

        self._id = id

    @property
    def preferred_name(self) -> str:
        """Gets the preferred_name of this Person.


        :return: The preferred_name of this Person.
        :rtype: str
        """
        return self._preferred_name

    @preferred_name.setter
    def preferred_name(self, preferred_name: str):
        """Sets the preferred_name of this Person.


        :param preferred_name: The preferred_name of this Person.
        :type preferred_name: str
        """

        self._preferred_name = preferred_name

    @property
    def full_name(self) -> str:
        """Gets the full_name of this Person.


        :return: The full_name of this Person.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name: str):
        """Sets the full_name of this Person.


        :param full_name: The full_name of this Person.
        :type full_name: str
        """

        self._full_name = full_name

    @property
    def phone(self) -> str:
        """Gets the phone of this Person.


        :return: The phone of this Person.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone: str):
        """Sets the phone of this Person.


        :param phone: The phone of this Person.
        :type phone: str
        """

        self._phone = phone
