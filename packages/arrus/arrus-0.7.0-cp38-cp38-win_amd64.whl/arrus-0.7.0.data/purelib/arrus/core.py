# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _py_core
else:
    import _py_core

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SHARED_PTR_DISOWN = _py_core.SHARED_PTR_DISOWN
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _py_core.delete_SwigPyIterator

    def value(self):
        return _py_core.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _py_core.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _py_core.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _py_core.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _py_core.SwigPyIterator_equal(self, x)

    def copy(self):
        return _py_core.SwigPyIterator_copy(self)

    def next(self):
        return _py_core.SwigPyIterator_next(self)

    def __next__(self):
        return _py_core.SwigPyIterator___next__(self)

    def previous(self):
        return _py_core.SwigPyIterator_previous(self)

    def advance(self, n):
        return _py_core.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _py_core.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _py_core.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _py_core.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _py_core.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _py_core.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _py_core.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _py_core:
_py_core.SwigPyIterator_swigregister(SwigPyIterator)

class ArrusPythonGILUnlock(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _py_core.ArrusPythonGILUnlock_swiginit(self, _py_core.new_ArrusPythonGILUnlock())
    __swig_destroy__ = _py_core.delete_ArrusPythonGILUnlock

# Register ArrusPythonGILUnlock in _py_core:
_py_core.ArrusPythonGILUnlock_swigregister(ArrusPythonGILUnlock)

class VectorBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _py_core.VectorBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _py_core.VectorBool___nonzero__(self)

    def __bool__(self):
        return _py_core.VectorBool___bool__(self)

    def __len__(self):
        return _py_core.VectorBool___len__(self)

    def __getslice__(self, i, j):
        return _py_core.VectorBool___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _py_core.VectorBool___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _py_core.VectorBool___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _py_core.VectorBool___delitem__(self, *args)

    def __getitem__(self, *args):
        return _py_core.VectorBool___getitem__(self, *args)

    def __setitem__(self, *args):
        return _py_core.VectorBool___setitem__(self, *args)

    def pop(self):
        return _py_core.VectorBool_pop(self)

    def append(self, x):
        return _py_core.VectorBool_append(self, x)

    def empty(self):
        return _py_core.VectorBool_empty(self)

    def size(self):
        return _py_core.VectorBool_size(self)

    def swap(self, v):
        return _py_core.VectorBool_swap(self, v)

    def begin(self):
        return _py_core.VectorBool_begin(self)

    def end(self):
        return _py_core.VectorBool_end(self)

    def rbegin(self):
        return _py_core.VectorBool_rbegin(self)

    def rend(self):
        return _py_core.VectorBool_rend(self)

    def clear(self):
        return _py_core.VectorBool_clear(self)

    def get_allocator(self):
        return _py_core.VectorBool_get_allocator(self)

    def pop_back(self):
        return _py_core.VectorBool_pop_back(self)

    def erase(self, *args):
        return _py_core.VectorBool_erase(self, *args)

    def __init__(self, *args):
        _py_core.VectorBool_swiginit(self, _py_core.new_VectorBool(*args))

    def push_back(self, x):
        return _py_core.VectorBool_push_back(self, x)

    def front(self):
        return _py_core.VectorBool_front(self)

    def back(self):
        return _py_core.VectorBool_back(self)

    def assign(self, n, x):
        return _py_core.VectorBool_assign(self, n, x)

    def resize(self, *args):
        return _py_core.VectorBool_resize(self, *args)

    def insert(self, *args):
        return _py_core.VectorBool_insert(self, *args)

    def reserve(self, n):
        return _py_core.VectorBool_reserve(self, n)

    def capacity(self):
        return _py_core.VectorBool_capacity(self)
    __swig_destroy__ = _py_core.delete_VectorBool

# Register VectorBool in _py_core:
_py_core.VectorBool_swigregister(VectorBool)

class VectorFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _py_core.VectorFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _py_core.VectorFloat___nonzero__(self)

    def __bool__(self):
        return _py_core.VectorFloat___bool__(self)

    def __len__(self):
        return _py_core.VectorFloat___len__(self)

    def __getslice__(self, i, j):
        return _py_core.VectorFloat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _py_core.VectorFloat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _py_core.VectorFloat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _py_core.VectorFloat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _py_core.VectorFloat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _py_core.VectorFloat___setitem__(self, *args)

    def pop(self):
        return _py_core.VectorFloat_pop(self)

    def append(self, x):
        return _py_core.VectorFloat_append(self, x)

    def empty(self):
        return _py_core.VectorFloat_empty(self)

    def size(self):
        return _py_core.VectorFloat_size(self)

    def swap(self, v):
        return _py_core.VectorFloat_swap(self, v)

    def begin(self):
        return _py_core.VectorFloat_begin(self)

    def end(self):
        return _py_core.VectorFloat_end(self)

    def rbegin(self):
        return _py_core.VectorFloat_rbegin(self)

    def rend(self):
        return _py_core.VectorFloat_rend(self)

    def clear(self):
        return _py_core.VectorFloat_clear(self)

    def get_allocator(self):
        return _py_core.VectorFloat_get_allocator(self)

    def pop_back(self):
        return _py_core.VectorFloat_pop_back(self)

    def erase(self, *args):
        return _py_core.VectorFloat_erase(self, *args)

    def __init__(self, *args):
        _py_core.VectorFloat_swiginit(self, _py_core.new_VectorFloat(*args))

    def push_back(self, x):
        return _py_core.VectorFloat_push_back(self, x)

    def front(self):
        return _py_core.VectorFloat_front(self)

    def back(self):
        return _py_core.VectorFloat_back(self)

    def assign(self, n, x):
        return _py_core.VectorFloat_assign(self, n, x)

    def resize(self, *args):
        return _py_core.VectorFloat_resize(self, *args)

    def insert(self, *args):
        return _py_core.VectorFloat_insert(self, *args)

    def reserve(self, n):
        return _py_core.VectorFloat_reserve(self, n)

    def capacity(self):
        return _py_core.VectorFloat_capacity(self)
    __swig_destroy__ = _py_core.delete_VectorFloat

# Register VectorFloat in _py_core:
_py_core.VectorFloat_swigregister(VectorFloat)

class VectorUInt16(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _py_core.VectorUInt16_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _py_core.VectorUInt16___nonzero__(self)

    def __bool__(self):
        return _py_core.VectorUInt16___bool__(self)

    def __len__(self):
        return _py_core.VectorUInt16___len__(self)

    def __getslice__(self, i, j):
        return _py_core.VectorUInt16___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _py_core.VectorUInt16___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _py_core.VectorUInt16___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _py_core.VectorUInt16___delitem__(self, *args)

    def __getitem__(self, *args):
        return _py_core.VectorUInt16___getitem__(self, *args)

    def __setitem__(self, *args):
        return _py_core.VectorUInt16___setitem__(self, *args)

    def pop(self):
        return _py_core.VectorUInt16_pop(self)

    def append(self, x):
        return _py_core.VectorUInt16_append(self, x)

    def empty(self):
        return _py_core.VectorUInt16_empty(self)

    def size(self):
        return _py_core.VectorUInt16_size(self)

    def swap(self, v):
        return _py_core.VectorUInt16_swap(self, v)

    def begin(self):
        return _py_core.VectorUInt16_begin(self)

    def end(self):
        return _py_core.VectorUInt16_end(self)

    def rbegin(self):
        return _py_core.VectorUInt16_rbegin(self)

    def rend(self):
        return _py_core.VectorUInt16_rend(self)

    def clear(self):
        return _py_core.VectorUInt16_clear(self)

    def get_allocator(self):
        return _py_core.VectorUInt16_get_allocator(self)

    def pop_back(self):
        return _py_core.VectorUInt16_pop_back(self)

    def erase(self, *args):
        return _py_core.VectorUInt16_erase(self, *args)

    def __init__(self, *args):
        _py_core.VectorUInt16_swiginit(self, _py_core.new_VectorUInt16(*args))

    def push_back(self, x):
        return _py_core.VectorUInt16_push_back(self, x)

    def front(self):
        return _py_core.VectorUInt16_front(self)

    def back(self):
        return _py_core.VectorUInt16_back(self)

    def assign(self, n, x):
        return _py_core.VectorUInt16_assign(self, n, x)

    def resize(self, *args):
        return _py_core.VectorUInt16_resize(self, *args)

    def insert(self, *args):
        return _py_core.VectorUInt16_insert(self, *args)

    def reserve(self, n):
        return _py_core.VectorUInt16_reserve(self, n)

    def capacity(self):
        return _py_core.VectorUInt16_capacity(self)
    __swig_destroy__ = _py_core.delete_VectorUInt16

# Register VectorUInt16 in _py_core:
_py_core.VectorUInt16_swigregister(VectorUInt16)

class PairUint32(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _py_core.PairUint32_swiginit(self, _py_core.new_PairUint32(*args))
    first = property(_py_core.PairUint32_first_get, _py_core.PairUint32_first_set)
    second = property(_py_core.PairUint32_second_get, _py_core.PairUint32_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _py_core.delete_PairUint32

# Register PairUint32 in _py_core:
_py_core.PairUint32_swigregister(PairUint32)

class PairChannelIdx(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _py_core.PairChannelIdx_swiginit(self, _py_core.new_PairChannelIdx(*args))
    first = property(_py_core.PairChannelIdx_first_get, _py_core.PairChannelIdx_first_set)
    second = property(_py_core.PairChannelIdx_second_get, _py_core.PairChannelIdx_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _py_core.delete_PairChannelIdx

# Register PairChannelIdx in _py_core:
_py_core.PairChannelIdx_swigregister(PairChannelIdx)

ARRUS_PATH_KEY = _py_core.ARRUS_PATH_KEY
LogSeverity_TRACE = _py_core.LogSeverity_TRACE
LogSeverity_DEBUG = _py_core.LogSeverity_DEBUG
LogSeverity_INFO = _py_core.LogSeverity_INFO
LogSeverity_WARNING = _py_core.LogSeverity_WARNING
LogSeverity_ERROR = _py_core.LogSeverity_ERROR
LogSeverity_FATAL = _py_core.LogSeverity_FATAL

def __lshift__(stream, level):
    return _py_core.__lshift__(stream, level)
class Logger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def log(self, severity, msg):
        return _py_core.Logger_log(self, severity, msg)

    def setAttribute(self, key, value):
        return _py_core.Logger_setAttribute(self, key, value)
    __swig_destroy__ = _py_core.delete_Logger

# Register Logger in _py_core:
_py_core.Logger_swigregister(Logger)


def initLoggingMechanism(level):
    return _py_core.initLoggingMechanism(level)

def addLogFile(filepath, level):
    return _py_core.addLogFile(filepath, level)

def setClogLevel(level):
    return _py_core.setClogLevel(level)

def getLogger():
    return _py_core.getLogger()

def castToInt(ptr):
    return _py_core.castToInt(ptr)
class TupleUint32(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _py_core.TupleUint32_swiginit(self, _py_core.new_TupleUint32(*args))

    def get(self, i):
        return _py_core.TupleUint32_get(self, i)

    def size(self):
        return _py_core.TupleUint32_size(self)

    def getValues(self):
        return _py_core.TupleUint32_getValues(self)

    def product(self):
        return _py_core.TupleUint32_product(self)

    def sum(self):
        return _py_core.TupleUint32_sum(self)

    def __eq__(self, rhs):
        return _py_core.TupleUint32___eq__(self, rhs)

    def __ne__(self, rhs):
        return _py_core.TupleUint32___ne__(self, rhs)
    __swig_destroy__ = _py_core.delete_TupleUint32

# Register TupleUint32 in _py_core:
_py_core.TupleUint32_swigregister(TupleUint32)
cvar = _py_core.cvar

class NdArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DataType_INT16 = _py_core.NdArray_DataType_INT16

    def __init__(self, ptr, shape, dataType, placement):
        _py_core.NdArray_swiginit(self, _py_core.new_NdArray(ptr, shape, dataType, placement))

    def getInt16(self):
        return _py_core.NdArray_getInt16(self)

    def getShape(self):
        return _py_core.NdArray_getShape(self)

    def getDataType(self):
        return _py_core.NdArray_getDataType(self)
    __swig_destroy__ = _py_core.delete_NdArray

# Register NdArray in _py_core:
_py_core.NdArray_swigregister(NdArray)

class FrameChannelMappingAddress(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, us4oem, frame, channel):
        _py_core.FrameChannelMappingAddress_swiginit(self, _py_core.new_FrameChannelMappingAddress(us4oem, frame, channel))

    def getUs4oem(self):
        return _py_core.FrameChannelMappingAddress_getUs4oem(self)

    def getFrame(self):
        return _py_core.FrameChannelMappingAddress_getFrame(self)

    def getChannel(self):
        return _py_core.FrameChannelMappingAddress_getChannel(self)

    def __eq__(self, rhs):
        return _py_core.FrameChannelMappingAddress___eq__(self, rhs)

    def __ne__(self, rhs):
        return _py_core.FrameChannelMappingAddress___ne__(self, rhs)
    __swig_destroy__ = _py_core.delete_FrameChannelMappingAddress

# Register FrameChannelMappingAddress in _py_core:
_py_core.FrameChannelMappingAddress_swigregister(FrameChannelMappingAddress)

class FrameChannelMapping(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    UNAVAILABLE = _py_core.FrameChannelMapping_UNAVAILABLE

    def getLogical(self, frame, channel):
        return _py_core.FrameChannelMapping_getLogical(self, frame, channel)

    def getFirstFrame(self, us4oem):
        return _py_core.FrameChannelMapping_getFirstFrame(self, us4oem)

    def getFrameOffsets(self):
        return _py_core.FrameChannelMapping_getFrameOffsets(self)

    def getNumberOfLogicalFrames(self):
        return _py_core.FrameChannelMapping_getNumberOfLogicalFrames(self)

    def getNumberOfLogicalChannels(self):
        return _py_core.FrameChannelMapping_getNumberOfLogicalChannels(self)

    def getNumberOfFrames(self, *args):
        return _py_core.FrameChannelMapping_getNumberOfFrames(self, *args)

    @staticmethod
    def isChannelUnavailable(channelNumber):
        return _py_core.FrameChannelMapping_isChannelUnavailable(channelNumber)
    __swig_destroy__ = _py_core.delete_FrameChannelMapping

# Register FrameChannelMapping in _py_core:
_py_core.FrameChannelMapping_swigregister(FrameChannelMapping)

def FrameChannelMapping_isChannelUnavailable(channelNumber):
    return _py_core.FrameChannelMapping_isChannelUnavailable(channelNumber)

class DataBufferSpec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Type_FIFO = _py_core.DataBufferSpec_Type_FIFO

    def __init__(self, bufferType, nElements):
        _py_core.DataBufferSpec_swiginit(self, _py_core.new_DataBufferSpec(bufferType, nElements))

    def getType(self):
        return _py_core.DataBufferSpec_getType(self)

    def getNumberOfElements(self):
        return _py_core.DataBufferSpec_getNumberOfElements(self)
    __swig_destroy__ = _py_core.delete_DataBufferSpec

# Register DataBufferSpec in _py_core:
_py_core.DataBufferSpec_swigregister(DataBufferSpec)

class BufferElement(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _py_core.delete_BufferElement

    def release(self):
        return _py_core.BufferElement_release(self)

    def getData(self):
        return _py_core.BufferElement_getData(self)

    def getSize(self):
        return _py_core.BufferElement_getSize(self)

    def getPosition(self):
        return _py_core.BufferElement_getPosition(self)

# Register BufferElement in _py_core:
_py_core.BufferElement_swigregister(BufferElement)

class Buffer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _py_core.delete_Buffer

    def getNumberOfElements(self):
        return _py_core.Buffer_getNumberOfElements(self)

    def getElement(self, i):
        return _py_core.Buffer_getElement(self, i)

    def getElementSize(self):
        return _py_core.Buffer_getElementSize(self)

# Register Buffer in _py_core:
_py_core.Buffer_swigregister(Buffer)

class DataBuffer(Buffer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def registerOnNewDataCallback(self, callback):
        return _py_core.DataBuffer_registerOnNewDataCallback(self, callback)

    def registerOnOverflowCallback(self, callback):
        return _py_core.DataBuffer_registerOnOverflowCallback(self, callback)

    def registerShutdownCallback(self, callback):
        return _py_core.DataBuffer_registerShutdownCallback(self, callback)
    __swig_destroy__ = _py_core.delete_DataBuffer

# Register DataBuffer in _py_core:
_py_core.DataBuffer_swigregister(DataBuffer)

class OnNewDataCallbackWrapper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == OnNewDataCallbackWrapper:
            _self = None
        else:
            _self = self
        _py_core.OnNewDataCallbackWrapper_swiginit(self, _py_core.new_OnNewDataCallbackWrapper(_self, ))

    def run(self, element):
        return _py_core.OnNewDataCallbackWrapper_run(self, element)
    __swig_destroy__ = _py_core.delete_OnNewDataCallbackWrapper
    def __disown__(self):
        self.this.disown()
        _py_core.disown_OnNewDataCallbackWrapper(self)
        return weakref.proxy(self)

# Register OnNewDataCallbackWrapper in _py_core:
_py_core.OnNewDataCallbackWrapper_swigregister(OnNewDataCallbackWrapper)


def registerOnNewDataCallbackFifoLockFreeBuffer(buffer, callback):
    return _py_core.registerOnNewDataCallbackFifoLockFreeBuffer(buffer, callback)
class OnBufferOverflowCallbackWrapper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _py_core.OnBufferOverflowCallbackWrapper_swiginit(self, _py_core.new_OnBufferOverflowCallbackWrapper())

    def run(self):
        return _py_core.OnBufferOverflowCallbackWrapper_run(self)
    __swig_destroy__ = _py_core.delete_OnBufferOverflowCallbackWrapper

# Register OnBufferOverflowCallbackWrapper in _py_core:
_py_core.OnBufferOverflowCallbackWrapper_swigregister(OnBufferOverflowCallbackWrapper)


def registerOnBufferOverflowCallback(buffer, callback):
    return _py_core.registerOnBufferOverflowCallback(buffer, callback)
class UploadConstMetadata(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, metadata):
        _py_core.UploadConstMetadata_swiginit(self, _py_core.new_UploadConstMetadata(metadata))
    __swig_destroy__ = _py_core.delete_UploadConstMetadata

# Register UploadConstMetadata in _py_core:
_py_core.UploadConstMetadata_swigregister(UploadConstMetadata)

class UploadResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _py_core.delete_UploadResult

    def __init__(self, *args):
        _py_core.UploadResult_swiginit(self, _py_core.new_UploadResult(*args))

    def getBuffer(self):
        return _py_core.UploadResult_getBuffer(self)

    def getConstMetadata(self):
        return _py_core.UploadResult_getConstMetadata(self)

# Register UploadResult in _py_core:
_py_core.UploadResult_swigregister(UploadResult)

class Session(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getDevice(self, *args):
        return _py_core.Session_getDevice(self, *args)

    def upload(self, scheme):
        return _py_core.Session_upload(self, scheme)

    def startScheme(self):
        return _py_core.Session_startScheme(self)

    def stopScheme(self):
        return _py_core.Session_stopScheme(self)

    def run(self):
        return _py_core.Session_run(self)

    def close(self):
        return _py_core.Session_close(self)
    __swig_destroy__ = _py_core.delete_Session

# Register Session in _py_core:
_py_core.Session_swigregister(Session)


def createSessionSharedHandle(filepath):
    return _py_core.createSessionSharedHandle(filepath)

def getFrameChannelMapping(uploadResult):
    return _py_core.getFrameChannelMapping(uploadResult)

def getFifoLockFreeBuffer(uploadResult):
    return _py_core.getFifoLockFreeBuffer(uploadResult)

def arrusSessionStartScheme(session):
    return _py_core.arrusSessionStartScheme(session)

def arrusSessionStopScheme(session):
    return _py_core.arrusSessionStopScheme(session)
DeviceType_Us4R = _py_core.DeviceType_Us4R
DeviceType_Us4OEM = _py_core.DeviceType_Us4OEM
DeviceType_ProbeAdapter = _py_core.DeviceType_ProbeAdapter
DeviceType_Probe = _py_core.DeviceType_Probe
DeviceType_GPU = _py_core.DeviceType_GPU
DeviceType_CPU = _py_core.DeviceType_CPU
DeviceType_HV = _py_core.DeviceType_HV

def parseToDeviceTypeEnum(deviceTypeStr):
    return _py_core.parseToDeviceTypeEnum(deviceTypeStr)

def toString(deviceTypeEnum):
    return _py_core.toString(deviceTypeEnum)
class DeviceId(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dt, ordinal):
        _py_core.DeviceId_swiginit(self, _py_core.new_DeviceId(dt, ordinal))

    def getDeviceType(self):
        return _py_core.DeviceId_getDeviceType(self)

    def getOrdinal(self):
        return _py_core.DeviceId_getOrdinal(self)

    def __eq__(self, rhs):
        return _py_core.DeviceId___eq__(self, rhs)

    def __ne__(self, rhs):
        return _py_core.DeviceId___ne__(self, rhs)

    def toString(self):
        return _py_core.DeviceId_toString(self)

    @staticmethod
    def parse(deviceId):
        return _py_core.DeviceId_parse(deviceId)
    __swig_destroy__ = _py_core.delete_DeviceId

# Register DeviceId in _py_core:
_py_core.DeviceId_swigregister(DeviceId)

def DeviceId_parse(deviceId):
    return _py_core.DeviceId_parse(deviceId)

class Device(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getDeviceId(self):
        return _py_core.Device_getDeviceId(self)
    __swig_destroy__ = _py_core.delete_Device

# Register Device in _py_core:
_py_core.Device_swigregister(Device)

class DeviceWithComponents(Device):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getDevice(self, path):
        return _py_core.DeviceWithComponents_getDevice(self, path)
    __swig_destroy__ = _py_core.delete_DeviceWithComponents

# Register DeviceWithComponents in _py_core:
_py_core.DeviceWithComponents_swigregister(DeviceWithComponents)

class Us4OEM(Device):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    RxTestPattern_OFF = _py_core.Us4OEM_RxTestPattern_OFF
    RxTestPattern_RAMP = _py_core.Us4OEM_RxTestPattern_RAMP
    __swig_destroy__ = _py_core.delete_Us4OEM

    def getSamplingFrequency(self):
        return _py_core.Us4OEM_getSamplingFrequency(self)

    def getFPGATemperature(self):
        return _py_core.Us4OEM_getFPGATemperature(self)

    def checkFirmwareVersion(self):
        return _py_core.Us4OEM_checkFirmwareVersion(self)

    def checkState(self):
        return _py_core.Us4OEM_checkState(self)

    def getFirmwareVersion(self):
        return _py_core.Us4OEM_getFirmwareVersion(self)

    def getTxFirmwareVersion(self):
        return _py_core.Us4OEM_getTxFirmwareVersion(self)

# Register Us4OEM in _py_core:
_py_core.Us4OEM_swigregister(Us4OEM)

class Us4R(DeviceWithComponents):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    INF_TIMEOUT = _py_core.Us4R_INF_TIMEOUT
    __swig_destroy__ = _py_core.delete_Us4R

    def getUs4OEM(self, ordinal):
        return _py_core.Us4R_getUs4OEM(self, ordinal)

    def getProbeAdapter(self, ordinal):
        return _py_core.Us4R_getProbeAdapter(self, ordinal)

    def getProbe(self, ordinal):
        return _py_core.Us4R_getProbe(self, ordinal)

    def upload(self, seq, rxBufferSize, workMode, hostBufferSpec):
        return _py_core.Us4R_upload(self, seq, rxBufferSize, workMode, hostBufferSpec)

    def setVoltage(self, voltage):
        return _py_core.Us4R_setVoltage(self, voltage)

    def getVoltage(self):
        return _py_core.Us4R_getVoltage(self)

    def getMeasuredPVoltage(self):
        return _py_core.Us4R_getMeasuredPVoltage(self)

    def getMeasuredMVoltage(self):
        return _py_core.Us4R_getMeasuredMVoltage(self)

    def disableHV(self):
        return _py_core.Us4R_disableHV(self)

    def setTgcCurve(self, *args):
        return _py_core.Us4R_setTgcCurve(self, *args)

    def setPgaGain(self, value):
        return _py_core.Us4R_setPgaGain(self, value)

    def setLnaGain(self, value):
        return _py_core.Us4R_setLnaGain(self, value)

    def setLpfCutoff(self, value):
        return _py_core.Us4R_setLpfCutoff(self, value)

    def setDtgcAttenuation(self, value):
        return _py_core.Us4R_setDtgcAttenuation(self, value)

    def setActiveTermination(self, value):
        return _py_core.Us4R_setActiveTermination(self, value)

    def setRxSettings(self, settings):
        return _py_core.Us4R_setRxSettings(self, settings)

    def setTestPattern(self, pattern):
        return _py_core.Us4R_setTestPattern(self, pattern)

    def start(self):
        return _py_core.Us4R_start(self)

    def stop(self):
        return _py_core.Us4R_stop(self)

    def getChannelsMask(self):
        return _py_core.Us4R_getChannelsMask(self)

    def getNumberOfUs4OEMs(self):
        return _py_core.Us4R_getNumberOfUs4OEMs(self)

    def getSamplingFrequency(self):
        return _py_core.Us4R_getSamplingFrequency(self)

    def checkState(self):
        return _py_core.Us4R_checkState(self)

    def setStopOnOverflow(self, isStopOnOverflow):
        return _py_core.Us4R_setStopOnOverflow(self, isStopOnOverflow)

    def isStopOnOverflow(self):
        return _py_core.Us4R_isStopOnOverflow(self)

# Register Us4R in _py_core:
_py_core.Us4R_swigregister(Us4R)

class ProbeModelId(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, manufacturer, name):
        _py_core.ProbeModelId_swiginit(self, _py_core.new_ProbeModelId(manufacturer, name))

    def getName(self):
        return _py_core.ProbeModelId_getName(self)

    def getManufacturer(self):
        return _py_core.ProbeModelId_getManufacturer(self)

    def toString(self):
        return _py_core.ProbeModelId_toString(self)
    __swig_destroy__ = _py_core.delete_ProbeModelId

# Register ProbeModelId in _py_core:
_py_core.ProbeModelId_swigregister(ProbeModelId)

class ProbeModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, modelId, numberOfElements, pitch, txFrequencyRange, voltageRange, curvatureRadius):
        _py_core.ProbeModel_swiginit(self, _py_core.new_ProbeModel(modelId, numberOfElements, pitch, txFrequencyRange, voltageRange, curvatureRadius))

    def getModelId(self):
        return _py_core.ProbeModel_getModelId(self)

    def getNumberOfElements(self):
        return _py_core.ProbeModel_getNumberOfElements(self)

    def getPitch(self):
        return _py_core.ProbeModel_getPitch(self)

    def getTxFrequencyRange(self):
        return _py_core.ProbeModel_getTxFrequencyRange(self)

    def getVoltageRange(self):
        return _py_core.ProbeModel_getVoltageRange(self)

    def getCurvatureRadius(self):
        return _py_core.ProbeModel_getCurvatureRadius(self)
    __swig_destroy__ = _py_core.delete_ProbeModel

# Register ProbeModel in _py_core:
_py_core.ProbeModel_swigregister(ProbeModel)

class Probe(Device):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _py_core.delete_Probe

    def getModel(self):
        return _py_core.Probe_getModel(self)

# Register Probe in _py_core:
_py_core.Probe_swigregister(Probe)


def castToUs4r(device):
    return _py_core.castToUs4r(device)

def getNumberOfElements(probe):
    return _py_core.getNumberOfElements(probe)

def getPitch(probe):
    return _py_core.getPitch(probe)
class Pulse(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, centerFrequency, nPeriods, inverse):
        _py_core.Pulse_swiginit(self, _py_core.new_Pulse(centerFrequency, nPeriods, inverse))

    def getCenterFrequency(self):
        return _py_core.Pulse_getCenterFrequency(self)

    def getNPeriods(self):
        return _py_core.Pulse_getNPeriods(self)

    def isInverse(self):
        return _py_core.Pulse_isInverse(self)

    def __eq__(self, rhs):
        return _py_core.Pulse___eq__(self, rhs)

    def __ne__(self, rhs):
        return _py_core.Pulse___ne__(self, rhs)
    __swig_destroy__ = _py_core.delete_Pulse

# Register Pulse in _py_core:
_py_core.Pulse_swigregister(Pulse)

class Rx(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _py_core.Rx_swiginit(self, _py_core.new_Rx(*args))

    def getAperture(self):
        return _py_core.Rx_getAperture(self)

    def getSampleRange(self):
        return _py_core.Rx_getSampleRange(self)

    def getDownsamplingFactor(self):
        return _py_core.Rx_getDownsamplingFactor(self)

    def getPadding(self):
        return _py_core.Rx_getPadding(self)
    __swig_destroy__ = _py_core.delete_Rx

# Register Rx in _py_core:
_py_core.Rx_swigregister(Rx)

class Tx(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, aperture, delays, excitation):
        _py_core.Tx_swiginit(self, _py_core.new_Tx(aperture, delays, excitation))

    def getAperture(self):
        return _py_core.Tx_getAperture(self)

    def getDelays(self):
        return _py_core.Tx_getDelays(self)

    def getExcitation(self):
        return _py_core.Tx_getExcitation(self)
    __swig_destroy__ = _py_core.delete_Tx

# Register Tx in _py_core:
_py_core.Tx_swigregister(Tx)

class TxRx(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _py_core.TxRx_swiginit(self, _py_core.new_TxRx(*args))

    def getTx(self):
        return _py_core.TxRx_getTx(self)

    def getRx(self):
        return _py_core.TxRx_getRx(self)

    def getPri(self):
        return _py_core.TxRx_getPri(self)
    __swig_destroy__ = _py_core.delete_TxRx

# Register TxRx in _py_core:
_py_core.TxRx_swigregister(TxRx)

class TxRxSequence(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NO_SRI = _py_core.TxRxSequence_NO_SRI

    def __init__(self, *args):
        _py_core.TxRxSequence_swiginit(self, _py_core.new_TxRxSequence(*args))

    def getOps(self):
        return _py_core.TxRxSequence_getOps(self)

    def getTgcCurve(self):
        return _py_core.TxRxSequence_getTgcCurve(self)

    def getSri(self):
        return _py_core.TxRxSequence_getSri(self)

    def getNRepeats(self):
        return _py_core.TxRxSequence_getNRepeats(self)
    __swig_destroy__ = _py_core.delete_TxRxSequence

# Register TxRxSequence in _py_core:
_py_core.TxRxSequence_swigregister(TxRxSequence)

class Scheme(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    WorkMode_ASYNC = _py_core.Scheme_WorkMode_ASYNC
    WorkMode_HOST = _py_core.Scheme_WorkMode_HOST
    WorkMode_MANUAL = _py_core.Scheme_WorkMode_MANUAL

    def __init__(self, txRxSequence, rxBufferSize, outputBuffer, workMode):
        _py_core.Scheme_swiginit(self, _py_core.new_Scheme(txRxSequence, rxBufferSize, outputBuffer, workMode))

    def getTxRxSequence(self):
        return _py_core.Scheme_getTxRxSequence(self)

    def getRxBufferSize(self):
        return _py_core.Scheme_getRxBufferSize(self)

    def getOutputBuffer(self):
        return _py_core.Scheme_getOutputBuffer(self)

    def getWorkMode(self):
        return _py_core.Scheme_getWorkMode(self)
    __swig_destroy__ = _py_core.delete_Scheme

# Register Scheme in _py_core:
_py_core.Scheme_swigregister(Scheme)

class TxRxVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _py_core.TxRxVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _py_core.TxRxVector___nonzero__(self)

    def __bool__(self):
        return _py_core.TxRxVector___bool__(self)

    def __len__(self):
        return _py_core.TxRxVector___len__(self)

    def __getslice__(self, i, j):
        return _py_core.TxRxVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _py_core.TxRxVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _py_core.TxRxVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _py_core.TxRxVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _py_core.TxRxVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _py_core.TxRxVector___setitem__(self, *args)

    def pop(self):
        return _py_core.TxRxVector_pop(self)

    def append(self, x):
        return _py_core.TxRxVector_append(self, x)

    def empty(self):
        return _py_core.TxRxVector_empty(self)

    def size(self):
        return _py_core.TxRxVector_size(self)

    def swap(self, v):
        return _py_core.TxRxVector_swap(self, v)

    def begin(self):
        return _py_core.TxRxVector_begin(self)

    def end(self):
        return _py_core.TxRxVector_end(self)

    def rbegin(self):
        return _py_core.TxRxVector_rbegin(self)

    def rend(self):
        return _py_core.TxRxVector_rend(self)

    def clear(self):
        return _py_core.TxRxVector_clear(self)

    def get_allocator(self):
        return _py_core.TxRxVector_get_allocator(self)

    def pop_back(self):
        return _py_core.TxRxVector_pop_back(self)

    def erase(self, *args):
        return _py_core.TxRxVector_erase(self, *args)

    def __init__(self, *args):
        _py_core.TxRxVector_swiginit(self, _py_core.new_TxRxVector(*args))

    def push_back(self, x):
        return _py_core.TxRxVector_push_back(self, x)

    def front(self):
        return _py_core.TxRxVector_front(self)

    def back(self):
        return _py_core.TxRxVector_back(self)

    def assign(self, n, x):
        return _py_core.TxRxVector_assign(self, n, x)

    def resize(self, *args):
        return _py_core.TxRxVector_resize(self, *args)

    def insert(self, *args):
        return _py_core.TxRxVector_insert(self, *args)

    def reserve(self, n):
        return _py_core.TxRxVector_reserve(self, n)

    def capacity(self):
        return _py_core.TxRxVector_capacity(self)
    __swig_destroy__ = _py_core.delete_TxRxVector

# Register TxRxVector in _py_core:
_py_core.TxRxVector_swigregister(TxRxVector)


def TxRxVectorPushBack(txrxs, txrx):
    return _py_core.TxRxVectorPushBack(txrxs, txrx)
class RxSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    TGC_ATTENUATION_RANGE = _py_core.RxSettings_TGC_ATTENUATION_RANGE

    @staticmethod
    def getTgcMinMax(pgaGain, lnaGain):
        return _py_core.RxSettings_getTgcMinMax(pgaGain, lnaGain)

    def __init__(self, dtgcAttenuation, pgaGain, lnaGain, tgcSamples, lpfCutoff, activeTermination, applyTgcCharacteristic=True):
        _py_core.RxSettings_swiginit(self, _py_core.new_RxSettings(dtgcAttenuation, pgaGain, lnaGain, tgcSamples, lpfCutoff, activeTermination, applyTgcCharacteristic))

    def getDtgcAttenuation(self):
        return _py_core.RxSettings_getDtgcAttenuation(self)

    def getPgaGain(self):
        return _py_core.RxSettings_getPgaGain(self)

    def getLnaGain(self):
        return _py_core.RxSettings_getLnaGain(self)

    def getTgcSamples(self):
        return _py_core.RxSettings_getTgcSamples(self)

    def getLpfCutoff(self):
        return _py_core.RxSettings_getLpfCutoff(self)

    def getActiveTermination(self):
        return _py_core.RxSettings_getActiveTermination(self)

    def isApplyTgcCharacteristic(self):
        return _py_core.RxSettings_isApplyTgcCharacteristic(self)
    __swig_destroy__ = _py_core.delete_RxSettings

# Register RxSettings in _py_core:
_py_core.RxSettings_swigregister(RxSettings)

def RxSettings_getTgcMinMax(pgaGain, lnaGain):
    return _py_core.RxSettings_getTgcMinMax(pgaGain, lnaGain)

class Us4OEMSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ReprogrammingMode_SEQUENTIAL = _py_core.Us4OEMSettings_ReprogrammingMode_SEQUENTIAL
    ReprogrammingMode_PARALLEL = _py_core.Us4OEMSettings_ReprogrammingMode_PARALLEL

    def __init__(self, *args):
        _py_core.Us4OEMSettings_swiginit(self, _py_core.new_Us4OEMSettings(*args))

    def getChannelMapping(self):
        return _py_core.Us4OEMSettings_getChannelMapping(self)

    def getActiveChannelGroups(self):
        return _py_core.Us4OEMSettings_getActiveChannelGroups(self)

    def getRxSettings(self):
        return _py_core.Us4OEMSettings_getRxSettings(self)

    def getChannelsMask(self):
        return _py_core.Us4OEMSettings_getChannelsMask(self)

    def getReprogrammingMode(self):
        return _py_core.Us4OEMSettings_getReprogrammingMode(self)
    __swig_destroy__ = _py_core.delete_Us4OEMSettings

# Register Us4OEMSettings in _py_core:
_py_core.Us4OEMSettings_swigregister(Us4OEMSettings)

class ProbeAdapterModelId(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, manufacturer, name):
        _py_core.ProbeAdapterModelId_swiginit(self, _py_core.new_ProbeAdapterModelId(manufacturer, name))

    def getName(self):
        return _py_core.ProbeAdapterModelId_getName(self)

    def getManufacturer(self):
        return _py_core.ProbeAdapterModelId_getManufacturer(self)

    def toString(self):
        return _py_core.ProbeAdapterModelId_toString(self)
    __swig_destroy__ = _py_core.delete_ProbeAdapterModelId

# Register ProbeAdapterModelId in _py_core:
_py_core.ProbeAdapterModelId_swigregister(ProbeAdapterModelId)

class ProbeAdapterSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, modelId, numberOfChannels, mapping):
        _py_core.ProbeAdapterSettings_swiginit(self, _py_core.new_ProbeAdapterSettings(modelId, numberOfChannels, mapping))

    def getModelId(self):
        return _py_core.ProbeAdapterSettings_getModelId(self)

    def getNumberOfChannels(self):
        return _py_core.ProbeAdapterSettings_getNumberOfChannels(self)

    def getChannelMapping(self):
        return _py_core.ProbeAdapterSettings_getChannelMapping(self)
    __swig_destroy__ = _py_core.delete_ProbeAdapterSettings

# Register ProbeAdapterSettings in _py_core:
_py_core.ProbeAdapterSettings_swigregister(ProbeAdapterSettings)

class ProbeSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model, channelMapping):
        _py_core.ProbeSettings_swiginit(self, _py_core.new_ProbeSettings(model, channelMapping))

    def getChannelMapping(self):
        return _py_core.ProbeSettings_getChannelMapping(self)

    def getModel(self):
        return _py_core.ProbeSettings_getModel(self)
    __swig_destroy__ = _py_core.delete_ProbeSettings

# Register ProbeSettings in _py_core:
_py_core.ProbeSettings_swigregister(ProbeSettings)

class HVModelId(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, manufacturer, name):
        _py_core.HVModelId_swiginit(self, _py_core.new_HVModelId(manufacturer, name))

    def getManufacturer(self):
        return _py_core.HVModelId_getManufacturer(self)

    def getName(self):
        return _py_core.HVModelId_getName(self)

    def toString(self):
        return _py_core.HVModelId_toString(self)
    __swig_destroy__ = _py_core.delete_HVModelId

# Register HVModelId in _py_core:
_py_core.HVModelId_swigregister(HVModelId)

class HVSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, modelId):
        _py_core.HVSettings_swiginit(self, _py_core.new_HVSettings(modelId))

    def getModelId(self):
        return _py_core.HVSettings_getModelId(self)
    __swig_destroy__ = _py_core.delete_HVSettings

# Register HVSettings in _py_core:
_py_core.HVSettings_swigregister(HVSettings)

class Us4RSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _py_core.Us4RSettings_swiginit(self, _py_core.new_Us4RSettings(*args))

    def getUs4OEMSettings(self):
        return _py_core.Us4RSettings_getUs4OEMSettings(self)

    def getProbeAdapterSettings(self):
        return _py_core.Us4RSettings_getProbeAdapterSettings(self)

    def getProbeSettings(self):
        return _py_core.Us4RSettings_getProbeSettings(self)

    def getRxSettings(self):
        return _py_core.Us4RSettings_getRxSettings(self)

    def getHVSettings(self):
        return _py_core.Us4RSettings_getHVSettings(self)

    def getChannelsMask(self):
        return _py_core.Us4RSettings_getChannelsMask(self)

    def getUs4OEMChannelsMask(self):
        return _py_core.Us4RSettings_getUs4OEMChannelsMask(self)

    def getReprogrammingMode(self):
        return _py_core.Us4RSettings_getReprogrammingMode(self)

    def getNumberOfUs4oems(self):
        return _py_core.Us4RSettings_getNumberOfUs4oems(self)

    def getAdapterToUs4RModuleNumber(self):
        return _py_core.Us4RSettings_getAdapterToUs4RModuleNumber(self)

    def isExternalTrigger(self):
        return _py_core.Us4RSettings_isExternalTrigger(self)
    __swig_destroy__ = _py_core.delete_Us4RSettings

# Register Us4RSettings in _py_core:
_py_core.Us4RSettings_swigregister(Us4RSettings)

class SessionSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, us4RSettings):
        _py_core.SessionSettings_swiginit(self, _py_core.new_SessionSettings(us4RSettings))

    def getUs4RSettings(self):
        return _py_core.SessionSettings_getUs4RSettings(self)
    __swig_destroy__ = _py_core.delete_SessionSettings

# Register SessionSettings in _py_core:
_py_core.SessionSettings_swigregister(SessionSettings)


def readSessionSettings(file):
    return _py_core.readSessionSettings(file)


