"use strict";(self.webpackChunkgetsshpubkey=self.webpackChunkgetsshpubkey||[]).push([[763],{763:(e,t,o)=>{o.r(t),o.d(t,{default:()=>u});var n,s=o(250),a=o(921),r=o(991),c=o(19),i=o(748);!function(e){e.createNew="getsshpubkey:getssh"}(n||(n={}));const l={id:"getsshpubkey:plugin",autoStart:!0,optional:[a.ISettingRegistry,s.ILauncher],activate:(e,t,o)=>{console.log("JupyterLab extension getsshpubkey is activated!");const{commands:s}=e,a=n.createNew;s.addCommand(a,{label:e=>(e.isPalette,"SSH Key"),caption:"SSH Key",icon:e=>{},execute:async e=>{(async function(e="",t={}){const o=i.ServerConnection.makeSettings(),n=c.URLExt.join(o.baseUrl,"getsshpubkey",e);let s;try{s=await i.ServerConnection.makeRequest(n,t,o)}catch(e){throw new i.ServerConnection.NetworkError(e)}let a=await s.text();if(a.length>0)try{a=JSON.parse(a)}catch(e){console.log("Not a JSON response body.",s)}if(!s.ok)throw new i.ServerConnection.ResponseError(s,a.message||a);return a})("get_ssh_pub_key",{method:"GET"}).then((e=>(0,r.showDialog)({title:"Public SSH key",body:e.data,focusNodeSelector:"input",buttons:[r.Dialog.cancelButton({label:"Cancel"}),r.Dialog.okButton({label:"Copy"})]}).then((t=>{if(console.log(t),!t.button.accept)return null;r.Clipboard.copyToSystem(e.data)})))).then((e=>(0,r.showDialog)({body:"Copied!"}))).catch((e=>{console.error(`The getsshpubkey server extension appears to be missing.\n${e}`)}))}}),o&&o.add({command:a,category:"Other",rank:2}),t&&t.load(l.id).then((e=>{console.log("getsshpubkey settings loaded:",e.composite)})).catch((e=>{console.error("Failed to load settings for getsshpubkey.",e)}))}},u=l}}]);