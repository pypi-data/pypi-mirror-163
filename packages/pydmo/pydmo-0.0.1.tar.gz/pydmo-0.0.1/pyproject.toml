[tool.poetry]
name = "pydmo"
version = "0.0.1"
description = "Pydmo: Build a database pydantic schema from its collection of data tables"
authors = ["Matthieu Doutreligne <matt.dout@gmail.com>"]
license = "EUPL-v1.2"
readme = "README.md"
repository = "https://gitlab.com/strayMat/pydmo"
homepage = "https://gitlab.com/strayMat/pydmo"
include = ["bin"]
keywords = ["pydantic", "data schema"]
classifiers = [
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

# [tool.poetry.urls]
# Changelog = "https://gitlab.com/strayMat/pydmo/releases"

[tool.poetry.dependencies]
python = "^3.7.1"

# Project-Specific
python-dotenv = "^0.20.0"
click = "^8.0.4"
# Jupyter Notebook
jupyter = "^1.0.0"
jupytext = "^1.13.7"
# Documentation
importlib-metadata = { version = "^4.11.3", optional = true }
myst-parser = { version = "^0.17.0", optional = true }
pygments = { version = "^2.11.2", optional = true }
sphinx = { version = "^4.4.0", optional = true }
sphinx-autodoc-typehints = { version = "^1.17.0", optional = true }
pydata-sphinx-theme = { version = "^0.8.0", optional = true }
sphinxcontrib-apidoc = { version = "^0.3.0", optional = true }
sphinx-click = { version = "^3.1.0", optional = true }

# see: https://github.com/sphinx-doc/sphinx/issues/10291
jinja2 = { version = "<3.1", optional = true}
pandas = "^1.3.0"
datamodel-code-generator = "^0.13.1"
pre-commit = "^2.20.0"

[tool.poetry.dev-dependencies]
# Testing
ipdb = "^0.13.9"
pytest = "^7.1.1"
pytest-cov = "^3.0.0"
pytest-mock = "^3.7.0"
pytest-sugar = "^0.9.4"
pytest-xdist = "^2.5.0"
xdoctest = {extras = ["all"], version = "^0.15.10"}
# Linting
## Type Checking and Data Validation
mypy = "^0.942" # Static type checker
## Code formatting
black = "^22.1.0" # see: https://black.readthedocs.io/en/stable/editor_integration.html
## Code quality
isort = "^5.10.1"
pylint = "^2.13.0"
## Automation and management
pre-commit = "^2.17.0"
ipykernel = "^6.15.1"
[tool.poetry.extras]
docs = [
    "importlib-metadata",
    "myst-parser",
    "pygments",
    "sphinx",
    "sphinx-autodoc-typehints",
    "pydata-sphinx-theme",
    "sphinxcontrib-apidoc",
    "sphinx-click",
    "jinja2"
]

[tool.poetry.scripts]
cli = "bin.cli:cli"

#################################################################################
# Tooling configs                                                               #
#################################################################################
[tool.black]
line-length = 79

[tool.coverage.run]
branch = true
concurrency = ["multiprocessing"]
parallel = true
source = ["pydmo"]

[tool.coverage.report]
exclude_lines =[
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
fail_under = 70
show_missing = true
skip_covered = true

[tool.isort]
profile = "black"
atomic = "true"
combine_as_imports = "true"
line_length = 79

[tool.mypy]
disallow_untyped_defs = false
files = ["pydmo/*.py","bin/*.py"]
exclude = "notebooks/config.py"
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_context = true
show_error_codes = true

[tool.pylint.basic]
good-names-rgxs = ["^Test_.*$", "logger"]

[tool.pylint.messages_control]
disable = [
  # Explicitly document only as needed
  "missing-module-docstring",
  "missing-class-docstring",
  "missing-function-docstring",
  # Black & Flake8 purview
  "line-too-long",
  "c-extension-no-member",
  # Ignore errors resulting from Jupyter notebook-style programming
  "invalid-name",
  "redefined-outer-name",
  "reimported",
  "ungrouped-imports",
  "wrong-import-order",
  "wrong-import-position",
]

[tool.pylint.similarities]
# Ignore imports when computing similarities.
ignore-imports = "yes"

[tool.cruft]
skip = [
    ".git",
    "README.md",
]
[tool.pytest.ini_options]
addopts = ["-rfsxX", "-l", "--tb=short", "--strict-markers", "-vv", "--xdoctest"]

xfail_strict = "true"
testpaths = ["tests",]
norecursedirs = [".*", "*.egg", "build", "dist",]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
