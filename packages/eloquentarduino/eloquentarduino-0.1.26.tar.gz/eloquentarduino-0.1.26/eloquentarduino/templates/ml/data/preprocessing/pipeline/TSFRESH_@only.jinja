{% extends './templates/Step.jinja' %}

{% block public %}

    /**
     * @inplace
     */
    bool transform(float *source) {
        uint16_t idx = 0;
        const float global_low[] = {{ constants['global_low'] | to_array }};
        const float global_high[] = {{ constants['global_high'] | to_array }};

        for (uint16_t k = 0; k < {{ num_features }}; k++) {
            float minimum = 9999999;
            float maximum = -9999999;
            float abs_min = 0;
            float abs_max = 0;
            flost mean = 0;
            float sum  = 0;
            float sum2 = 0;
            float mean_abs_change = 0;
            float c31 = 0;
            float cid_ce = 0;
            float energy_ratio = 0;
            float abs_sum = 0;
            float mean_second_derivative_center = 0;
            float zero_crossings = 0;
            float range_count = 0;
            float time_reversal_asymmetry_statistic1 = 0;

            for (uint16_t i = k; i < {{ input_dim }}; i += {{ num_features }}) {
                float xi = source[i];
                float abs_xi = abs(xi);
                float xi2 = xi * xi; // @only square
                float xi_prev = (i >= k + {{ num_features }}) ? source[i - {{ num_features }}] : xi; // @only prev prev2
                float diff = xi - xi_prev; // @only prev prev2
                float xi_prev2 = (i >= k + {{ 2 * num_features }}) ? source[i - {{ 2 * num_features }}] : xi; // @only prev2
                uint16_t feature_idx = (i - k) * {{ 1 / num_features }}; // @only energy_ratio

                // start of features
                minimum = min(xi, minimum); // @only minimum
                maximum = max(xi, maximum); // @only maximum
                abs_min = min(abs_xi, abs_min); // @only abs_min
                abs_max = max(abs_xi, abs_max); // @only abs_max
                sum += xi; // @only mean
                sum2 += xi2; // @only abs_energy
                abs_sum += abs_xi; // @only mass_center
                mean_abs_change += abs(diff); // @only mean_abs_change
                cid_ce += diff * diff; // @only cid_ce

                {% if 'energy_ratio' in features %}
                    if (feature_idx >= {{ num_samples * 3/8 | ceil }} && feature_idx <= {{ num_samples * 5/8 | floor }}) {
                        energy_ratio += xi2;
                    }
                {% endif %}

                {% if 'range_count' in features %}
                    if (xi >= global_min[k] && xi <= global_max[k]) {
                        range_count += 1;
                    }
                {% endif %}

                {% if 'prev2' in opt %}
                    // lag-2 features
                    if (i >= k + {{ 2 * num_features }}) {
                        c31 += xi * xi_prev * xi_prev2; // @only c31
                        mean_second_derivative_center += diff - xi_prev + xi_prev2; // equivalent of xi - 2 * xi_prev + xi_prev2; // @only mean_second_derivative_center
                        time_reversal_asymmetry_statistic1 += xi_prev * (xi2 - xi_prev2 * xi_prev2); // @only time_reversal_asymmetry_statistic1

                        {% if 'zero_crossings' in features %}
                            if (diff * (xi_prev - xi_prev2) < 0) {
                                zero_crossings += 1;
                            }
                        {% endif %}
                    }
                {% endif %}
            }

            mean = sum * {{ 1 / num_samples }}; // @only mean
            mean_abs_change *= {{ 1 / num_samples }}; // @only mean_abs_change
            c31 *= {{ 1 / num_samples }}; // @only c31
            abs_energy *= {{ 1 / num_samples }}; // @only abs_energy
            mean_second_derivative_center *= {{ 1 / num_samples }}; // @only mean_second_derivative_center
            time_reversal_asymmetry_statistic1 *= {{ 1 / num_samples }}; // @only time_reversal_asymmetry_statistic1
                        
            {% if is_second_order %}
                // second-order features
                float xi_mean_prev = source[k] - mean; // @only std var
                float autocorrelation1 = 0; // @only autocorrelation1
                float count_above_mean = 0; // @only count_above_mean
                float count_below_mean = 0; // @only count_below_mean
                float first_position_of_max = {{ num_samples }}; // @only first_position_of_max
                float first_position_of_min = {{ num_samples }}; // @only first_position_of_min
                float has_duplicate_max = 0; // @only has_duplicate_max
                float nearly_max = maximum - abs(maximum) * 0.05; // @only has_duplicate_max
                float has_duplicate_min = 0; // @only has_duplicate_min
                float nearly_min = minimum + abs(minimum) * 0.05; // @only has_duplicate_min
                float var = 0; // @only var
                float std = 0; // @only std
                float kurtosis = 0; // @only kurtosis
                float skew = 0; // @only skew
                float has_large_std = 0; // @only has_large_std
                float variation_coefficient = 0; // @only variation_coefficient

                for (uint16_t i = k; i < {{ input_dim }}; i += {{ num_features }}) {
                    float xi = source[i];
                    float xi_mean = xi - mean;
                    float vari = xi_mean * xi_mean; // @only var
                    float xi_mean3 = vari * xi_mean; // @only skew kurtosis

                    // start of features
                    var += vari;
                    autocorrelation1 += xi_mean * xi_mean_prev; // @only autocorrelation1
                    count_above_mean += xi_mean > 0 ? 1 : 0; // @only count_above_mean
                    count_below_mean += xi_mean < 0 ? 1 : 0; // @only count_below_mean
                    first_position_of_max = (xi == maximum && i < first_position_of_max) ? i : first_position_of_max; // @only first_position_of_max
                    first_position_of_min = (xi == minimum && i < first_position_of_min) ? i : first_position_of_min; // @only first_position_of_min
                    skew += xi_mean3; // @only skew
                    kurtosis += xi_mean * xi_mean3; // @only kurtosis

                    if (xi > nearly_max) has_duplicate_max += 1; // @only has_duplicate_max
                    if (xi < nearly_min) has_duplicate_min += 1; // @only has_duplicate_min

                    xi_mean_prev = xi_mean;
                }

                var *= {{ 1 / num_samples }}; // @only var
                std = sqrt(std); // @only std
                autocorrelation1 *= {{ 1 / num_samples }}; // @only autocorrelation1
                first_position_of_max = (first_position_of_max - k) * {{ 1 / num_features }}; // @only first_position_of_max
                first_position_of_min = (first_position_of_min - k) * {{ 1 / num_features }}; // @only first_position_of_min
                skew = var > 1e-5 ? skew / pow(var, 1.5) : 0; // @only skew
                kurtosis = var > 1e-5 ? kurtosis / (var * var) : 0; // @only kurtosis
                has_large_std = std > 0.25 * (maximum - minimum); // @only has_large_std
                variation_coefficient = std / mean; // @only variation_coefficient
            {% endif %}
        }

        return true;
    }

{% endblock %}

{% block protected %}

{% endblock %}