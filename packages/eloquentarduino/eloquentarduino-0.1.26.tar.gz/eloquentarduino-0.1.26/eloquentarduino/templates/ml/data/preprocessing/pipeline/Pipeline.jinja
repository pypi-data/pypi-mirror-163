{% extends './templates/Namespace.jinja' %}

{% block preamble %}

    #ifndef __PIPELINE__{{ ns }}
    #define __PIPELINE__{{ ns }}

    #include <cstring>

    {% for library in includes %}
    #include "{{ library }}"
    {% endfor %}

    {% include './AbstractStep.jinja' %}

    {% for i, step in enumerate(steps) %}
    {{ step.port(ns=ns) }}
    {% endfor %}

{% endblock %}

{% block body %}


    class {{ classname }} {
        public:
            static const uint16_t NUM_INPUTS = {{ input_dim }};
            static const uint16_t NUM_OUTPUTS = {{ output_dim }};
            float X[{{ output_dim }}] = {0};
            time_t latency = 0;

            /**
             * Constructor
             */
            {{ classname }}() :
                isOk(true),
                {% for i, step in enumerate(steps) %}
                    {% if i > 0 %},{% endif %} step{{ i }}(buffer)
                {% endfor %}
            {

            }

            /**
             * Init state of each step
             */
            bool begin() {
                {% for i, step in enumerate(steps) %}
                    if (!step{{ i }}.begin()) {
                        errorMessage = step{{ i }}.getErrorMessage();
                        return false;
                    }
                {% endfor %}

                return true;
            }

            /**
             * Get pipeline error message
             */
            String getErrorMessage() {
                return errorMessage;
            }

            /**
             * Reset state of each step
             */
            void reset() {
                {% for i, step in enumerate(steps) %}
                    step{{ i }}.reset();
                {% endfor %}
            }

            /**
             * Transform input vector
             */
            bool transform(float *x) {
                memcpy(working, x, sizeof(float) * {{ input_dim }});

                time_t start = micros();
                this->isOk =
                {% for i, step in enumerate(steps) %}
                    // {{ step.name }}
                    {% if i > 0 %} && {% endif %} step{{ i }}.transform(working)
                {% endfor %};

                if (this->isOk) {
                    memcpy(X, working, sizeof(float) * {{ output_dim }});
                }

                latency = micros() - start;

                return this->isOk;
            }

            /**
             * If pipeline ends with a classifier, this method is a syntactic sugar
             * over transform
             */
            int predictClass(float *x) {
                this->transform(x);

                return this->predictedClass();
            }

            /**
             * If pipeline ends with a classifier, this method is a syntactic sugar
             * to get last prediction
             */
            int predictedClass() {
                return isOk ? this->X[0] : -1;
            }

            /**
             * If pipeline ends with a classifier, this method is a syntactic sugar
             * over predictClass and idxToLabel
             */
            const char* predictLabel(float *x) {
                this->transform(x);

                return this->predictedLabel();
            }

            /**
             * If pipeline ends with a classifier, this method is a syntactic sugar
             * to get the last predicted class label
             */
            const char* predictedLabel() {
                return this->idxToLabel(this->predictedClass());
            }

            {{ classmap }}

        protected:
            bool isOk;
            String errorMessage;
            // shared temporary memory for the steps
            float buffer[{{ buffer_dim }}] = {0};
            float working[{{ working_dim }}] = {0};
            {% for i, step in enumerate(steps) %}
                {{ step.name }} step{{ i }};
            {% endfor %}
    };

{% endblock %}


{% block footer %}

{% if instance_name %}
static Eloquent::ML::Data::Preprocessing::Pipeline::Ported::{{ ns }}::{{ classname }} {{ instance_name }};
{% endif %}


#endif
{% endblock %}