#!/bin/bash
# fonction affichant un output d'aide au cas de mauvaise utilisation de la commande
usage() { 
    python -m ampalibe usage
}

# Analyse des parametres entrÃ©e avec la commande
while getopts "p:" option; do
    case "${option}" in
        p)
            port=${OPTARG}

            regex_number='^[0-9]+$'
            if ! [[ $port =~ $regex_number ]] ; then
                echo "Not a number $port"
              usage              
            fi
            ;;
        *)
            usage
            ;;
    esac
done
shift $((OPTIND-1))

if [ "$1" == "version" ]; then
    echo `python -m ampalibe version`

elif [ "$1" == "env" ]; then
    if ! [ -f "core.py" ]; then
        >&2 echo -e "~ \033[31mERROR !! \033[0m | core.py not found\n~\033[36m TIPS ðŸ‘Œ\033[0m ~\033[0m Please, go to your dir project.";
        exit 1
    fi
        python -m ampalibe env


elif [ "$1" == "lang" ]; then
    if ! [ -f "core.py" ]; then
        >&2 echo -e "~ \033[31mERROR !! \033[0m | core.py not found\n~\033[36m TIPS ðŸ‘Œ\033[0m ~\033[0m Please, go to your dir project.";
        exit 1
    fi
        python -m ampalibe lang

elif [ "$1" == "create" ]; then
    if [ $# -eq 2 ]; then
        if [ -d "$2" ]; then
            >&2 echo -e "~\033[31m ERROR !!\033[0m ~ A folder $2 already exists"
            exit 1
        fi
            python -m ampalibe create $2
    else
        echo -e "~\033[31m ERROR !!\033[0m | Incorrect number of args for create"
        usage
        exit 1
    fi
elif [ "$1" == "init" ]; then
    if [ $# -eq 1 ]; then
        python -m ampalibe init
    else
        >&2 echo -e "~\033[31m ERROR :(\033[0m | Incorrect number of args for init"
        exit 1
        
    fi
elif [ "$1" == "run" ]; then
    if ! [ -f "core.py" ]; then
        >&2 echo -e "~ \033[31mERROR !! \033[0m | core.py not found\n~\033[36m TIPS ðŸ‘Œ\033[0m ~\033[0m Please, go to your dir project.";
        exit 1
    fi
    if ! [ -f "conf.py" ]; then
        >&2 echo -e "~ \033[31mERROR !! \033[0m | conf.py not found";
        exit 1
    fi
    if [ ! -z "${port}" ] ; then
        export AMP_PORT=$port;
    fi
        python -m ampalibe run

    source .env 

    if [ "$2" = "--dev" ]; then
        watchmedo auto-restart --patterns="*.py" --recursive -- python -c 'import core;core.ampalibe.init.run()'
        exit
    fi

    python -c 'import core;core.ampalibe.init.run()'

else
    >&2 echo -e "~\033[31m ERROR !! \033[0m | Missing knowing argument"
    usage;
fi
