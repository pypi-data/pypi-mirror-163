-----------------------------------------------------------------------------
                     xrst: Extract Sphinx RST Files
         Copyright (C) 2020-22 Bradley M. Bell (bradbell@seanet.com)
             This program is distributed under the terms of the
             GNU General Public License version 3.0 or later see
                   https://www.gnu.org/licenses/gpl-3.0.txt
----------------------------------------------------------------------------
empty group name
----------------------------------------------------------------------------
{xrst_begin example}

Examples
########
{xrst_child_list
    example/get_started.xrst
    example/file.cpp
    example/child_list.xrst
    example/spell.py
    example/suspend.py
    example/code.py
    example/comment_ch.py
    example/heading.py
    example/indent.py
    example/configure.xrst
}

{xrst_end example}
----------------------------------------------------------------------------
user group name
----------------------------------------------------------------------------
{xrst_begin_parent user_guide user}
{xrst_spell
    gsl
    doxygen
    autodoc
}

Extract Sphinx RST Files
########################

Version 2022.8.15
******************

Git Repository
**************
https://github.com/bradbell/xrst

Pip Install
***********
-   ``pip install --index-url https://test.pypi.org/simple/ xrst``

Run Program
***********
:ref:`@run_xrst`

Purpose
*******
This is a pseudo sphinx extension that provides the features listed below.
It was motivated by cases like the GNU Scientific library,
which is not written in python, uses sphinx, and has its documentation
in separate files from the corresponding source code; see `gsl doc`_ .

.. _gsl doc: https://git.savannah.gnu.org/cgit/gsl.git/tree/doc

#.  The rst file name is used as an abbreviated title
    in the navigation bar. This makes the navigation bar more useful
    while also having long descriptive titles.
#.  Each section (rst file) has a contents tree for its headings
    that is separate from the contents tree for the sections. This makes it
    easy to move sections to different places in the sections contents tree.
#.  Puts a jump table to headings that is a contents tree at the top of each
    section because the navigation bar does not include this information.
#.  Makes it easy to put documentation in source code comments
    when multiple computer languages are used by one package;
    e.g., see :ref:`comment_ch_cmd` .
#.  Allows the documentation for one section to span multiple locations
    in source code; see :ref:`suspend_cmd`.
#.  Allows for multiple sections to be specified by one
    input file. One section can be the parent for the
    other sections in the same file; see :ref:`begin_cmd` .
#.  Allows one to build subsets of the documentation; e.g., user, developer,
    examples. Sections for different subsets can be in the
    same input file; see :ref:`run_xrst@group_list`.
#.  Unlike doxygen and autodoc, xrst organizes  the contents tree
    for sections using commands that include files;
    see :ref:`child_cmd`. This enables one to group functions or classes
    into one section of the documentation.
#.  Includes a configurable spell checker; see
    :ref:`spell_cmd` and :ref:`run_xrst@sphinx_dir@spelling` .
    The spell checker catches double word errors.
#.  Words in each heading are automatically included in the
    keyword index in a way that can be configured;
    see :ref:`run_xrst@sphinx_dir@keyword` .
#.  Makes it easy to include source code that executes
    directly below the current location; see :ref:`code_cmd` .
#.  Source code can also be included from any location and any file;
    see :ref:`file_cmd`.
    This uses tokens in source code, not line numbers,
    to signify start and stop of the inclusion.
    This makes it easy to move things, like function prototypes,
    to different places in the documentation.
#.  Automatically generates labels for linking to a heading in any section.
    These labels are designed with changing documentation in mind; e.g.,
    in this documentation the text
    ``:ref:`heading_links@labels@discussion``
    generates the following link (which discusses these labels)
    :ref:`heading_links@labels@discussion`.

Contents
********
{xrst_child_list
    xrst/run_xrst.py
}

{xrst_end user_guide}
----------------------------------------------------------------------------
{xrst_begin commands user}

Commands
########
The processing described below corresponds to xrst commands in the input files:
{xrst_child_list
    xrst/get_file_info.py
    xrst/child_commands.py
    xrst/spell_command.py
    xrst/suspend_command.py
    xrst/code_command.py
    xrst/file_command.py
    xrst/remove_comment_ch.py
}

{xrst_end commands}
----------------------------------------------------------------------------
{xrst_begin automatic user}

Automatic Processing
####################
The processing described below happens without any commands:
{xrst_child_list
    xrst/remove_indent.py
    xrst/process_headings.py
    xrst/auto_file.py
}


{xrst_end automatic}
----------------------------------------------------------------------------
app group name
----------------------------------------------------------------------------
{xrst_begin_parent appendix app}

Appendix
########

{xrst_end appendix}
----------------------------------------------------------------------------
{xrst_begin wish_list app}
{xrst_spell
    stackoverflow
    pyspellchecker
}

Wish List
#########
The following is a wish list for future improvements to ``run_xrst``:

.. _stackoverflow: https://stackoverflow.com/questions/1686837/
   sphinx-documentation-tool-set-tab-width-in-output

Standard Indent
***************
Change the number of spaces corresponding to a tab from 4 to 3 characters.
This better aligns wih usage in sphinx rst files and saves output columns.

Subset Documentation
********************
Have a way to specify subsets of the documentation by a group name.
For example ``{xrst_begin`` `section_name group_1 group_2}` would say that
this documentation should be included if `group_1` or `group_2`
is specified by the ``xrst`` command line.
If not groups were specified, all groups would be included.

Spelling
********
Add a command that automatically fixes spelling warnings by changing
the :ref:`@spell_cmd` in input sections. This is usefull when
pyspellchecker changes, when the
:ref:`run_xrst@sphinx_dir@spelling` file changes,
and when run_xrst automatically ignores more words.

Tabs
****
Tabs in a code blocks get expanded to 8 spaces; see stackoverflow_.
It would be nice to have a way to control the size of tabs in the code blocks
displayed by :ref:`@code_cmd` and :ref:`@file_cmd`.
Perhaps it would be good to support tabs as a method for
indenting xrst input sections.

{xrst_end wish_list}
----------------------------------------------------------------------------
{xrst_begin release_notes app}

xrst Release Notes By Year
##########################
{xrst_children
    release_notes/2022.xrst
    release_notes/2021.xrst
}
:ref:`2022`,
:ref:`2021`

{xrst_end release_notes}
----------------------------------------------------------------------------
