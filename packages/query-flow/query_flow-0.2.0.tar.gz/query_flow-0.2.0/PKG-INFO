Metadata-Version: 2.1
Name: query-flow
Version: 0.2.0
Summary: A library for visualizing your Queries as Sankey-diagrams..
Home-page: https://github.com/eyaltrabelsi/query-flow
License: MIT
Author: Eyal Trabelsi
Author-email: eyaltrabelsi@gmail.com
Requires-Python: >=3.7.1,<3.11
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Provides-Extra: dev
Provides-Extra: doc
Provides-Extra: test
Requires-Dist: black (>=21.5b2,<22.0); extra == "test"
Requires-Dist: bump2version (>=1.0.1,<2.0.0); extra == "dev"
Requires-Dist: colour (==0.1.5); extra == "test"
Requires-Dist: flake8 (>=3.9.2,<4.0.0); extra == "test"
Requires-Dist: flake8-docstrings (>=1.6.0,<2.0.0); extra == "test"
Requires-Dist: isort (>=5.8.0,<6.0.0); extra == "test"
Requires-Dist: mkdocs (>=1.1.2,<2.0.0); extra == "doc"
Requires-Dist: mkdocs-autorefs (>=0.2.1,<0.3.0); extra == "doc"
Requires-Dist: mkdocs-include-markdown-plugin (>=1.0.0,<2.0.0); extra == "doc"
Requires-Dist: mkdocs-material (>=6.1.7,<7.0.0); extra == "doc"
Requires-Dist: mkdocs-material-extensions (>=1.0.1,<2.0.0)
Requires-Dist: mkdocstrings (>=0.15.2,<0.16.0); extra == "doc"
Requires-Dist: mypy (>=0.900,<0.901); extra == "test"
Requires-Dist: numpy (==1.21.6); extra == "test"
Requires-Dist: pandas (==1.3.2); extra == "test"
Requires-Dist: pip (>=20.3.1,<21.0.0); extra == "dev"
Requires-Dist: plotly (==4.5.4); extra == "test"
Requires-Dist: pre-commit (>=2.12.0,<3.0.0); extra == "dev"
Requires-Dist: psycopg2-binary (>=2.9.3,<3.0.0); extra == "test"
Requires-Dist: pyathena (==2.3.0); extra == "test"
Requires-Dist: pytest (>=6.2.4,<7.0.0); extra == "test" or extra == "test"
Requires-Dist: pytest-cov (>=2.12.0,<3.0.0); extra == "test"
Requires-Dist: sqlalchemy (==1.3.13); extra == "test"
Requires-Dist: toml (>=0.10.2,<0.11.0); extra == "dev"
Requires-Dist: tox (>=3.20.1,<4.0.0); extra == "dev"
Requires-Dist: twine (>=3.3.0,<4.0.0); extra == "dev"
Requires-Dist: virtualenv (>=20.2.2,<21.0.0); extra == "dev"
Description-Content-Type: text/markdown

# QueryFlow


[comment]: <> ([![pypi]&#40;https://img.shields.io/pypi/v/query-flow.svg&#41;]&#40;https://pypi.org/project/query-flow/&#41;)

[comment]: <> ([![python]&#40;https://img.shields.io/pypi/pyversions/query-flow.svg&#41;]&#40;https://pypi.org/project/query-flow/&#41;)

[comment]: <> ([![Build Status]&#40;https://github.com/eyaltrabelsi/query-flow/actions/workflows/dev.yml/badge.svg&#41;]&#40;https://github.com/eyaltrabelsi/query-flow/actions/workflows/dev.yml&#41;)

QueryFlow, is a query visualization tool that provides insights into common problems in your SQL query.
QueryFlow visualizes the query execution using the Sankey diagram, a technique that allows one to illustrate complex processes, with a focus on a single aspect or resource that you want to highlight.
This allow to tackle the following problems:

* [Identifying missing records.](https://github.com/eyaltrabelsi/query-flow/blob/master/examples/Identifying%20the%20operation%20that%20caused%20the%20return%20of%20zero%20records%20.ipynb)
* [Identifying Ineffective operations.](https://github.com/eyaltrabelsi/query-flow/blob/master/examples/Identifying%20Ineffective%20operations.ipynb)
* [Identifying duplications in a query.](https://github.com/eyaltrabelsi/query-flow/blob/master/examples/Identifying%20duplications.ipynb)
* Comparing optimizer planned metrics to actual metrics.
* Identifying performance bottlenecks in a single query.
* Identifying performance bottlenecks in multiple queries.

Currently QueryFlow support the following databases/data-engines:
* Athena
* PostgreSQL

* Documentation: <https://eyaltrabelsi.github.io/query-flow>
* GitHub: <https://github.com/eyaltrabelsi/query-flow>
* PyPI: <https://pypi.org/project/query-flow/>
* Free software: MIT


## Installing #
The best way to install query-flow is:
```
$ pip install query-flow
```
In case you want to use another way go to the [installation page.](https://eyaltrabelsi.github.io/query-flow/installation/)


[comment]: <> (## Publications #)

[comment]: <> (**Title**: Visualizing Database Execution Plans using)

[comment]: <> (Sankey. **Authors**: Eyal Trabelsi/Ehud Gudes [<a href="link">pdf</a>])

[comment]: <> (*Authors contributed equally to this paper.)

