"""
    SAP NetWeaver ABAP Stack features
"""

from pydeen.types import Backend, Connector, Auth, Result
from pydeen.http import HTTPConnector, HTTPBackend, HTTPRequest
from pydeen.menu import  MenuSelection, MenuAction, UserInput
from pydeen.odata import ODataMetadata, ODataMetaEntity
from datetime import datetime, timedelta, timezone
import pandas as pd 

import requests
import re
import sys

class SAPAbapODataMetaEntity(ODataMetaEntity):

    def __init__(self, metadata_util, entity:str) -> None:
        super().__init__(metadata_util, entity)
        self.type = "pydeen.SAPAbapODataMetaEntity"

    """
        convert datetime information given by '/Date(<ticks>)' to datetime
        copied from https://stackoverflow.com/questions/28482616/convert-weird-python-date-format-to-readable-date
    """
    def get_datetime_from_slash_date(self, timestring) -> datetime:
        hours = 0
        minutes = 0
        epoch = datetime(1970, 1, 1, tzinfo=timezone.utc)
        ticks, offset = re.match(r'/Date\((\d+)([+-]\d{4})?\)/$', timestring).groups()
        utc_dt = epoch + timedelta(milliseconds=int(ticks))
        if offset:
            offset = int(offset)
            hours, minutes = divmod(abs(offset), 100)
            if offset < 0:
                hours, minutes = -hours, -minutes
   
        dt = utc_dt.astimezone(timezone(timedelta(hours=hours, minutes=minutes)))
        return dt            


class SAPAbapODataMetadata(ODataMetadata):

    def __init__(self) -> None:
        super().__init__()
        self.type = "pydeen.SAPAbapODataMetadata"


class SAPAbapHttpBackend(HTTPBackend):
    
    HTTP_PARAM_SAPCLIENT   = "sap-client"
    
    def __init__(self, name:str, url:str, client:str, auth:Auth=None) -> None:
        super().__init__(name, url, auth)
        self.set_property(Backend.BACKEND_PROP_TENANT, client)
        self.type = "pydeen.SAPAbapHttpBackend"

    def get_client(self):
        return self.get_property(Backend.BACKEND_PROP_TENANT)     
    
    def get_sap_column_name(self, name:str) -> str:
        return name

    def generate_table_template_for_pandas_df(self, df:pd.DataFrame, tablename:str, title:str=None, readonly:bool=True, use_int8:bool=True, with_timestamp:bool=False) -> str:
        # check pandas        
        try:
            cols = df.columns.values.tolist()
        except Exception as exc:
            self.error(f"errors occured: {type(exc)} - {exc}")
            return None

        if cols == None or len(cols) == 0:
            self.error("invalid pandas dataframe object")
            return None
        
        # build result header
        result = ""

        if title == None:
            result += f"@EndUserText.label : 'Generated by pydeen - {tablename}'\n"
        else:
            result += f"@EndUserText.label : '{title}'\n"

        result += "@AbapCatalog.enhancementCategory : #NOT_EXTENSIBLE\n"
        result += "@AbapCatalog.tableCategory : #TRANSPARENT\n"
        result += "@AbapCatalog.deliveryClass : #A\n"

        if readonly == True:
            result += "@AbapCatalog.dataMaintenance : #DISPLAY\n"
        else:
            result += "@AbapCatalog.dataMaintenance : #ALLOWED\n"    

        result += f"define table {tablename} " + "{\n"

        # loop cols
        index = 0
        for col in cols:
            sap_type = None
            datatype = df.dtypes[col]
            df_col = df[col]
            df_col_len = df_col.map(len).max()
            print("max len of ", col, df_col_len)
            if datatype == "object":
                sap_type = "abap.string(0)"
            elif datatype == "bool":
                sap_type = "flag"
            elif datatype == "float":
                sap_type = "abap.fltp"
            elif datatype == "int64":
                if use_int8 == True:
                    sap_type = "abap.int8"
                else:
                    sap_type = "abap.int4"     
            elif datatype == "datetime64[ns, UTC]":
                sap_type = "timestampl"        
            else:
                sap_type = "abap.string(0)"
                self.error(f"unknown col type mapping: {col} {datatype} - use string")
        
            # prepare line
            line = "  "
            if index == 0:
                result += "  key client : abap.clnt not null;\n"  
                line += "key "
            line += self.get_sap_column_name(col) + " : " + sap_type
            if index == 0:
                line += " not null;\n"
            else:
                line += ";\n"    
            result += line

            # add timestamp line
            if index == 0 and with_timestamp == True:
                result += "  timestamp : timestampl not null;\n"

            index += 1

        result += "}"
        return result

class SAPAbapODataConnector(HTTPConnector):
    
    # static constants
    #ODATA_SERVICE_NAME      = "ID"
    ODATA_SERVICE_NAME      = "TechnicalServiceName"
    ODATA_SERVICE_DESC      = "Description"

    ODATA_PARAM_TOP         = "$top"
    ODATA_PARAM_FORMAT      = "$format"
    ODATA_PARAM_FILTER      = "$filter"
    ODATA_PARAM_SAPCLIENT   = "sap-client"

    MENU_FIND_ENDPOINTS     = "find_endpoints"
    MENU_FIND_ENTITIES      = "find_entities"
    MENU_ENTITY_SELECT      = "select_entity"
    MENU_REQUEST_CONFIGURE  = "configure_request"
    MENU_REQUEST_METADATA   = "request_metadata"
    MENU_RESULT_RAW         = "result_raw"
    MENU_RESULT_PANDAS      = "result_pandas"
    MENU_RESET              = "reset"
    
    def __init__(self, backend:Backend=None, url_or_endpoint:str=""):
        super().__init__(backend, url_or_endpoint)
        self.type = "pydeen.SAPAbapODataConnector"
        self.endpoints = None
        self.menu_endpoint = None
        self.menu_entity   = None
        self.menu_result   = None
        self.menu_request  = None
        self.menu_request_params = {}

    def menu_action_reset(self):
        self.menu_result = None
        self.menu_endpoint = None
        self.menu_entity = None
        self.menu_request = None
        self.menu_request_params = {}
        print("Menu context cleared.")


    def menu_action_select_entity(self):
        self.menu_result = None
        if self.menu_endpoint != None and self.menu_entity != None and self.menu_request != None:
            #request = SAPAbapODataRequest(self, self.menu_entity, self.menu_endpoint)
            self.menu_result = self.menu_request.select(add_params=self.menu_request_params)
            if self.menu_result != None:
                print(f"Endpoint {self.menu_endpoint} entity {self.menu_entity} selected - {self.menu_result.get_count()} records")   
                print("Entity Columns:",self.menu_result.get_columns())            
            else:
                print("No or wrong result")
        else:
            print("Wrong context to select entity")

    def menu_configure_request(self):
        print("Configure Request Params")
        # max rows
        if SAPAbapODataConnector.ODATA_PARAM_TOP in self.menu_request_params:
            max_rows_str = str(self.menu_request_params[SAPAbapODataConnector.ODATA_PARAM_TOP])
        else:
            max_rows_str = "1000"

        max_rows = UserInput("Change parameter max_rows", max_rows_str).get_input_int(min=1)
        self.menu_request_params[SAPAbapODataConnector.ODATA_PARAM_TOP] = str(max_rows)
        print("Parameter max_rows set to", max_rows)

         # odata filter
        if SAPAbapODataConnector.ODATA_PARAM_FILTER in self.menu_request_params:
            odata_filter = str(self.menu_request_params[SAPAbapODataConnector.ODATA_PARAM_FILTER])
        else:
            odata_filter = None

        odata_filter_new = UserInput("Change parameter OData Filter", odata_filter).get_input(empty_allowed=True)
        if odata_filter_new != None and odata_filter_new != "":
            self.menu_request_params[SAPAbapODataConnector.ODATA_PARAM_FILTER] = odata_filter_new
            print("Parameter OData filter set to", odata_filter_new)

    def menu_find_entities(self):
        if self.menu_endpoint == None:
            print("Missing endpoint")
        else:    
            entities = self.get_entities(self.menu_endpoint)
            if entities == None or len(entities) == 0:
                print("No entities found for endpoint", self.menu_endpoint)
            else:
                entries = {}
                for key in entities:
                    entries[key] = key

                #show menu
                valid = True
                while valid == True:
                    action = MenuSelection("Select Entity", entries, False, True).show_menu()
                    if action.is_cancel_entered() == True:
                        valid = False
                    elif action.is_selected() == True:
                        self.menu_entity = action.get_selection()
                        self.menu_request = SAPAbapODataRequest(self, self.menu_entity, self.menu_endpoint)
                        print(f"Entity {self.menu_entity} selected")

                        metadata_xml = self.menu_request.get_metadata_xml()
                        if metadata_xml != None:
                            print(f"Metadata for endpoint {self.menu_endpoint} loaded")
                        else:
                            print(f"Metadata for endpoint {self.menu_endpoint} not available")    
                        
                        valid = False

    def menu_find_endpoints(self):
        endpoints = self.find_endpoints()
        if endpoints == None or len(endpoints) == 0:
            print("No endpoints found or errors occured")
        else:
            # build entries
            entries = {}
            for key in endpoints:
                entries[key] = f"{key} - {endpoints[key]}"

            #show menu
            valid = True
            while valid == True:
                action = MenuSelection("Select OData Endpoint", entries, False, True).show_menu()
                if action.is_cancel_entered() == True:
                    valid = False
                elif action.is_selected() == True:
                    self.menu_action_reset()
                    self.menu_endpoint = action.get_selection()
                    print(f"Endpoint selected: ", self.menu_endpoint)
                    valid = False
                    

    def menu(self):        
        valid = True
        while valid == True:
            
            # build main menu    
            entries = {}
            entries[SAPAbapODataConnector.MENU_FIND_ENDPOINTS] = "Search OData endpoints in ABAP backend"

            if self.menu_endpoint != None:
                entries[SAPAbapODataConnector.MENU_FIND_ENTITIES] = f"Get entities in OData endpoint {self.menu_endpoint}"

                if self.menu_request != None:
                    entries[SAPAbapODataConnector.MENU_REQUEST_CONFIGURE] = f"Configure entity selection request for {self.menu_entity} in endpoint {self.menu_endpoint}"
                    if self.menu_request.is_metadata_available() == True:
                        entries[SAPAbapODataConnector.MENU_REQUEST_METADATA] = f"Display metadata xml for endpoint {self.menu_endpoint}"

                if self.menu_entity != None:
                    entries[SAPAbapODataConnector.MENU_ENTITY_SELECT] = f"Select entity {self.menu_entity} in OData endpoint {self.menu_endpoint}"

            if self.menu_result != None:
                    entries[SAPAbapODataConnector.MENU_RESULT_RAW] = f"Display current result of entity {self.menu_entity} in OData endpoint {self.menu_endpoint} as raw data"
                    entries[SAPAbapODataConnector.MENU_RESULT_PANDAS] = f"Display current result of entity {self.menu_entity} in OData endpoint {self.menu_endpoint} as pandas dataframe"

            entries[SAPAbapODataConnector.MENU_RESET] = "Reset menu context"

            # show menu            
            action = MenuSelection("SAP NetWeaver ABAP OData Connector - Menu", entries, True, False).show_menu()
            if action.is_quit_entered():
                valid = False
            else:
                try:
                    selected = action.get_selection()
                    if selected == SAPAbapODataConnector.MENU_FIND_ENDPOINTS:
                        self.menu_find_endpoints()
                    elif selected == SAPAbapODataConnector.MENU_FIND_ENTITIES:
                        self.menu_find_entities()
                    elif selected == SAPAbapODataConnector.MENU_REQUEST_CONFIGURE:
                        self.menu_configure_request()
                    elif selected == SAPAbapODataConnector.MENU_ENTITY_SELECT:
                        self.menu_action_select_entity()
                    elif selected == SAPAbapODataConnector.MENU_REQUEST_METADATA:
                        print(self.menu_request.get_metadata_xml())
                    elif selected == SAPAbapODataConnector.MENU_RESULT_RAW:
                        print(self.menu_result.get_result_raw())
                    elif selected == SAPAbapODataConnector.MENU_RESULT_PANDAS:
                        df:pd.DataFrame = self.menu_result.get_result_as_pandas_df()
                        print(df)    
                    elif selected == SAPAbapODataConnector.MENU_RESET:
                        self.menu_action_reset()
                    else:
                        print("unknown menu action")
                except Exception as exc:
                    print("Errors occured:", type(exc), exc)

    def get_endpoints(self, max_results:int=10000):  
        # check cached
        if self.endpoints != None:
            return self.endpoints
        
        # build a new request
        request = self.create_request()
        if request == None:
            self.trace("wrong request")
            return None

        # prepare params
        params = {}
        params[SAPAbapODataConnector.ODATA_PARAM_TOP] = str(max_results)
        params[SAPAbapODataConnector.ODATA_PARAM_FORMAT] = "json"

        client  = self.backend.get_client()
        if client != None:
            params[SAPAbapODataConnector.ODATA_PARAM_SAPCLIENT] = client

        # call sap service api
        self.trace("Call sap for OData Endpoints")
        text = request.get_response_text()
        http_code = request.get("/sap/opu/odata/IWFND/CATALOGSERVICE;v=2/ServiceCollection", params)
        if http_code < 200 or http_code > 299:
            self.trace(f"invalid answer - return code {http_code}") 
            if text != None:
                self.trace(text)
            return None
            
        json = request.get_response_json()
        if json == None:
            self.trace("invalid answer - no json") 
            return None

        records = json["d"]["results"]
        if records == None:
            self.trace("invalid answer - no results") 
            return None
        else:
            self.endpoints = records
            return records
        
    def find_endpoints(self, searchFor:str=None, max_results:int=10000) -> dict:
        result = {}
        records = self.get_endpoints(max_results)
        if records != None:
            for record in records:
                name = record[SAPAbapODataConnector.ODATA_SERVICE_NAME]
                desc = record[SAPAbapODataConnector.ODATA_SERVICE_DESC]
                
                serviceURL = record['ServiceUrl']
                if serviceURL != None and serviceURL.find('/sap/opu/odata') > 0 and serviceURL.find(name) < 0:
                    serviceURLParts = serviceURL.split("/sap/opu/odata")
                    name = serviceURLParts[1]

                if searchFor == None or name.find(searchFor) >= 0 or desc.find(searchFor) >= 0:
                    result[name] = desc
        
        return result

    def get_entities(self, endpoint):         
        # build a new request
        request = self.create_request()

        params = {}
        params[SAPAbapODataConnector.ODATA_PARAM_FORMAT] = "json"

        client  = self.backend.get_client()
        if client != None:
            params[SAPAbapODataConnector.ODATA_PARAM_SAPCLIENT] = client

        self.trace("Call sap for OData Endpoint Entities")

        url = f"/sap/opu/odata/sap/{endpoint}/"
        if endpoint.find("/") == 0:
            url = f"/sap/opu/odata{endpoint}/"

        http_code = request.get(url, params)
        if http_code < 200 or http_code > 299:
            self.trace("invalid answer - return code") 
            return None

        json = request.get_response_json()
        if json == None:
            self.trace("invalid answer - no json") 
            return None

        records = json["d"]["EntitySets"]
        if records == None:
            self.trace("invalid answer - no results") 
            return None
        else:
            return records

    def get_current_result(self) -> Result:
        return self.menu_result

    def get_current_result_as_pandas_df(self) -> Result:
        try:
            return self.menu_result.get_result_as_pandas_df()
        except:
            return None    



class SAPAbapODataRequest(HTTPRequest):
    def __init__(self, connector: Connector, entity:str, endpoint:str=None) -> None:
        super().__init__(connector)
        self.type = "pydeen.SAPAbapODataRequest"
        self.connector:SAPAbapODataConnector = connector
        self.endpoint = endpoint
        self.entity   = entity
        self.odata_metadata = None
        self.odata_metadata_xml = None
        self.odata_metadata_util:ODataMetadata=None 

    def select(self, max_rows:int=1000, odataFilter:str=None, add_params:dict=None) -> Result:
        # prepare params
        if add_params != None:
            params = add_params
        else:
            params = {}    

        # main params for sap request
        params[SAPAbapODataConnector.ODATA_PARAM_FORMAT] = "json"
        client  = self.connector.backend.get_client()
        if client != None:
            params[SAPAbapODataConnector.ODATA_PARAM_SAPCLIENT] = client

        # additional params 
        if not SAPAbapODataConnector.ODATA_PARAM_TOP in params and max_rows > 0:
            params[SAPAbapODataConnector.ODATA_PARAM_TOP] = str(max_rows)

        if not SAPAbapODataConnector.ODATA_PARAM_FILTER in params and odataFilter != None:
            params[SAPAbapODataConnector.ODATA_PARAM_FILTER] = odataFilter

        # prepare url prefix
        url_prefix = "/sap/opu/odata/sap/"
        if self.endpoint != None and self.endpoint.find("/") == 0:
            url_prefix = "/sap/opu/odata"

        # prepare request and execute
        if self.endpoint == None or self.endpoint == "":
            url = f"{url_prefix}{self.entity}/"
        else:
            url = f"{url_prefix}{self.endpoint}/{self.entity}/"

        request = self.connector.create_request()
        http_code = request.get(url, params)
        if http_code < 200 or http_code > 299:
            self.trace("invalid answer - return code") 
            return None

        # process result
        json = request.get_response_json()
        if json == None:
            self.trace("invalid answer - no json") 
            return None

        records = json["d"]["results"]
        if records == None:
            self.trace("invalid answer - no results") 
            return None
        else:
            odata_type = None
            self.odata_metadata = None
            result = []
            for record in records:
                result_rec = {}
                for attr_name in record.keys():
                    if attr_name == "__metadata":
                        if odata_type == None:
                            odata_type = record["__metadata"]["type"]
                        if self.odata_metadata == None:
                            self.odata_metadata = record["__metadata"]    
                    else:
                        attr_value = record[attr_name]
                        result_rec[attr_name] = attr_value    
                result.append(result_rec);        
        
        # prepare result
        abap_result = SAPAbapODataResult(self, result, odata_type) 
        entity_meta = self.get_entity_metainfo()
        if entity_meta != None:
            abap_result.set_entity_metainfo(entity_meta)

        return abap_result

    def get_metadata_xml(self, add_params:dict=None) -> str:
        if self.odata_metadata_xml != None:
            return self.odata_metadata_xml

        if self.endpoint == None:
            return None
        
        # prepare params
        if add_params != None:
            params = add_params
        else:
            params = {}    

        # main params for sap request
        client  = self.connector.backend.get_client()
        if client != None:
            params[SAPAbapODataConnector.ODATA_PARAM_SAPCLIENT] = client


        # prepare url prefix
        url_prefix = "/sap/opu/odata/sap/"
        if self.endpoint != None and self.endpoint.find("/") == 0:
            url_prefix = "/sap/opu/odata"

        # prepare request and execute
        url = f"{url_prefix}{self.endpoint}/$metadata"
        
        request = self.connector.create_request()
        http_code = request.get(url, params)
        if http_code < 200 or http_code > 299:
            self.trace("invalid answer - return code") 
            return None

        # process result
        xml = request.get_response_text()
        if xml == None:
            self.trace("invalid answer - no xml answer") 
            return None

        # result
        self.odata_metadata_xml = xml
        return xml

    def is_metadata_available(self) -> bool:
        if self.odata_metadata_xml != None:
            return True
        else:
            return False        
        
    def get_metadata_util(self) -> ODataMetadata:
        # check cache
        if self.odata_metadata_util != None:
            return self.odata_metadata_util
        
        # check xml is loaded
        if self.is_metadata_available() == False:
            return None
        
        # create new util and parse xml
        metadata_util = SAPAbapODataMetadata()
        if metadata_util.parse_metadata_xml(self.odata_metadata_xml) == False:
            self.error("parsing metadata xml failed")
            return None   
            
        # cache it and return
        self.odata_metadata_util = metadata_util
        return metadata_util

    def get_entity_metainfo(self) -> SAPAbapODataMetaEntity:
        if self.entity != None:
            return SAPAbapODataMetaEntity(self.get_metadata_util(), self.entity)    
        else:
            return None
class SAPAbapODataResult(Result):
    def __init__(self, request, result, odata_type:str) -> None:
        super().__init__(result)
        self.type = "pydeen.SAPAbapODataResult"
        self.request:SAPAbapODataRequest = request
        self.odata_type = odata_type

    
    def convert_raw_value(self, column, value):
        # check: value and context is available
        if value == None:
            return value

        if self.entityMetaInfo == None:
            self.error("no entity metainfo available")
            return value
        
        # check for data types
        try:
            ent_meta:SAPAbapODataMetaEntity = self.entityMetaInfo
            ent_type = ent_meta.get_column_type(column)

            if type(value) == str and value.find("/Date") >= 0:
                dt = ent_meta.get_datetime_from_slash_date(value)
                return dt
#            elif ent_type != None and ent_type.find("Edm.Date") >= 0:
#                print("found date type", column, ent_type, value)
            else:
                return value    
        except Exception as exc:
            self.error(f"exception in convert_raw_value: {type(exc)} - {exc}")
            return value
               
