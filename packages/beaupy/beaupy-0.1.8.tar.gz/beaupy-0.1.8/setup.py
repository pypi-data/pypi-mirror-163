# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['beaupy']

package_data = \
{'': ['*']}

install_requires = \
['readchar>=3.1.0,<4.0.0', 'rich>=12.5.1,<13.0.0']

setup_kwargs = {
    'name': 'beaupy',
    'version': '0.1.8',
    'description': 'A library of elements for interactive TUIs in Python',
    'long_description': '![beaupy](https://user-images.githubusercontent.com/47027005/185082011-cb588f57-d38f-42d8-8312-3981ae1bc479.png)\n\n\n> A Python library of interactive CLI elements you have been looking for\n\n---\n\n**BeauPy** implements a number of common interactive elements:\n\n| Function                       | Functionality                                                                 |\n|:-------------------------------|:------------------------------------------------------------------------------|\n| `select`                       | Prompt to pick a choice from a list                                           |\n| `select_multiple` (checkboxes) | Prompt to select one or multiple choices from a list                          |\n| `confirm`                      | Prompt with a question and yes/no options                                     |\n| `prompt`                       | Prompt that takes input with optional validation, type conversion and masking |\n\n## Usage\n\n![example](https://raw.githubusercontent.com/petereon/beaupy/master/example.gif)\n\nTUI elements shown in the above gif are the result of the follwing code:\n\n```python\nimport beaupy\n\n\ndef main():\n    """Main."""\n    if beaupy.confirm("Are you brave enough to continue?"):\n        names = [\n            "Arthur, King of the Britons",\n            "Sir Lancelot the Brave",\n            "Sir Robin the Not-Quite-So-Brave-as-Sir-Lancelot",\n            "Sir Bedevere the Wise",\n            "Sir Galahad the Pure",\n        ]\n\n        name = names[beaupy.select(names, cursor_index=3)]\n        print(f"Welcome, {name}")\n        # Get an integer greater or equal to 0\n        age = beaupy.prompt("What is your age?", target_type=int, validator=lambda val: val > 0)\n        nemeses_options = [\n            "The French",\n            "The Police",\n            "The Knights Who Say Ni",\n            "Women",\n            "The Black Knight",\n            "The Bridge Keeper",\n            "The Rabbit of Caerbannog",\n        ]\n        print("Choose your nemeses")\n        # Choose multiple options from a list\n        nemeses_indices = beaupy.select_multiple(nemeses_options)\n        nemeses = [\n            nemesis\n            for nemesis_index, nemesis in enumerate(nemeses_options)\n            if nemesis_index in nemeses_indices\n        ]\n        # Get input without showing it being typed\n        quest = beaupy.prompt("What is your quest?", secure=True)\n        print(f"{name}\'s quest (who is {age}) is {quest}.")\n        if nemeses:\n            if len(nemeses) == 1:\n                print(f"His nemesis is {nemeses[0]}.")\n            else:\n                print(f\'His nemeses are {" and ".join(nemeses)}.\')\n        else:\n            print("He has no nemesis.")\n\n```\n\n## Installation\n\nFrom PyPI:\n\n```sh\npip install beaupy\n```\n\nFrom source:\n\n```sh\ngit clone https://github.com/petereon/beaupy.git\npoetry build\npip install ./dist/beaupy-{{some-version}}-py3-none-any.whl\n```\n\n## Roadmap\n\n- [x] PyPI Release\n- [x] Achieve >90% test coverage\n- [ ] Extend `select` with filterability\n- [ ] ...\n\n## Documentation\n\n**BeauPy** is a library of interactive TUI elements for CLI applications. It is based on another library with which it shares some of the source code, [`cutie`](https://github.com/kamik423/cutie), developed by [Kamik423](https://github.com/Kamik423). It has begun as a fork but has since diverged into it\'s own thing and as such, detached from the original repository.\n\nIn comparison, **BeauPy** is\n\n- more [rich](https://rich.readthedocs.io/en/stable/) friendly\n- more opinionated\n- less unicode heavy (relies on [rich](https://rich.readthedocs.io/en/stable/) for this)\n\n### API Doc\n\n<a id="beaupy.prompt"></a>\n\n#### prompt\n\n```python\ndef prompt(prompt: str,\n           target_type: Union[Type[T], Type[str]] = str,\n           validator: Callable[[Any], bool] = lambda input: True,\n           secure: bool = False) -> Union[T, str]\n```\n\nFunction that prompts the user for written input\n\n**Arguments**:\n\n- `prompt` _str_ - The prompt that will be displayed\n- `target_type` _Union[Type[T], Type[str]], optional_ - Type to convert the answer to. Defaults to str.\n- `validator` _Callable[[Any], bool], optional_ - Optional function to validate the input. Defaults to lambdainput:True.\n- `secure` _bool, optional_ - If True, input will be hidden. Defaults to False.\n  \n\n**Raises**:\n\n- `ValidationError` - Raised if validation with provided validator fails\n- `ConversionError` - Raised if the value cannot be converted to provided type\n- `KeyboardInterrupt` - Raised when keyboard interrupt is encountered\n  \n\n**Returns**:\n\n  Union[T, str]: Returns a value formatted as provided type or string if no type is provided\n\n<a id="beaupy.select"></a>\n\n#### select\n\n```python\ndef select(options: List[str],\n           cursor: str = "> ",\n           cursor_style="pink1",\n           cursor_index: int = 0,\n           strict: bool = False) -> Union[int, None]\n```\n\nA prompt that allows selecting one option from a list of options\n\n**Arguments**:\n\n- `options` _List[str]_ - A list of options to select from\n- `cursor` _str, optional_ - Cursor that is going to appear in front of currently selected option. Defaults to \'> \'.\n- `cursor_style` _str, optional_ - Rich friendly style for the cursor. Defaults to \'pink1\'.\n- `cursor_index` _int, optional_ - Option can be preselected based on its list index. Defaults to 0.\n- `strict` _bool, optional_ - If empty `options` is provided and strict is `False`, None will be returned, if it\'s `True`, `ValueError` will be thrown. Defaults to False.\n  \n\n**Raises**:\n\n- `ValueError` - Thrown if no `options` are povided and strict is `True`\n  \n\n**Returns**:\n\n  Union[int, None]: Index of a selected option or `None`\n\n<a id="beaupy.select_multiple"></a>\n\n#### select\\_multiple\n\n```python\ndef select_multiple(options: List[str],\n                    tick_character: str = "x",\n                    tick_style: str = "pink1",\n                    cursor_style: str = "pink1",\n                    ticked_indices: Optional[List[int]] = None,\n                    cursor_index: int = 0,\n                    minimal_count: int = 0,\n                    maximal_count: Optional[int] = None,\n                    strict: bool = False) -> List[int]\n```\n\nA prompt that allows selecting multiple options from a list of options\n\n**Arguments**:\n\n- `options` _List[str]_ - A list of options to select from\n- `tick_character` _str, optional_ - Character that will be used as a tick in a checkbox. Defaults to \'x\'.\n- `tick_style` _str, optional_ - Rich friendly style for the tick character. Defaults to \'pink1\'.\n- `cursor_style` _str, optional_ - Rich friendly style for the option when the cursor is currently on it. Defaults to \'pink1\'.\n- `ticked_indices` _Optional[List[int]], optional_ - Indices of options that are pre-ticked when the prompt appears. Defaults to None.\n- `cursor_index` _int, optional_ - Index of the option cursor starts at. Defaults to 0.\n- `minimal_count` _int, optional_ - Minimal count of options that need to be selected. Defaults to 0.\n- `maximal_count` _Optional[int], optional_ - Maximal count of options that need to be selected. Defaults to None.\n- `strict` _bool, optional_ - If empty `options` is provided and strict is `False`, None will be returned, if it\'s `True`, `ValueError` will be thrown. Defaults to False.\n  \n\n**Raises**:\n\n- `KeyboardInterrupt` - Raised when Ctrl+C is encountered\n  \n\n**Returns**:\n\n- `List[int]` - A list of selected indices\n\n<a id="beaupy.confirm"></a>\n\n#### confirm\n\n```python\ndef confirm(question: str,\n            yes_text: str = "Yes",\n            no_text: str = "No",\n            has_to_match_case: bool = False,\n            enter_empty_confirms: bool = True,\n            default_is_yes: bool = False,\n            cursor: str = "> ",\n            cursor_style: str = "pink1",\n            char_prompt: bool = True) -> Optional[bool]\n```\n\nA prompt that asks a question and offers two responses\n\n**Arguments**:\n\n- `question` _str_ - Question to be asked\n- `yes_text` _str, optional_ - Text of the positive response. Defaults to \'Yes\'.\n- `no_text` _str, optional_ - Text of the negative response. Defaults to \'No\'.\n- `has_to_match_case` _bool, optional_ - Check if typed response matches case. Defaults to False.\n- `enter_empty_confirms` _bool, optional_ - No response is confirmation. Defaults to True.\n- `default_is_yes` _bool, optional_ - Default is Yes. Defaults to False.\n- `cursor` _str, optional_ - What character(s) to use as a cursor. Defaults to \'> \'.\n- `cursor_style` _str, optional_ - Rich friendly style for the cursor. Defaults to \'pink1\'.\n- `char_prompt` _bool, optional_ - Print [Y/n] after the question. Defaults to True.\n  \n\n**Raises**:\n\n- `KeyboardInterrupt` - Raised when Ctrl+C is encountered\n  \n\n**Returns**:\n\n  Optional[bool]\n\n## Contributing\n\nIf you want to contribute, please feel free to suggest features or implement them yourself.\n\nAlso **please report any issues and bugs you might find!**\n\n## License\n\nThe project is licensed under the [MIT License](LICENSE).\n',
    'author': 'Peter Vyboch',
    'author_email': 'pvyboch1@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/petereon/beaupy',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.7.8,<4.0.0',
}


setup(**setup_kwargs)
