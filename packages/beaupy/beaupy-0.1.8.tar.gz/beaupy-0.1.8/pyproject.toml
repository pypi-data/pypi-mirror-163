[tool.poetry]
name = 'beaupy'
version = '0.1.8'
description = 'A library of elements for interactive TUIs in Python'
authors = ['Peter Vyboch <pvyboch1@gmail.com>']
license = 'MIT'
repository = 'https://github.com/petereon/beaupy'
readme = 'README.md'
keywords = ["python"]
classifiers = [
    'License :: OSI Approved :: MIT License',
    'Programming Language :: Python :: 3',
]
packages = [{ include = "beaupy" }]

[tool.poe.tasks]
add = { shell = 'poetry add' }
install = { shell = 'poetry install' }
build = { shell = 'poetry build' }
clean = { shell = 'rm -R ./dist .pytest_cache .mypy_cache &> /dev/null' }

isort = { shell = 'poetry run isort ./beaupy' }
black = { shell = 'poetry run black ./beaupy/' }
mypy = { shell = 'poetry run mypy ./beaupy/' }
flake8 = { shell = 'poetry run pflake8 ./beaupy/' }
lint = { shell = 'echo "Running isort..." ; poetry run isort ./beaupy ; echo "Running yapf..." ; poetry run black ./beaupy ; echo "Running flake8..." ; poetry run pflake8 ./beaupy/ ; echo "Running perflint..." ; poetry run perflint ./beaupy/' }

"test" = { shell = "poetry run ward" }
"test:watch" = { shell = "poetry run ward; poetry run watchmedo shell-command --patterns='*.py;*.feature;*.toml' --recursive --drop --command='ward'" }

[tool.poetry.dependencies]
python = '^3.7.8'
readchar = '^3.1.0'
rich = '^12.5.1'

[[tool.pydoc-markdown.loaders]]
type = 'python'
search_path = ['./beaupy']

[tool.pydoc-markdown.renderer]
type = 'markdown'

[tool.ward]
path = ['test']
hook_module = ["ward_coverage"]

[tool.ward.plugins.coverage]
omit = "*test*"

[tool.poetry.dev-dependencies]
# Code Scanning and Formatting
mypy = '*'
pyproject-flake8 = '*'
black = "^22.6.0"

## Bugs
flake8-bugbear = '*'
flake8-simplify = '*'
flake8-pie = '*'
flake8-bandit = '*'

## Complexity
flake8-cognitive-complexity = '*'
flake8-expression-complexity = '*'
radon = '*'
xenon = '*'

## Lints
flake8-quotes = '*'
flake8-print = '*'
flake8-eradicate = '*'
flake8-comments = '*'
toml-sort = '*'
isort = '*'

## Performance
perflint = '*'

# Expect Pattern Testing
expycted = '*'

# Unit Testing
ward = '*'
ward-coverage = { git = "https://github.com/petereon/ward-coverage.git" }
mock = '*'
watchdog = '*'

# Task Runner
poethepoet = '*'

# Docs
pydoc-markdown = "^4.6.3"

[build-system]
requires = ['poetry-core>=1.0.0']
build-backend = 'poetry.core.masonry.api'
