"use strict";(self.webpackChunkMLProvCodeGen=self.webpackChunkMLProvCodeGen||[]).push([[763],{763:(t,e,n)=>{n.r(e),n.d(e,{default:()=>u});var o=n(991),i=n(992),a=n(921),d=n(19),l=n(748);async function s(t="",e={}){const n=l.ServerConnection.makeSettings(),o=d.URLExt.join(n.baseUrl,"MLProvCodeGen",t);let i;try{i=await l.ServerConnection.makeRequest(o,e,n)}catch(t){throw new l.ServerConnection.NetworkError(t)}let a=await i.text();if(a.length>0)try{a=JSON.parse(a)}catch(t){console.log("Not a JSON response body.",i)}if(!i.ok)throw new l.ServerConnection.ResponseError(i,a.message||a);return a}var r=n(250);async function c(t,e,n){try{const n=await s(t,{body:JSON.stringify(e),method:"POST"});return console.log(n),n}catch(n){console.error("Error on POST /MLProvCodeGen/"+t+` ${e}.\n${n}`)}}const p={id:"MLProvCodeGen:plugin",autoStart:!0,requires:[o.ICommandPalette,r.ILauncher],optional:[a.ISettingRegistry],activate:async function(t,e,n,a){console.log("JupyterLab extension MLProvCodeGen is activated!"),a&&a.load(p.id).then((t=>{console.log("extension settings loaded:",t.composite)})).catch((t=>{console.error("Failed to load settings for MLProvCodeGen.",t)})),s("get_example").then((t=>{console.log(t)})).catch((t=>{console.error(`The MLProvCodeGen server extension appears to be missing.\n${t}`)}));const d={name:"MLProvCodeGen"};try{const t=await s("post_example",{body:JSON.stringify(d),method:"POST"});console.log(t)}catch(t){console.error(`ERROR on post_example ${d}.\n${t}`)}const l=new i.Widget,r=new o.MainAreaWidget({content:l});r.id="MLProvCodeGen-jupyterlab",l.id="MLProvCodeGen-content",r.title.label="MLProvCodeGen",r.title.closable=!0;const u=document.createElement("div");l.node.appendChild(u),u.id="headerFlex",u.innerHTML='\n\t\t<div class="flex-container">\n\t\t\t<div><h2>MLProvCodeGen</h2></div>\n\t\t\t<div><h3>Generate machine learning scripts using provenance data</h3></div>\n\t\t\t<div>Input a MLProvCodeGen provenance data file <b><u>or</u></b></div>\n\t\t\t<div>Use the input elements below.</div>\n\t\t\t<div>Hover over input elements for explanations.</div>\n\t\t</div>\n\t';const m=document.createElement("div");l.node.appendChild(m),m.id="resetFlex",m.innerHTML='\n\t\t<div class="flex-container">\n\t\t\t<div><button id="reset" type="Button"> Reset this tab </button></div>\n\t\t</div>\n\t\t',m.addEventListener("click",(t=>{const e=l.node.childNodes;for(console.log(e);e.length>0;)e[0].remove();l.node.appendChild(u),l.node.appendChild(m),l.node.appendChild(v),l.node.appendChild(h),l.node.appendChild(f)}));const v=document.createElement("div");l.node.appendChild(v),v.id="provInputFlex",v.innerHTML='\n\t\t<div class="flex-container2">\n\t\t\t<div><b>Insert a MLProvCodeGen Provenance File:</b></div>\n\t\t\t<div><input type="file"</div>\n\t\t\t<div><button id="provenanceSubmit" type="button"> Submit Provenance File </button>  </div>\n\t\t</div>\n\t',v.addEventListener("change",(t=>{let e=t.target.files[0];document.getElementById("provenanceSubmit").addEventListener("click",(async t=>{console.log(e);let n=new FileReader;n.readAsText(e),n.onload=async function(){var t=JSON.parse(n.result.toString());console.log(t);const e=t.entity["ex:Experiment Info Data"]["ex:task_type"];var o=window.location.href+"/tree/MLProvCodeGen/GeneratedNotebooks/",i="('"+o+e+".ipynb', 'MLProvCodeGen')";console.log("path:"+o);var a='onclick="window.open'+i+'">';console.log(a);const d=await c(e,t);if(console.log(d),"success"===d.greetings){const t=document.createElement("div");l.node.insertBefore(t,h),t.innerHTML='\n\t\t\t\t\t\t<div class="flex-container3">\n\t\t\t\t\t\t\t<div><p>Your code has been generated successfully.</div>\n\t\t\t\t\t\t\t<div><button id="openButtonRight" type="button" '+a+" Open Notebook </button> </div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t"}}}))}));const h=document.createElement("div");l.node.appendChild(h),h.id="problemSelectionFlex",h.innerHTML='\n\t\t<div class="flex-container2">\n\t\t\t<div><b>Submit data through input elements:</b></div>\n\t\t\t<div>\n\t\t\t\t<label for="exercise">Choose a machine learning exercise:</label>\n\t\t\t\t<select name="exercise" id="exercise">\n\t\t\t\t\t<option value="ImageClassification"> Image Classification </option>\n\t\t\t\t\t<option value="MulticlassClassification"> Multiclass Classification</option>\n\t\t\t\t</select>\n\t\t\t</div>\n\t\t</div>\n  ';const f=document.createElement("div");l.node.appendChild(f),f.id="problemSelectionButton",f.innerHTML='\n\t\t<div class="flex-container2">\n\t\t\t<div><button id="inputButton" type="button"> Submit </button></div>\n\t\t</div>\n\t\t',f.addEventListener("click",(t=>{switch(document.getElementById("exercise").value){case"ImageClassification":const t=document.createElement("div");l.node.appendChild(t),t.innerHTML='\n\t\t\t\t\t<div class="flex-container2">\n\t\t\t\t\t\t<div><b><u> Data Ingestion</u></b></div>\n\t\t\t\t\t\t<div title="Select the data format.">\n\t\t\t\t\t\t\t<label for="data">Which data format do you want to use?</label>\n\t\t\t\t\t\t\t<select name="data" id="data">\n\t\t\t\t\t\t\t\t<option value="Public dataset"> Public dataset </option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t';const e=document.createElement("div");l.node.appendChild(e),e.innerHTML='\n\t\t\t\t\t<div class="flex-container2">\n\t\t\t\t\t\t<div title="The \'Fake data set\' consists of 110 randomly generated images.\nMNIST is a database of 70000 image files. The images contain handwritten digits.\nFashionMNIST is a dataset of 70000 image files. The images contain clothing articles split into 10 classes.\nCIFAR10 is a dataset of 60000 image files. The images contain 10 classes of vehicles and animals.">\n\t\t\t\t\t\t<label for="dataSelection">Select your dataset:</label>\n\t\t\t\t\t\t<select name="dataSelection" id="dataSelection">\n\t\t\t\t\t\t\t<option value="FakeData"> Fake Data for Evaluation </option>\n\t\t\t\t\t\t\t<option value="MNIST"> MNIST </option>\n\t\t\t\t\t\t\t<option value="FashionMNIST"> FashionMNIST </option>\n\t\t\t\t\t\t\t<option value="CIFAR10"> CIFAR10 </option>\n\t\t\t\t\t\t\t<option value="user"> Use your own data by adding it to the notebook later </option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</div>\t\n\t\t\t\t\t</div>\n\t\t\t\t\t\t';const n=document.createElement("div");l.node.appendChild(n),n.innerHTML='\n\t\t\t\t\t<div class="flex-container2">\n\t\t\t\t\t\t<div title="Number of classes that the dataset has.\nDefault for public datasets is 10 classes.">\n\t\t\t\t\t\t\t<label for="quantity">How many classes/output units?</label>\n\t\t\t\t\t\t\t<input type="number" id="quantity" name="quantity" value="10">\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t';const o=document.createElement("div");l.node.appendChild(o),o.innerHTML='\n\t\t\t\t\t<div class="flex-container2">\n\t\t\t\t\t\t<div><b><u> Data Preparation</u></b></div>\n\t\t\t\t\t\t<div title="Preprocessing changes the input data to fit our model.">\n\t\t\t\t\t\t\t<text><i>preprocessing: Resize(256), CenterCrop(224), ToTensor(), grayscale to RGB</i></text>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t';const i=document.createElement("div");l.node.appendChild(i),i.innerHTML='\n\t\t\t\t\t<div class="flex-container2">\n\t\t\t\t\t\t<div><b><u> Data Segregation</u></b></div>\n\t\t\t\t\t\t<div title="Data Segregation splits the available data into training data and testing data.\nMNIST and FashionMNIST consist of 60000 training images (10 Classes with 6000 samples for each class) and 10000 testing examples.\nCIFAR10 consists of 50000 training images and 10000 testing images.\nThe fake dataset generates 100 training examples and 10 testing examples.">\n\t\t\t\t\t\t\t<label><i>Public datasets use premade testing datasets.</i></label>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t</div>\n\t\t\t\t\t';const a=document.createElement("div");l.node.appendChild(a),a.innerHTML='\n\t\t\t\t\t<div class="flex-containerReverse">\n\t\t\t\t\t\t<div><b><u> Model Parameters</u></b></div>\n\t\t\t\t\t\t<div title="Not all GPUs work with the useCuda() function.!">\n\t\t\t\t\t\t\t<input type="checkbox" id="useGPU" name="useGPU" value="useGPU" checked>\n\t\t\t\t\t\t\t<label for="useGPU"> Use GPU if available? </label><br>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t';const d=document.createElement("div");l.node.appendChild(d),d.innerHTML='\n\t\t\t\t\t<div class="flex-container2">\n\t\t\t\t\t\t<div title="PyTorch allows us to use machine learning models from research papers.\nCheck the documentation for more information & the original publications!">\n\t\t\t\t\t\t\t<label for="model">Select a model:</label>\n\t\t\t\t\t\t\t<select name="model" id="model">\n\t\t\t\t\t\t\t\t<option value="resnet18"> resnet18 </option>\n\t\t\t\t\t\t\t\t<option value="shufflenet_v2_x1_0"> shufflenet v2 </option>\n\t\t\t\t\t\t\t\t<option value="vgg16"> vgg16 </option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t';const s=document.createElement("div");l.node.appendChild(s),s.innerHTML='\n\t\t\t\t\t<div class="flex-containerReverse">\n\t\t\t\t\t\t<div title="Models can be initialised with pre-computed parameters.\nThis option has no impact on training time.">\n\t\t\t\t\t\t\t<input type="checkbox" id="preTrainedModel" name="preTrainedModel" value="preTrainedModel">\n\t\t\t\t\t\t\t<label for="preTrainedModel"> Do you want to use a pre-trained model?</label><br>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t';const r=document.createElement("div");l.node.appendChild(r),r.innerHTML='\n\t\t\t\t\t<div class="flex-container2">\n\t\t\t\t\t\t<div title="An optimizer changes the parameters of a model after each batch.\nDifferent exercises might require different optimizers to maximise performance, so try out multiple ones!">\n\t\t\t\t\t\t\t<label for="optimizer"> Optimizer </label>\n\t\t\t\t\t\t\t<select name="optimizer" id="optimizer">\n\t\t\t\t\t\t\t\t<option value="Adam"> Adam </option>\n\t\t\t\t\t\t\t\t<option value="Adadelta"> Adadelta </option>\n\t\t\t\t\t\t\t\t<option value="Adagrad"> Adagrad </option>\n\t\t\t\t\t\t\t\t<option value="Adamax"> Adamax </option>\n\t\t\t\t\t\t\t\t<option value="RMSprop"> RMSprop </option>\n\t\t\t\t\t\t\t\t<option value="SGD"> SGD </option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</div>\t\n\t\t\t\t\t</div>\n\t\t\t\t';const p=document.createElement("div");l.node.appendChild(p),p.innerHTML='\n\t\t\t\t\t<div class="flex-container2">\n\t\t\t\t\t\t<div title="The learning rate tells the model how much the model parameters should be changed per batch.">\n\t\t\t\t\t\t\t<label for="rate"> Learning rate</label>\n\t\t\t\t\t\t\t<input type="number" id="rate" name="rate" value="0.001">\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t';const u=document.createElement("div");l.node.appendChild(u),u.innerHTML='\n\t\t\t\t\t<div class="flex-container2">\n\t\t\t\t\t\t<div title="Loss functions compute how good a model\'s predictions are.\nIf a model performs well, then loss will be small.">\n\t\t\t\t\t\t\t<label for="lossFunc"> Loss function</label>\n\t\t\t\t\t\t\t<select name="lossFunc" id="lossFunc">\n\t\t\t\t\t\t\t\t<option value="CrossEntropyLoss"> CrossEntropyLoss </option>\n\t\t\t\t\t\t\t\t<option value="NLLLoss"> NLLLoss </option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t';const m=document.createElement("div");l.node.appendChild(m),m.innerHTML='\n\t\t\t\t\t<div class="flex-container2">\n\t\t\t\t\t\t<div><b><u> Training</u></b></div>\n\t\t\t\t\t\t<div title="For each epoch, the whole dataset will be iterated over once.\nIncreasing the # of epochs such that the model is trained longer might improve performance.">\n\t\t\t\t\t\t\t<label for="epochs">How many epochs?</label>\n\t\t\t\t\t\t\t<input type="number" id="epochs" name="epochs" value="3">\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t';const v=document.createElement("div");l.node.appendChild(v),v.innerHTML='\n\t\t\t\t\t<div class="flex-container2">\n\t\t\t\t\t\t<div title="Batch size defines how much data is input into the model before changing its parameters.\nWe recommend size 10 for FakeData and 128 for real data.">\n\t\t\t\t\t\t\t<label for="batches"> Batch Size</label>\n\t\t\t\t\t\t\t<input type="number" id="batches" name="batches" value="128">\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t';const h=document.createElement("div");l.node.appendChild(h),h.innerHTML='\n\t\t\t\t\t<div class="flex-container2">\n\t\t\t\t\t\t<div title="Seeds determine the sequence of numbers that a pseudorandom number generator generates.\nWhen the same seed is used for data segregation on the same dataset multiple times, then the training and testing datasets will always be identical.">\n\t\t\t\t\t\t\t<label for="seed"> Random Seed for model training</label>\n\t\t\t\t\t\t\t<input type="number" id="seed" name="seed" value="2">\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t';const f=document.createElement("div");l.node.appendChild(f),f.innerHTML='\n\t\t\t\t\t<div class="flex-containerReverse">\n\t\t\t\t\t\t<div title="This option saves your model to local files.">\n\t\t\t\t\t\t\t<input type="checkbox" id="modelCheckpoint" name="modelCheckpoint" value="modelCheckpoint">\n\t\t\t\t\t\t\t<label for="modelCheckpoint"> Save model checkpoint after each epoch?</label><br>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div><i>Alert: This option uses a lot of storage space.</i></div>\n\t\t\t\t\t</div>\n\t\t\t\t';const g=document.createElement("div");l.node.appendChild(g),g.innerHTML='\n\t\t\t\t\t<div class="flex-container2">\n\t\t\t\t\t\t<div title="This option defines how often the console updates during training.">\n\t\t\t\t\t\t\t<label for="printProgress"> Print progress every ... batches</label>\n\t\t\t\t\t\t\t<input type="number" id="printProgress" name="printProgress" value="1">\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t';const b=document.createElement("div");l.node.appendChild(b),b.innerHTML='\n\t\t\t\t\t<div class="flex-container2">\n\t\t\t\t\t\t<div><button id="inputButton" type="button"> Submit your values </button></div>  \n\t\t\t\t\t</div>\n\t\t\t\t\t\t',b.addEventListener("click",(async t=>{const e=document.getElementById("exercise").value,n=document.getElementById("model").value,o=document.getElementById("data").value,i=document.getElementById("dataSelection").value,a=document.getElementById("lossFunc").value,d=document.getElementById("optimizer").value,s=document.getElementById("quantity").value,r=document.getElementById("rate").value,p=document.getElementById("batches").value,u=document.getElementById("epochs").value,m=document.getElementById("printProgress").value,v=document.getElementById("seed").value;let h=3,f=3,g=3;h=document.getElementById("preTrainedModel").checked?1:0,f=document.getElementById("useGPU").checked?1:0,g=document.getElementById("modelCheckpoint").checked?1:0;const b={exercise:e,entity:{"ex:Data Ingestion Data":{"ex:data_format":o,"ex:dataset_id":i,"ex:classes":{$:s,type:typeof s}},"ex:Model Parameters Data":{"ex:model_name":n,"ex:pretrained":{$:h,type:typeof h},"ex:gpu_enable":{$:f,type:typeof f},"ex:save_checkpoint":{$:g,type:typeof g},"ex:loss_function":a,"ex:optimizer":d,"ex:optimizer_learning_rate":{$:r,type:typeof r}},"ex:Training Data":{"ex:batch_size":{$:p,type:typeof p},"ex:epochs":{$:u,type:typeof u},"ex:print_progress":{$:m,type:typeof m},"ex:seed":{$:v,type:typeof v}},visualization_tool:{tool:"notAtAll"}}};console.log(s);const y=await c("ImageClassification_pytorch",b);if(console.log(y),"success"===y.greetings){var x=window.location.href+"/tree/MLProvCodeGen/GeneratedNotebooks/ImageClassification_PyTorch.ipynb";console.log(x);const t=document.createElement("text");l.node.appendChild(t),t.textContent="Your code has been generated successfully. Press the button below to open it.";const e=document.createElement("div");l.node.appendChild(e),e.innerHTML='\n\t\t\t\t\t\t\t\t<div class="flex-container2">\n\t\t\t\t\t\t\t\t\t<div><button id="inputButton" type="button" onclick="window.open(\''+x+"', 'MLProvCodeGen')\"> Open Notebook </button></div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t"}}));break;case"MulticlassClassification":const y=document.createElement("div");l.node.appendChild(y),y.innerHTML='\n\t\t\t\t\t<div class="flex-container2">\n\t\t\t\t\t\t<div><b><u> Data Ingestion</u></b></div>\n\t\t\t\t\t\t<div title="In data ingestion, you can select a specific dataset. This option selects the raw data, before any preprocessing.">\n\t\t\t\t\t\t\t<label for="dataset">Which dataset do you want to use?</label>\n\t\t\t\t\t\t\t<select name="dataset" id="dataset">\n\t\t\t\t\t\t\t\t<option value="Iris"> Iris </option>\n\t\t\t\t\t\t\t\t<option value="Spiral"> Spiral </option>\n\t\t\t\t\t\t\t\t<option value="Aggregation"> Aggregation </option>\n\t\t\t\t\t\t\t\t<option value="R15"> R15 </option>\n\t\t\t\t\t\t\t\t<option value="User"> Use your own Data (.csv) </option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t';const x=document.createElement("div");l.node.appendChild(x),x.innerHTML='\n\t\t\t\t\t<div class="flex-container2">\n\t\t\t\t\t\t<div><b><u> Data Preparation</u></b></div>\n\t\t\t\t\t\t<div title="Data preparation is the pipeline step that takes the raw data from data ingestion and performs a number of operation on that data to better fit it to the machine learning task at hand and the model that we plan on using.\n The MinMaxScaler scales the data\'s feature range to [0,1]">\n\t\t\t\t\t\t\t<label> <i>preprocessing: MinMaxScaler</i></label>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t';const C=document.createElement("div");l.node.appendChild(C),C.innerHTML='\n\t\t\t\t\t<div class="flex-container2">\n\t\t\t\t\t\t<div><b><u> Data Segregation</u></b></div>\n<div title="Seeds determine the sequence of numbers that a pseudorandom number generator generates.\nWhen the same seed is used for data segregation on the same dataset multiple times, then the training and testing datasets will always be identical.">\n\t\t\t\t\t\t\t<label for="random_seed">Random Seed for data Segregation (default: 2)</label>\n\t\t\t\t\t\t\t<input type="number" id="random_seed" name="random_seed" value="2">\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t';const M=document.createElement("div");l.node.appendChild(M),M.innerHTML='\n\t\t\t\t\t<div class="flex-container2">\n\t\t\t\t\t\t<div title="The input number describes the % of available datapoints to be used for testing.\nThe default value splits the input data into 20% testing and 80% training data.">\n\t\t\t\t\t\t\t<label for="test_split">Testing data split (default: 0.2)</label>\n\t\t\t\t\t\t\t<input type="number" id="test_split" name="test_split" value="0.2">\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t';const L=document.createElement("div");l.node.appendChild(L),L.innerHTML='\n\t\t\t\t\t<div class="flex-containerReverse">\n\t\t\t\t\t\t<div><b><u> Model Parameters</u></b></div>\n\t\t\t\t\t\t<div title="Depending on the GPU used, training can be sped up significantly by not only using the CPU\'s, but also the GPU\'s computational capabilities.">\n\t\t\t\t\t\t\t<input type="checkbox" id="use_gpu" name="use_gpu" value="use_gpu" checked>\n\t\t\t\t\t\t\t<label for="use_gpu"> Use GPU if available? </label><br>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t';const E=document.createElement("div");l.node.appendChild(E),E.innerHTML='\n\t\t\t\t\t<div class="flex-container2">\n\t\t\t\t\t\t<div title="The activation function of a neural network defines how the output of a neuron is computed.\nIf the accuracy of the generated neural network is unsatisfactory, try changing the activation funciton and compare the results!">\n\t\t\t\t\t\t\t<label for="activation_func">Activation function:</label>\n\t\t\t\t\t\t\t<select name="activation_func" id="activation_func">\n\t\t\t\t\t\t\t\t<option value="F.softmax(self.layer3(x), dim=1)"> Softmax </option>\n\t\t\t\t\t\t\t\t<option value="torch.sigmoid(self.layer3(x))"> Sigmoid </option>\n\t\t\t\t\t\t\t\t<option value="torch.tanh(self.layer3(x))"> Tanh </option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t';const T=document.createElement("div");l.node.appendChild(T),T.innerHTML='\n\t\t\t\t\t<div class="flex-container2">\n\t\t\t\t\t\t<div title="The generated neural network has 3 layers: input, middle, and output.\nThis options defines the # of neurons for the middle layer.">\n\t\t\t\t\t\t\t<label for="neuron_number">How many Neurons for middle layer?</label>\n\t\t\t\t\t\t\t<input type="number" id="neuron_number" name="neuron_number" value="50">\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div><i>(Input and output neurons are separate.)</i></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t';const w=document.createElement("div");l.node.appendChild(w),w.innerHTML='\n\t\t\t\t\t<div class="flex-container2">\n<div title="An optimizer changes the parameters of a neural network after each batch.\nDifferent exercises might require different optimizers to maximise performance, so try out multiple ones!">\n\t\t\t\t\t\t\t<label for="optimizer"> Optimizer </label>\n\t\t\t\t\t\t\t<select name="optimizer" id="optimizer">\n\t\t\t\t\t\t\t\t<option value="torch.optim.Adam("> Adam </option>\n\t\t\t\t\t\t\t\t<option value="torch.optim.Adadelta("> Adadelta </option>\n\t\t\t\t\t\t\t\t<option value="torch.optim.Adagrad("> Adagrad </option>\n\t\t\t\t\t\t\t\t<option value="torch.optim.Adamax("> Adamax </option>\n\t\t\t\t\t\t\t\t<option value="torch.optim.RMSprop("> RMSprop </option>\n\t\t\t\t\t\t\t\t<option value="torch.optim.SGD("> SGD </option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t';const I=document.createElement("div");l.node.appendChild(I),I.innerHTML='\n\t\t\t\t\t<div class="flex-containerReverse">\n\t\t\t\t\t\t<div title="The learning rate tells the model how much the model parameters should be changed per batch.">\n\t\t\t\t\t\t\t<input type="checkbox" id="default" name="default" value="default" checked>\n\t\t\t\t\t\t\t<label for="default"> Use optimizers default learning rate? </label><br>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t';const S=document.createElement("div");l.node.appendChild(S),S.innerHTML='\n\t\t\t\t\t<div class="flex-container2">\n\t\t\t\t\t\t<div title="The learning rate tells the model how much the model parameters should be changed per batch.">\n\t\t\t\t\t\t\t<label for="rate"> Learning rate</label>\n\t\t\t\t\t\t\t<input type="number" id="rate" name="rate" value="0.001">\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t';const k=document.createElement("div");l.node.appendChild(k),k.innerHTML='\n\t\t\t\t\t<div class="flex-container2">\n\t\t\t\t\t\t<div title="Loss functions compute how good a model\'s predictions are.\nIf a model performs well, then loss will be small.">\n\t\t\t\t\t\t\t<label for="lossFunc"> Loss function</label>\n\t\t\t\t\t\t\t<select name="lossFunc" id="lossFunc">\n\t\t\t\t\t\t\t\t<option value="nn.CrossEntropyLoss()"> CrossEntropyLoss </option>\n\t\t\t\t\t\t\t\t<option value="nn.NLLLoss()"> NLLLoss </option>\n\t\t\t\t\t\t\t\t<option value="nn.MultiMarginLoss()"> MultiMarginLoss </option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t';const P=document.createElement("div");l.node.appendChild(P),P.innerHTML='\n\t\t\t\t\t<div class="flex-container2">\n\t\t\t\t\t\t<div><b><u> Training</u></b></div>\n\t\t\t\t\t\t<div title="For each epoch, the whole dataset will be iterated over once.\nIncreasing the # of epochs such that the model is trained longer might improve performance.">\n\t\t\t\t\t\t\t<label for="epochs">How many Epochs?</label>\n\t\t\t\t\t\t\t<input type="number" id="epochs" name="epochs" value="100">\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t';const _=document.createElement("div");l.node.appendChild(_),_.innerHTML='\n\t\t\t\t\t<div class="flex-container2">\n\t\t\t\t\t\t<div><button id="inputButton" type="button"> Submit your values </button></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t',_.addEventListener("click",(async t=>{const e=document.getElementById("exercise").value,n=document.getElementById("dataset").value,o=document.getElementById("activation_func").value,i=document.getElementById("optimizer").value,a=document.getElementById("lossFunc").value,d=document.getElementById("test_split").value,s=document.getElementById("neuron_number").value,r=document.getElementById("epochs").value,p=document.getElementById("rate").value,u=document.getElementById("random_seed").value;let m,v;m=document.getElementById("default").checked?1:0,v=document.getElementById("use_gpu").checked?1:0;const h={exercise:e,entity:{"ex:Data Ingestion Data":{"ex:dataset_id":n},"ex:Data Segregation Data":{"ex:test_size":{$:d,type:typeof d},"ex:random_state":{$:u,type:typeof u}},"ex:Model Parameters Data":{"ex:gpu_enable":{$:v,type:typeof v},"ex:neuron_number":{$:s,type:typeof s},"ex:loss_function":a,"ex:optimizer":i,"ex:optimizer_default_learning_rate":{$:m,type:typeof m},"ex:optimizer_learning_rate":{$:p,type:typeof p},"ex:activation_function":o},"ex:Training Data":{"ex:epochs":{$:r,type:typeof r}}}},f=await c("MulticlassClassification",h);if(console.log(f),"success"===f.greetings){var g=window.location.href+"/tree/MLProvCodeGen/GeneratedNotebooks/MulticlassClassification.ipynb";console.log(g);const t=document.createElement("text");l.node.appendChild(t),t.textContent="Your code has been generated successfully. Press the button below to open it.";const e=document.createElement("div");l.node.appendChild(e),e.innerHTML='\n\t\t\t\t\t\t\t\t<div class="flex-container2">\n\t\t\t\t\t\t\t\t\t<div><button id="inputButton" type="button" onclick="window.open(\''+g+"', 'MLProvCodeGen')\"> Open Notebook </button></div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t"}})),console.log(window.location.href)}}));const g="codegenerator:open";t.commands.addCommand(g,{label:"MLProvCodeGen",execute:()=>{r.isAttached||t.shell.add(r,"main"),t.shell.activateById(r.id)}}),e.addItem({command:g,category:"MLProvCodeGen"}),n.add({command:g,category:"Other",rank:0})}},u=p}}]);