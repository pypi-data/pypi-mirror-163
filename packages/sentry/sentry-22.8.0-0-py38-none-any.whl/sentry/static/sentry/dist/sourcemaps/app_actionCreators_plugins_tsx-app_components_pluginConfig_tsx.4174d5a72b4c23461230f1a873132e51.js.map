{"version":3,"file":"chunks/app_actionCreators_plugins_tsx-app_components_pluginConfig_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actionCreators/plugins.tsx","webpack:///./app/actions/pluginActions.tsx","webpack:///./app/components/pluginConfig.tsx"],"sourcesContent":["import {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport PluginActions from 'sentry/actions/pluginActions';\nimport {Client, RequestOptions} from 'sentry/api';\nimport {t} from 'sentry/locale';\nimport {Plugin} from 'sentry/types';\n\nconst activeFetch = {};\n// PluginsStore always exists, so api client should be independent of component lifecycle\nconst api = new Client();\n\ntype Slugs = {\n  /**\n   * Organization slug\n   */\n  orgId: string;\n\n  /**\n   * Plugin slug\n   */\n  pluginId: string;\n\n  /**\n   * Project slug\n   */\n  projectId: string;\n};\n\ntype DoUpdateParams = Slugs & {\n  update: Partial<Plugin>;\n} & Partial<RequestOptions>;\n\nfunction doUpdate({orgId, projectId, pluginId, update, ...params}: DoUpdateParams) {\n  PluginActions.update(pluginId, update);\n  const request = api.requestPromise(\n    `/projects/${orgId}/${projectId}/plugins/${pluginId}/`,\n    {\n      ...params,\n    }\n  );\n\n  // This is intentionally not chained because we want the unhandled promise to be returned\n  request\n    .then(() => {\n      PluginActions.updateSuccess(pluginId, update);\n    })\n    .catch(resp => {\n      const err =\n        resp && resp.responseJSON && typeof resp.responseJSON.detail === 'string'\n          ? new Error(resp.responseJSON.detail)\n          : new Error('Unable to update plugin');\n      PluginActions.updateError(pluginId, update, err);\n    });\n\n  return request;\n}\n\ntype FetchPluginsOptions = {\n  /**\n   * Reset will set loading state = true\n   */\n  resetLoading?: boolean;\n};\n\n/**\n * Fetches list of available plugins for a project\n */\nexport function fetchPlugins(\n  {orgId, projectId}: Pick<Slugs, 'orgId' | 'projectId'>,\n  options?: FetchPluginsOptions\n): Promise<Plugin[]> {\n  const path = `/projects/${orgId}/${projectId}/plugins/`;\n\n  // Make sure we throttle fetches\n  if (activeFetch[path]) {\n    return activeFetch[path];\n  }\n\n  PluginActions.fetchAll(options);\n  const request = api.requestPromise(path, {\n    method: 'GET',\n    includeAllArgs: true,\n  });\n\n  activeFetch[path] = request;\n\n  // This is intentionally not chained because we want the unhandled promise to be returned\n  request\n    .then(([data, _, resp]) => {\n      PluginActions.fetchAllSuccess(data, {pageLinks: resp?.getResponseHeader('Link')});\n\n      return data;\n    })\n    .catch(err => {\n      PluginActions.fetchAllError(err);\n      throw new Error('Unable to fetch plugins');\n    })\n    .then(() => (activeFetch[path] = null));\n\n  return request;\n}\n\ntype EnableDisablePluginParams = Slugs;\n\n/**\n * Enables a plugin\n */\nexport function enablePlugin(params: EnableDisablePluginParams) {\n  addLoadingMessage(t('Enabling...'));\n  return doUpdate({...params, update: {enabled: true}, method: 'POST'})\n    .then(() => addSuccessMessage(t('Plugin was enabled')))\n    .catch(() => addErrorMessage(t('Unable to enable plugin')));\n}\n\n/**\n * Disables a plugin\n */\nexport function disablePlugin(params: EnableDisablePluginParams) {\n  addLoadingMessage(t('Disabling...'));\n  return doUpdate({...params, update: {enabled: false}, method: 'DELETE'})\n    .then(() => addSuccessMessage(t('Plugin was disabled')))\n    .catch(() => addErrorMessage(t('Unable to disable plugin')));\n}\n","import {createActions} from 'reflux';\n\nconst PluginActions = createActions([\n  'update',\n  'updateError',\n  'updateSuccess',\n  'fetchAll',\n  'fetchAllSuccess',\n  'fetchAllError',\n]);\n\nexport default PluginActions;\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\nimport isEqual from 'lodash/isEqual';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport Button from 'sentry/components/button';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {Panel, PanelAlert, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport plugins from 'sentry/plugins';\nimport PluginIcon from 'sentry/plugins/components/pluginIcon';\nimport space from 'sentry/styles/space';\nimport {Organization, Plugin, Project} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\n\ntype Props = {\n  api: Client;\n  data: Plugin;\n  onDisablePlugin: (data: Plugin) => void;\n  organization: Organization;\n  project: Project;\n  enabled?: boolean;\n};\n\ntype State = {\n  testResults: string;\n  loading?: boolean;\n};\n\nclass PluginConfig extends Component<Props, State> {\n  static defaultProps = {\n    onDisablePlugin: () => {},\n  };\n\n  state: State = {\n    loading: !plugins.isLoaded(this.props.data),\n    testResults: '',\n  };\n\n  componentDidMount() {\n    this.loadPlugin(this.props.data);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    this.loadPlugin(nextProps.data);\n  }\n\n  shouldComponentUpdate(nextProps: Props, nextState: State) {\n    return !isEqual(nextState, this.state) || !isEqual(nextProps.data, this.props.data);\n  }\n\n  loadPlugin(data: Plugin) {\n    this.setState(\n      {\n        loading: true,\n      },\n      () => {\n        plugins.load(data, () => {\n          this.setState({loading: false});\n        });\n      }\n    );\n  }\n\n  getPluginEndpoint() {\n    const {organization, project, data} = this.props;\n    return `/projects/${organization.slug}/${project.slug}/plugins/${data.id}/`;\n  }\n\n  handleDisablePlugin = () => {\n    this.props.onDisablePlugin(this.props.data);\n  };\n\n  handleTestPlugin = async () => {\n    this.setState({testResults: ''});\n    addLoadingMessage(t('Sending test...'));\n\n    try {\n      const data = await this.props.api.requestPromise(this.getPluginEndpoint(), {\n        method: 'POST',\n        data: {\n          test: true,\n        },\n      });\n\n      this.setState({testResults: JSON.stringify(data.detail)});\n      addSuccessMessage(t('Test Complete!'));\n    } catch (_err) {\n      addErrorMessage(\n        t('An unexpected error occurred while testing your plugin. Please try again.')\n      );\n    }\n  };\n\n  createMarkup() {\n    return {__html: this.props.data.doc};\n  }\n\n  render() {\n    const {data} = this.props;\n    // If passed via props, use that value instead of from `data`\n    const enabled =\n      typeof this.props.enabled !== 'undefined' ? this.props.enabled : data.enabled;\n\n    return (\n      <Panel\n        className={`plugin-config ref-plugin-config-${data.id}`}\n        data-test-id=\"plugin-config\"\n      >\n        <PanelHeader hasButtons>\n          <PluginName>\n            <StyledPluginIcon pluginId={data.id} />\n            <span>{data.name}</span>\n          </PluginName>\n\n          {data.canDisable && enabled && (\n            <Actions>\n              {data.isTestable && (\n                <TestPluginButton onClick={this.handleTestPlugin} size=\"sm\">\n                  {t('Test Plugin')}\n                </TestPluginButton>\n              )}\n              <Button size=\"sm\" onClick={this.handleDisablePlugin}>\n                {t('Disable')}\n              </Button>\n            </Actions>\n          )}\n        </PanelHeader>\n\n        {data.status === 'beta' && (\n          <PanelAlert type=\"warning\">\n            {t('This plugin is considered beta and may change in the future.')}\n          </PanelAlert>\n        )}\n\n        {this.state.testResults !== '' && (\n          <PanelAlert type=\"info\">\n            <strong>Test Results</strong>\n            <div>{this.state.testResults}</div>\n          </PanelAlert>\n        )}\n\n        <StyledPanelBody>\n          <div dangerouslySetInnerHTML={this.createMarkup()} />\n          {this.state.loading ? (\n            <LoadingIndicator />\n          ) : (\n            plugins.get(data).renderSettings({\n              organization: this.props.organization,\n              project: this.props.project,\n            })\n          )}\n        </StyledPanelBody>\n      </Panel>\n    );\n  }\n}\n\nexport {PluginConfig};\nexport default withApi(PluginConfig);\n\nconst PluginName = styled('div')`\n  display: flex;\n  align-items: center;\n  flex: 1;\n`;\n\nconst StyledPluginIcon = styled(PluginIcon)`\n  margin-right: ${space(1)};\n`;\n\nconst Actions = styled('div')`\n  display: flex;\n`;\nconst TestPluginButton = styled(Button)`\n  margin-right: ${space(1)};\n`;\n\nconst StyledPanelBody = styled(PanelBody)`\n  padding: ${space(2)};\n  padding-bottom: 0;\n`;\n"],"names":["activeFetch","api","Client","doUpdate","orgId","projectId","pluginId","update","params","PluginActions","request","requestPromise","then","catch","resp","err","responseJSON","detail","Error","fetchPlugins","options","path","method","includeAllArgs","data","_","pageLinks","getResponseHeader","enablePlugin","addLoadingMessage","t","enabled","addSuccessMessage","addErrorMessage","disablePlugin","createActions","PluginConfig","Component","loading","plugins","this","props","testResults","onDisablePlugin","async","setState","getPluginEndpoint","test","JSON","stringify","_err","componentDidMount","loadPlugin","UNSAFE_componentWillReceiveProps","nextProps","shouldComponentUpdate","nextState","isEqual","state","organization","project","slug","id","createMarkup","__html","doc","render","className","hasButtons","PluginName","StyledPluginIcon","name","canDisable","Actions","isTestable","TestPluginButton","onClick","handleTestPlugin","size","handleDisablePlugin","status","type","StyledPanelBody","dangerouslySetInnerHTML","renderSettings","withApi","PluginIcon","space","Button","PanelBody"],"sourceRoot":""}