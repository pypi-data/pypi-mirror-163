{"version":3,"file":"chunks/app_utils_replays_getQueryParamAsString_tsx-app_views_replays_replayTable_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/replays/getQueryParamAsString.tsx","webpack:///./app/components/replays/replayHighlight.tsx","webpack:///./app/views/replays/replayTable.tsx"],"sourcesContent":["export function getQueryParamAsString(query: string | string[] | null | undefined) {\n  if (!query) {\n    return '';\n  }\n  return Array.isArray(query) ? query.join(' ') : query;\n}\n","import React from 'react';\n\nimport ScoreBar from 'sentry/components/scoreBar';\nimport CHART_PALETTE from 'sentry/constants/chartPalette';\nimport {ReplayDurationAndErrors} from 'sentry/views/replays/types';\n\ninterface Props {\n  data: ReplayDurationAndErrors | undefined;\n}\n\nfunction replayHighlight({data}: Props) {\n  let score = 1;\n\n  if (data) {\n    // Mocked data ðŸ‘‡ - this will change with the new backend\n    const pagesVisited = 1;\n    const {count_if_event_type_equals_error: errors, 'equation[0]': durationInSeconds} =\n      data;\n\n    const pagesVisitedOverTime = pagesVisited / (durationInSeconds || 1);\n\n    score = (errors * 25 + pagesVisited * 5 + pagesVisitedOverTime) / 10;\n    score = Math.floor(Math.min(10, Math.max(1, score)));\n  }\n\n  const palette = new Array(10).fill([CHART_PALETTE[0][0]]);\n  return <ScoreBar size={20} score={score} palette={palette} radius={0} />;\n}\n\nexport default replayHighlight;\n","import React, {Fragment, useMemo} from 'react';\nimport styled from '@emotion/styled';\n\nimport Duration from 'sentry/components/duration';\nimport ProjectBadge from 'sentry/components/idBadge/projectBadge';\nimport UserBadge from 'sentry/components/idBadge/userBadge';\nimport Link from 'sentry/components/links/link';\nimport Placeholder from 'sentry/components/placeholder';\nimport ReplayHighlight from 'sentry/components/replays/replayHighlight';\nimport {StringWalker} from 'sentry/components/replays/walker/urlWalker';\nimport TimeSince from 'sentry/components/timeSince';\nimport {IconCalendar} from 'sentry/icons';\nimport space from 'sentry/styles/space';\nimport {generateEventSlug} from 'sentry/utils/discover/urls';\nimport useDiscoverQuery from 'sentry/utils/replays/hooks/useDiscoveryQuery';\nimport theme from 'sentry/utils/theme';\nimport useMedia from 'sentry/utils/useMedia';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport useProjects from 'sentry/utils/useProjects';\nimport {\n  ReplayDiscoveryListItem,\n  ReplayDurationAndErrors,\n} from 'sentry/views/replays/types';\n\ntype Props = {\n  idKey: string;\n  replayList: ReplayDiscoveryListItem[];\n  showProjectColumn?: boolean;\n};\n\nfunction ReplayTable({replayList, idKey, showProjectColumn}: Props) {\n  const organization = useOrganization();\n  const {projects} = useProjects();\n  const isScreenLarge = useMedia(`(min-width: ${theme.breakpoints.small})`);\n\n  const query = replayList.map(item => `replayId:${item[idKey]}`).join(' OR ');\n\n  const discoverQuery = useMemo(\n    () => ({\n      fields: [\n        'replayId',\n        'max(timestamp)',\n        'min(timestamp)',\n        'equation|max(timestamp)-min(timestamp)',\n        'count_if(event.type,equals,error)',\n      ],\n      orderby: '-min_timestamp',\n      query: `(title:\"sentry-replay-event-*\" OR event.type:error) AND (${query})`,\n    }),\n    [query]\n  );\n\n  const {data} = useDiscoverQuery<ReplayDurationAndErrors>({discoverQuery});\n\n  const dataEntries = data\n    ? Object.fromEntries(data.map(item => [item.replayId, item]))\n    : {};\n\n  return (\n    <Fragment>\n      {replayList?.map(replay => (\n        <Fragment key={replay.id}>\n          <UserBadge\n            avatarSize={32}\n            displayName={\n              <Link\n                to={`/organizations/${organization.slug}/replays/${generateEventSlug({\n                  project: replay.project,\n                  id: replay[idKey],\n                })}/`}\n              >\n                {replay['user.display']}\n              </Link>\n            }\n            user={{\n              username: replay['user.username'] ?? '',\n              id: replay['user.id'] ?? '',\n              ip_address: replay['user.ip_address'] ?? '',\n              name: replay['user.name'] ?? '',\n              email: replay['user.email'] ?? '',\n            }}\n            // this is the subheading for the avatar, so displayEmail in this case is a misnomer\n            displayEmail={<StringWalker urls={[]} />}\n          />\n          {isScreenLarge && showProjectColumn && (\n            <Item>\n              <ProjectBadge\n                project={\n                  projects.find(p => p.slug === replay.project) || {\n                    slug: replay.project,\n                  }\n                }\n                avatarSize={16}\n              />\n            </Item>\n          )}\n          <Item>\n            <TimeSinceWrapper>\n              {isScreenLarge && <StyledIconCalendarWrapper color=\"gray500\" size=\"sm\" />}\n              <TimeSince date={replay.timestamp} />\n            </TimeSinceWrapper>\n          </Item>\n          {data ? (\n            <React.Fragment>\n              <Item>\n                <Duration\n                  seconds={\n                    Math.floor(\n                      dataEntries[replay[idKey]]\n                        ? dataEntries[replay[idKey]]['equation[0]']\n                        : 0\n                    ) || 1\n                  }\n                  exact\n                  abbreviation\n                />\n              </Item>\n              <Item>\n                {dataEntries[replay[idKey]]\n                  ? dataEntries[replay[idKey]]?.count_if_event_type_equals_error\n                  : 0}\n              </Item>\n              <Item>\n                <ReplayHighlight data={dataEntries[replay[idKey]]} />\n              </Item>\n            </React.Fragment>\n          ) : (\n            <React.Fragment>\n              <Item>\n                <Placeholder height=\"24px\" />\n              </Item>\n              <Item>\n                <Placeholder height=\"24px\" />\n              </Item>\n              <Item>\n                <Placeholder height=\"24px\" />\n              </Item>\n            </React.Fragment>\n          )}\n        </Fragment>\n      ))}\n    </Fragment>\n  );\n}\n\nconst Item = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst TimeSinceWrapper = styled('div')`\n  display: grid;\n  grid-template-columns: repeat(2, minmax(auto, max-content));\n  align-items: center;\n  gap: ${space(1)};\n`;\n\nconst StyledIconCalendarWrapper = styled(IconCalendar)`\n  position: relative;\n  top: -1px;\n`;\n\nexport default ReplayTable;\n"],"names":["getQueryParamAsString","query","Array","isArray","join","replayHighlight","data","score","pagesVisited","count_if_event_type_equals_error","errors","durationInSeconds","Math","floor","min","max","palette","fill","CHART_PALETTE","size","radius","ReplayTable","replayList","idKey","showProjectColumn","organization","useOrganization","projects","useProjects","isScreenLarge","useMedia","theme","map","item","discoverQuery","useMemo","fields","orderby","useDiscoverQuery","dataEntries","Object","fromEntries","replayId","Fragment","replay","avatarSize","displayName","to","slug","generateEventSlug","project","id","user","username","ip_address","name","email","displayEmail","urls","Item","find","p","TimeSinceWrapper","StyledIconCalendarWrapper","color","date","timestamp","seconds","exact","abbreviation","height","space","IconCalendar"],"sourceRoot":""}