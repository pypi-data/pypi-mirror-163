{"version":3,"file":"chunks/app_views_admin_installWizard_index_tsx-images_pattern_sentry-pattern_png.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/admin/installWizard/index.tsx","webpack:///./app/views/admin/options.tsx","webpack:///./app/views/asyncView.tsx","webpack:///../node_modules/lodash/keyBy.js"],"sourcesContent":["import {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport sentryPattern from 'sentry-images/pattern/sentry-pattern.png';\n\nimport Alert from 'sentry/components/alert';\nimport {ApiForm} from 'sentry/components/forms';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport ConfigStore from 'sentry/stores/configStore';\nimport space from 'sentry/styles/space';\nimport AsyncView from 'sentry/views/asyncView';\n\nimport {getForm, getOptionDefault, getOptionField} from '../options';\n\ntype Props = AsyncView['props'] & {\n  onConfigured: () => void;\n};\n\ntype State = AsyncView['state'];\n\nexport default class InstallWizard extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [['data', '/internal/options/?query=is:required']];\n  }\n\n  renderFormFields() {\n    const options = this.state.data;\n\n    let missingOptions = new Set(\n      Object.keys(options).filter(option => !options[option].field.isSet)\n    );\n    // This is to handle the initial installation case.\n    // Even if all options are filled out, we want to prompt to confirm\n    // them. This is a bit of a hack because we're assuming that\n    // the backend only spit back all filled out options for\n    // this case.\n    if (missingOptions.size === 0) {\n      missingOptions = new Set(Object.keys(options));\n    }\n\n    // A mapping of option name to Field object\n    const fields = {};\n\n    for (const key of missingOptions) {\n      const option = options[key];\n      if (option.field.disabled) {\n        continue;\n      }\n      fields[key] = getOptionField(key, option.field);\n    }\n\n    return getForm(fields);\n  }\n\n  getInitialData() {\n    const options = this.state.data;\n    const data = {};\n    Object.keys(options).forEach(optionName => {\n      const option = options[optionName];\n      if (option.field.disabled) {\n        return;\n      }\n\n      // TODO(dcramer): we need to rethink this logic as doing multiple \"is this value actually set\"\n      // is problematic\n      // all values to their server-defaults (as client-side defaults don't really work)\n      const displayValue = option.value || getOptionDefault(optionName);\n      if (\n        // XXX(dcramer): we need the user to explicitly choose beacon.anonymous\n        // vs using an implied default so effectively this is binding\n        optionName !== 'beacon.anonymous' &&\n        // XXX(byk): if we don't have a set value but have a default value filled\n        // instead, from the client, set it on the data so it is sent to the server\n        !option.field.isSet &&\n        displayValue !== undefined\n      ) {\n        data[optionName] = displayValue;\n      }\n    });\n    return data;\n  }\n\n  getTitle() {\n    return t('Setup Sentry');\n  }\n\n  render() {\n    const version = ConfigStore.get('version');\n    return (\n      <SentryDocumentTitle noSuffix title={this.getTitle()}>\n        <Wrapper>\n          <Pattern />\n          <SetupWizard>\n            <Heading>\n              <span>{t('Welcome to Sentry')}</span>\n              <Version>{version.current}</Version>\n            </Heading>\n            {this.state.loading\n              ? this.renderLoading()\n              : this.state.error\n              ? this.renderError()\n              : this.renderBody()}\n          </SetupWizard>\n        </Wrapper>\n      </SentryDocumentTitle>\n    );\n  }\n\n  renderError() {\n    return (\n      <Alert type=\"error\" showIcon>\n        {t(\n          'We were unable to load the required configuration from the Sentry server. Please take a look at the service logs.'\n        )}\n      </Alert>\n    );\n  }\n\n  renderBody() {\n    return (\n      <ApiForm\n        apiMethod=\"PUT\"\n        apiEndpoint={this.getEndpoints()[0][1]}\n        submitLabel={t('Continue')}\n        initialData={this.getInitialData()}\n        onSubmitSuccess={this.props.onConfigured}\n      >\n        <p>{t('Complete setup by filling out the required configuration.')}</p>\n\n        {this.renderFormFields()}\n      </ApiForm>\n    );\n  }\n}\n\nconst Wrapper = styled('div')`\n  display: flex;\n  justify-content: center;\n`;\n\nconst fixedStyle = css`\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n`;\n\nconst Pattern = styled('div')`\n  z-index: -1;\n\n  &::before {\n    ${fixedStyle}\n    content: '';\n    background-image: linear-gradient(\n      to right,\n      ${p => p.theme.purple200} 0%,\n      ${p => p.theme.purple300} 100%\n    );\n    background-repeat: repeat-y;\n  }\n\n  &::after {\n    ${fixedStyle}\n    content: '';\n    background: url(${sentryPattern});\n    background-size: 400px;\n    opacity: 0.8;\n  }\n`;\n\nconst Heading = styled('h1')`\n  display: grid;\n  gap: ${space(1)};\n  justify-content: space-between;\n  grid-auto-flow: column;\n  line-height: 36px;\n`;\n\nconst Version = styled('small')`\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  line-height: inherit;\n`;\n\nconst SetupWizard = styled('div')`\n  background: ${p => p.theme.background};\n  border-radius: ${p => p.theme.borderRadius};\n  box-shadow: ${p => p.theme.dropShadowHeavy};\n  margin-top: 40px;\n  padding: 40px 40px 20px;\n  width: 600px;\n  z-index: ${p => p.theme.zIndex.initial};\n`;\n","import keyBy from 'lodash/keyBy';\n\nimport {\n  BooleanField,\n  EmailField,\n  RadioBooleanField,\n  TextField,\n} from 'sentry/components/forms';\nimport {t, tct} from 'sentry/locale';\nimport ConfigStore from 'sentry/stores/configStore';\n\ntype Section = {\n  key: string;\n  heading?: string;\n};\n\ntype Field = {\n  key: string;\n  label: React.ReactNode;\n  allowEmpty?: boolean;\n  component?: React.ComponentType<any>;\n  defaultValue?: () => string | false;\n  disabled?: boolean;\n  disabledReason?: string;\n  help?: React.ReactNode;\n  noLabel?: string;\n  placeholder?: string;\n  required?: boolean;\n  yesFirst?: boolean;\n  yesLabel?: string;\n};\n\n// This are ordered based on their display order visually\nconst sections: Section[] = [\n  {\n    key: 'system',\n  },\n  {\n    key: 'mail',\n    heading: t('Outbound email'),\n  },\n  {\n    key: 'auth',\n    heading: t('Authentication'),\n  },\n  {\n    key: 'beacon',\n    heading: t('Beacon'),\n  },\n];\n\n// This are ordered based on their display order visually\nconst definitions: Field[] = [\n  {\n    key: 'system.url-prefix',\n    label: t('Root URL'),\n    placeholder: 'https://sentry.example.com',\n    help: t('The root web address which is used to communicate with the Sentry backend.'),\n    defaultValue: () => `${document.location.protocol}//${document.location.host}`,\n  },\n  {\n    key: 'system.admin-email',\n    label: t('Admin Email'),\n    placeholder: 'admin@example.com',\n    help: t('The technical contact for this Sentry installation.'),\n    // TODO(dcramer): this should not be hardcoded to a component\n    component: EmailField,\n    defaultValue: () => ConfigStore.get('user').email,\n  },\n  {\n    key: 'system.support-email',\n    label: t('Support Email'),\n    placeholder: 'support@example.com',\n    help: t('The support contact for this Sentry installation.'),\n    // TODO(dcramer): this should not be hardcoded to a component\n    component: EmailField,\n    defaultValue: () => ConfigStore.get('user').email,\n  },\n  {\n    key: 'system.security-email',\n    label: t('Security Email'),\n    placeholder: 'security@example.com',\n    help: t('The security contact for this Sentry installation.'),\n    // TODO(dcramer): this should not be hardcoded to a component\n    component: EmailField,\n    defaultValue: () => ConfigStore.get('user').email,\n  },\n  {\n    key: 'system.rate-limit',\n    label: t('Rate Limit'),\n    placeholder: 'e.g. 500',\n    help: t(\n      'The maximum number of events the system should accept per minute. A value of 0 will disable the default rate limit.'\n    ),\n  },\n  {\n    key: 'auth.allow-registration',\n    label: t('Allow Registration'),\n    help: t('Allow anyone to create an account and access this Sentry installation.'),\n    component: BooleanField,\n    defaultValue: () => false,\n  },\n  {\n    key: 'auth.ip-rate-limit',\n    label: t('IP Rate Limit'),\n    placeholder: 'e.g. 10',\n    help: t(\n      'The maximum number of times an authentication attempt may be made by a single IP address in a 60 second window.'\n    ),\n  },\n  {\n    key: 'auth.user-rate-limit',\n    label: t('User Rate Limit'),\n    placeholder: 'e.g. 10',\n    help: t(\n      'The maximum number of times an authentication attempt may be made against a single account in a 60 second window.'\n    ),\n  },\n  {\n    key: 'api.rate-limit.org-create',\n    label: 'Organization Creation Rate Limit',\n    placeholder: 'e.g. 5',\n    help: t(\n      'The maximum number of organizations which may be created by a single account in a one hour window.'\n    ),\n  },\n  {\n    key: 'beacon.anonymous',\n    label: 'Usage Statistics',\n    component: RadioBooleanField,\n    // yes and no are inverted here due to the nature of this configuration\n    noLabel: 'Send my contact information along with usage statistics',\n    yesLabel: 'Please keep my usage information anonymous',\n    yesFirst: false,\n    help: tct(\n      'If enabled, any stats reported to sentry.io will exclude identifying information (such as your administrative email address). By anonymizing your installation the Sentry team will be unable to contact you about security updates. For more information on what data is sent to Sentry, see the [link:documentation].',\n      {\n        link: <a href=\"https://develop.sentry.dev/self-hosted/\" />,\n      }\n    ),\n  },\n  {\n    key: 'mail.from',\n    label: t('Email From'),\n    component: EmailField,\n    defaultValue: () => `sentry@${document.location.hostname}`,\n    help: t('Email address to be used in From for all outbound email.'),\n  },\n  {\n    key: 'mail.host',\n    label: t('SMTP Host'),\n    placeholder: 'localhost',\n    defaultValue: () => 'localhost',\n  },\n  {\n    key: 'mail.port',\n    label: t('SMTP Port'),\n    placeholder: '25',\n    defaultValue: () => '25',\n  },\n  {\n    key: 'mail.username',\n    label: t('SMTP Username'),\n    defaultValue: () => '',\n  },\n  {\n    key: 'mail.password',\n    label: t('SMTP Password'),\n    // TODO(mattrobenolt): We don't want to use a real password field unless\n    // there's a way to reveal it. Without being able to see the password, it's\n    // impossible to confirm if it's right.\n    // component: PasswordField,\n    defaultValue: () => '',\n  },\n  {\n    key: 'mail.use-tls',\n    label: t('Use STARTTLS? (exclusive with SSL)'),\n    component: BooleanField,\n    defaultValue: () => false,\n  },\n  {\n    key: 'mail.use-ssl',\n    label: t('Use SSL? (exclusive with STARTTLS)'),\n    component: BooleanField,\n    defaultValue: () => false,\n  },\n];\n\nconst definitionsMap = keyBy(definitions, def => def.key);\n\nconst disabledReasons = {\n  diskPriority:\n    'This setting is defined in config.yml and may not be changed via the web UI.',\n  smtpDisabled: 'SMTP mail has been disabled, so this option is unavailable',\n};\n\nexport function getOption(option: string): Field {\n  return definitionsMap[option];\n}\n\nexport function getOptionDefault(option: string): string | false | undefined {\n  const meta = getOption(option);\n  return meta.defaultValue ? meta.defaultValue() : undefined;\n}\n\nfunction optionsForSection(section: Section) {\n  return definitions.filter(option => option.key.split('.')[0] === section.key);\n}\n\nexport function getOptionField(option: string, field: Field) {\n  const meta = {...getOption(option), ...field};\n  const Field = meta.component || TextField;\n  return (\n    <Field\n      {...meta}\n      name={option}\n      key={option}\n      defaultValue={getOptionDefault(option)}\n      required={meta.required && !meta.allowEmpty}\n      disabledReason={meta.disabledReason && disabledReasons[meta.disabledReason]}\n    />\n  );\n}\n\nfunction getSectionFieldSet(section: Section, fields: Field[]) {\n  return (\n    <fieldset key={section.key}>\n      {section.heading && <legend>{section.heading}</legend>}\n      {fields}\n    </fieldset>\n  );\n}\n\nexport function getForm(fieldMap: Record<string, Field>) {\n  const sets: React.ReactNode[] = [];\n\n  for (const section of sections) {\n    const set: Field[] = [];\n\n    for (const option of optionsForSection(section)) {\n      if (fieldMap[option.key]) {\n        set.push(fieldMap[option.key]);\n      }\n    }\n\n    if (set.length) {\n      sets.push(getSectionFieldSet(section, set));\n    }\n  }\n\n  return sets;\n}\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","var baseAssignValue = require('./_baseAssignValue'),\n    createAggregator = require('./_createAggregator');\n\n/**\n * Creates an object composed of keys generated from the results of running\n * each element of `collection` thru `iteratee`. The corresponding value of\n * each key is the last element responsible for generating the key. The\n * iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n * @returns {Object} Returns the composed aggregate object.\n * @example\n *\n * var array = [\n *   { 'dir': 'left', 'code': 97 },\n *   { 'dir': 'right', 'code': 100 }\n * ];\n *\n * _.keyBy(array, function(o) {\n *   return String.fromCharCode(o.code);\n * });\n * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n *\n * _.keyBy(array, 'dir');\n * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n */\nvar keyBy = createAggregator(function(result, value, key) {\n  baseAssignValue(result, key, value);\n});\n\nmodule.exports = keyBy;\n"],"names":["InstallWizard","AsyncView","getEndpoints","renderFormFields","options","this","state","data","missingOptions","Set","Object","keys","filter","option","field","isSet","size","fields","key","disabled","getOptionField","getForm","getInitialData","forEach","optionName","displayValue","value","getOptionDefault","undefined","getTitle","t","render","version","ConfigStore","noSuffix","title","Wrapper","Pattern","SetupWizard","Heading","Version","current","loading","renderLoading","error","renderError","renderBody","type","showIcon","apiMethod","apiEndpoint","submitLabel","initialData","onSubmitSuccess","props","onConfigured","fixedStyle","p","theme","purple200","purple300","sentryPattern","space","fontSizeExtraLarge","background","borderRadius","dropShadowHeavy","zIndex","initial","sections","heading","definitions","label","placeholder","help","defaultValue","document","location","protocol","host","component","EmailField","email","BooleanField","RadioBooleanField","noLabel","yesLabel","yesFirst","tct","link","href","hostname","definitionsMap","keyBy","def","disabledReasons","diskPriority","smtpDisabled","getOption","meta","optionsForSection","section","split","Field","TextField","name","required","allowEmpty","disabledReason","getSectionFieldSet","fieldMap","sets","set","push","length","AsyncComponent","renderComponent","baseAssignValue","createAggregator","result","module","exports"],"sourceRoot":""}