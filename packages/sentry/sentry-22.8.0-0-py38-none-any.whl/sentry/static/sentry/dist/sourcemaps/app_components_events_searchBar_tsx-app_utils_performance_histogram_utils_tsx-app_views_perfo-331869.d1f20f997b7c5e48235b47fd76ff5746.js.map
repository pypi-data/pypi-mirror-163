{"version":3,"file":"chunks/app_components_events_searchBar_tsx-app_utils_performance_histogram_utils_tsx-app_views_perfo-331869.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/events/searchBar.tsx","webpack:///./app/utils/measurements/measurements.tsx","webpack:///./app/utils/performance/histogram/utils.tsx","webpack:///./app/utils/performance/urls.ts","webpack:///./app/utils/withTags.tsx","webpack:///./app/views/performance/transactionSummary/transactionEvents/utils.tsx","webpack:///./app/views/performance/transactionSummary/transactionThresholdModal.tsx","webpack:///./app/views/performance/transactionSummary/utils.tsx"],"sourcesContent":["import {useEffect} from 'react';\nimport assign from 'lodash/assign';\nimport flatten from 'lodash/flatten';\nimport memoize from 'lodash/memoize';\nimport omit from 'lodash/omit';\n\nimport {fetchTagValues} from 'sentry/actionCreators/tags';\nimport SmartSearchBar from 'sentry/components/smartSearchBar';\nimport {NEGATION_OPERATOR, SEARCH_WILDCARD} from 'sentry/constants';\nimport {Organization, SavedSearchType, Tag, TagCollection} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {\n  Field,\n  FIELD_TAGS,\n  isAggregateField,\n  isEquation,\n  isMeasurement,\n  SEMVER_TAGS,\n  SPAN_OP_BREAKDOWN_FIELDS,\n  TRACING_FIELDS,\n} from 'sentry/utils/discover/fields';\nimport {FieldKey, FieldKind} from 'sentry/utils/fields';\nimport Measurements from 'sentry/utils/measurements/measurements';\nimport useApi from 'sentry/utils/useApi';\nimport withTags from 'sentry/utils/withTags';\n\nconst SEARCH_SPECIAL_CHARS_REGEXP = new RegExp(\n  `^${NEGATION_OPERATOR}|\\\\${SEARCH_WILDCARD}`,\n  'g'\n);\n\nconst getFunctionTags = (fields: Readonly<Field[]>) =>\n  Object.fromEntries(\n    fields\n      .filter(\n        item => !Object.keys(FIELD_TAGS).includes(item.field) && !isEquation(item.field)\n      )\n      .map(item => [\n        item.field,\n        {key: item.field, name: item.field, kind: FieldKind.FUNCTION},\n      ])\n  );\n\nconst getFieldTags = () =>\n  Object.fromEntries(\n    Object.keys(FIELD_TAGS).map(key => [\n      key,\n      {\n        ...FIELD_TAGS[key],\n        kind: FieldKind.FIELD,\n      },\n    ])\n  );\n\nconst getMeasurementTags = (\n  measurements: Parameters<\n    React.ComponentProps<typeof Measurements>['children']\n  >[0]['measurements']\n) =>\n  Object.fromEntries(\n    Object.keys(measurements).map(key => [\n      key,\n      {\n        ...measurements[key],\n        kind: FieldKind.MEASUREMENT,\n      },\n    ])\n  );\n\nconst getSpanTags = () => {\n  return Object.fromEntries(\n    SPAN_OP_BREAKDOWN_FIELDS.map(key => [key, {key, name: key, kind: FieldKind.METRICS}])\n  );\n};\n\nconst getSemverTags = () =>\n  Object.fromEntries(\n    Object.keys(SEMVER_TAGS).map(key => [\n      key,\n      {\n        ...SEMVER_TAGS[key],\n        kind: FieldKind.FIELD,\n      },\n    ])\n  );\n\nexport type SearchBarProps = Omit<React.ComponentProps<typeof SmartSearchBar>, 'tags'> & {\n  organization: Organization;\n  tags: TagCollection;\n  fields?: Readonly<Field[]>;\n  includeSessionTagsValues?: boolean;\n  /**\n   * Used to define the max height of the menu in px.\n   */\n  maxMenuHeight?: number;\n  maxSearchItems?: React.ComponentProps<typeof SmartSearchBar>['maxSearchItems'];\n  omitTags?: string[];\n  projectIds?: number[] | Readonly<number[]>;\n};\n\nfunction SearchBar(props: SearchBarProps) {\n  const {\n    maxSearchItems,\n    organization,\n    tags,\n    omitTags,\n    fields,\n    projectIds,\n    includeSessionTagsValues,\n    maxMenuHeight,\n  } = props;\n\n  const api = useApi();\n\n  useEffect(() => {\n    // Clear memoized data on mount to make tests more consistent.\n    getEventFieldValues.cache.clear?.();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [projectIds]);\n\n  // Returns array of tag values that substring match `query`; invokes `callback`\n  // with data when ready\n  const getEventFieldValues = memoize(\n    (tag, query, endpointParams): Promise<string[]> => {\n      const projectIdStrings = (projectIds as Readonly<number>[])?.map(String);\n\n      if (isAggregateField(tag.key) || isMeasurement(tag.key)) {\n        // We can't really auto suggest values for aggregate fields\n        // or measurements, so we simply don't\n        return Promise.resolve([]);\n      }\n\n      return fetchTagValues(\n        api,\n        organization.slug,\n        tag.key,\n        query,\n        projectIdStrings,\n        endpointParams,\n\n        // allows searching for tags on transactions as well\n        true,\n\n        // allows searching for tags on sessions as well\n        includeSessionTagsValues\n      ).then(\n        results =>\n          flatten(results.filter(({name}) => defined(name)).map(({name}) => name)),\n        () => {\n          throw new Error('Unable to fetch event field values');\n        }\n      );\n    },\n    ({key}, query) => `${key}-${query}`\n  );\n\n  const getTagList = (\n    measurements: Parameters<\n      React.ComponentProps<typeof Measurements>['children']\n    >[0]['measurements']\n  ) => {\n    const functionTags = getFunctionTags(fields ?? []);\n    const fieldTags = getFieldTags();\n    const measurementsWithKind = getMeasurementTags(measurements);\n    const spanTags = getSpanTags();\n    const semverTags = getSemverTags();\n\n    const orgHasPerformanceView = organization.features.includes('performance-view');\n\n    const combinedTags: Record<string, Tag> = orgHasPerformanceView\n      ? Object.assign({}, measurementsWithKind, spanTags, fieldTags, functionTags)\n      : omit(fieldTags, TRACING_FIELDS);\n\n    const tagsWithKind = Object.fromEntries(\n      Object.keys(tags).map(key => [\n        key,\n        {\n          ...tags[key],\n          kind: FieldKind.TAG,\n        },\n      ])\n    );\n\n    assign(combinedTags, tagsWithKind, fieldTags, semverTags);\n\n    const sortedTagKeys = Object.keys(combinedTags);\n    sortedTagKeys.sort((a, b) => {\n      return a.toLowerCase().localeCompare(b.toLowerCase());\n    });\n\n    combinedTags.has = {\n      key: FieldKey.HAS,\n      name: 'Has property',\n      values: sortedTagKeys,\n      predefined: true,\n      kind: FieldKind.FIELD,\n    };\n\n    return omit(combinedTags, omitTags ?? []);\n  };\n\n  return (\n    <Measurements>\n      {({measurements}) => (\n        <SmartSearchBar\n          hasRecentSearches\n          savedSearchType={SavedSearchType.EVENT}\n          onGetTagValues={getEventFieldValues}\n          supportedTags={getTagList(measurements)}\n          prepareQuery={query => {\n            // Prepare query string (e.g. strip special characters like negation operator)\n            return query.replace(SEARCH_SPECIAL_CHARS_REGEXP, '');\n          }}\n          maxSearchItems={maxSearchItems}\n          excludeEnvironment\n          maxMenuHeight={maxMenuHeight ?? 300}\n          {...props}\n        />\n      )}\n    </Measurements>\n  );\n}\n\nexport default withTags(SearchBar);\n","import {Fragment} from 'react';\n\nimport {\n  MOBILE_VITAL_DETAILS,\n  WEB_VITAL_DETAILS,\n} from 'sentry/utils/performance/vitals/constants';\nimport {Vital} from 'sentry/utils/performance/vitals/types';\n\nimport {MobileVital, WebVital} from '../fields';\n\nexport type Measurement = {\n  key: string;\n  name: string;\n};\n\nexport type MeasurementCollection = Record<string, Measurement>;\n\ntype VitalType = WebVital | MobileVital;\n\nfunction measurementsFromDetails(\n  details: Partial<Record<VitalType, Vital>>\n): MeasurementCollection {\n  return Object.fromEntries(\n    Object.entries(details).map(([key, value]) => {\n      const newValue: Measurement = {\n        name: value.name,\n        key,\n      };\n      return [key, newValue];\n    })\n  );\n}\n\nconst MOBILE_MEASUREMENTS = measurementsFromDetails(MOBILE_VITAL_DETAILS);\nconst WEB_MEASUREMENTS = measurementsFromDetails(WEB_VITAL_DETAILS);\n\nexport function getMeasurements() {\n  return {...WEB_MEASUREMENTS, ...MOBILE_MEASUREMENTS};\n}\n\ntype ChildrenProps = {\n  measurements: MeasurementCollection;\n};\n\ntype Props = {\n  children: (props: ChildrenProps) => React.ReactNode;\n};\n\nfunction Measurements({children}: Props) {\n  const measurements = getMeasurements();\n  return <Fragment>{children({measurements})}</Fragment>;\n}\n\nexport default Measurements;\n","import {ColumnType} from 'sentry/utils/discover/fields';\nimport {getDuration} from 'sentry/utils/formatters';\n\nimport {HistogramData} from './types';\n\nexport function getBucketWidth(data: HistogramData) {\n  // We can assume that all buckets are of equal width, use the first two\n  // buckets to get the width. The value of each histogram function indicates\n  // the beginning of the bucket.\n  return data.length >= 2 ? data[1].bin - data[0].bin : 0;\n}\n\nexport function computeBuckets(data: HistogramData) {\n  const width = getBucketWidth(data);\n\n  return data.map(item => {\n    const bucket = item.bin;\n    return {\n      start: bucket,\n      end: bucket + width,\n    };\n  });\n}\n\nexport function formatHistogramData(\n  data: HistogramData,\n  {\n    precision,\n    type,\n    additionalFieldsFn,\n  }: {\n    additionalFieldsFn?: any;\n    precision?: number;\n    type?: ColumnType;\n  } = {}\n) {\n  const formatter = (value: number): string => {\n    switch (type) {\n      case 'duration':\n        const decimalPlaces = precision ?? (value < 1000 ? 0 : 3);\n        return getDuration(value / 1000, decimalPlaces, true);\n      case 'number':\n        // This is trying to avoid some of potential rounding errors that cause bins\n        // have the same label, if the number of bins doesn't visually match what is\n        // expected, check that this rounding is correct. If this issue persists,\n        // consider formatting the bin as a string in the response\n        const factor = 10 ** (precision ?? 0);\n        return (Math.round((value + Number.EPSILON) * factor) / factor).toLocaleString();\n      default:\n        throw new Error(`Unable to format type: ${type}`);\n    }\n  };\n  return data.map(item => {\n    return {\n      value: item.count,\n      name: formatter(item.bin),\n      ...(additionalFieldsFn?.(item.bin) ?? {}),\n    };\n  });\n}\n","import {LocationDescriptor, Query} from 'history';\n\nimport {spanTargetHash} from 'sentry/components/events/interfaces/spans/utils';\nimport {Organization} from 'sentry/types';\nimport {defined} from 'sentry/utils';\n\nexport function getTransactionDetailsUrl(\n  orgSlug: Organization['slug'],\n  eventSlug: string,\n  transaction?: string,\n  query?: Query,\n  spanId?: string\n): LocationDescriptor {\n  const locationQuery = {\n    ...(query || {}),\n    transaction,\n  };\n  if (!defined(locationQuery.transaction)) {\n    delete locationQuery.transaction;\n  }\n\n  const target = {\n    pathname: `/organizations/${orgSlug}/performance/${eventSlug}/`,\n    query: locationQuery,\n    hash: defined(spanId) ? spanTargetHash(spanId) : undefined,\n  };\n  if (!defined(target.hash)) {\n    delete target.hash;\n  }\n\n  return target;\n}\n","import {Component} from 'react';\n\nimport TagStore from 'sentry/stores/tagStore';\nimport {TagCollection} from 'sentry/types';\nimport getDisplayName from 'sentry/utils/getDisplayName';\n\ntype InjectedTagsProps = {\n  tags: TagCollection;\n};\n\ntype State = {\n  tags: TagCollection;\n};\n\n/**\n * HOC for getting *only* tags from the TagStore.\n */\nfunction withTags<P extends InjectedTagsProps>(WrappedComponent: React.ComponentType<P>) {\n  class WithTags extends Component<Omit<P, keyof InjectedTagsProps>, State> {\n    static displayName = `withTags(${getDisplayName(WrappedComponent)})`;\n\n    state: State = {\n      tags: TagStore.getStateTags(),\n    };\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    unsubscribe = TagStore.listen(\n      (tags: TagCollection) => this.setState({tags}),\n      undefined\n    );\n\n    render() {\n      const {tags, ...props} = this.props as P;\n      return <WrappedComponent {...({tags: tags ?? this.state.tags, ...props} as P)} />;\n    }\n  }\n\n  return WithTags;\n}\n\nexport default withTags;\n","import {Location, Query} from 'history';\n\nimport {t} from 'sentry/locale';\nimport {decodeScalar} from 'sentry/utils/queryString';\n\nimport {filterToField, SpanOperationBreakdownFilter} from '../filter';\nimport {TransactionFilterOptions} from '../utils';\n\nexport enum EventsDisplayFilterName {\n  p50 = 'p50',\n  p75 = 'p75',\n  p95 = 'p95',\n  p99 = 'p99',\n  p100 = 'p100',\n}\n\nexport type EventsDisplayFilter = {\n  label: string;\n  name: EventsDisplayFilterName;\n  query?: string[][];\n  sort?: {field: string; kind: 'desc' | 'asc'};\n};\n\nexport type EventsFilterOptions = {\n  [name in EventsDisplayFilterName]: EventsDisplayFilter;\n};\n\nexport type EventsFilterPercentileValues = {\n  [name in Exclude<EventsDisplayFilterName, EventsDisplayFilterName.p100>]: number;\n};\n\nexport function getEventsFilterOptions(\n  spanOperationBreakdownFilter: SpanOperationBreakdownFilter,\n  percentileValues?: EventsFilterPercentileValues\n): EventsFilterOptions {\n  const {p99, p95, p75, p50} = percentileValues\n    ? percentileValues\n    : {p99: 0, p95: 0, p75: 0, p50: 0};\n  return {\n    [EventsDisplayFilterName.p50]: {\n      name: EventsDisplayFilterName.p50,\n      query: p50 ? [['transaction.duration', `<=${p50.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p50'),\n    },\n    [EventsDisplayFilterName.p75]: {\n      name: EventsDisplayFilterName.p75,\n      query: p75 ? [['transaction.duration', `<=${p75.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p75'),\n    },\n    [EventsDisplayFilterName.p95]: {\n      name: EventsDisplayFilterName.p95,\n      query: p95 ? [['transaction.duration', `<=${p95.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p95'),\n    },\n    [EventsDisplayFilterName.p99]: {\n      name: EventsDisplayFilterName.p99,\n      query: p99 ? [['transaction.duration', `<=${p99.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p99'),\n    },\n    [EventsDisplayFilterName.p100]: {\n      name: EventsDisplayFilterName.p100,\n      label: t('p100'),\n    },\n  };\n}\n\nexport function eventsRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n}: {\n  orgSlug: string;\n  query: Query;\n  transaction: string;\n  projectID?: string | string[];\n}) {\n  const pathname = `/organizations/${orgSlug}/performance/summary/events/`;\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n    },\n  };\n}\n\nfunction stringToFilter(option: string) {\n  if (\n    Object.values(EventsDisplayFilterName).includes(option as EventsDisplayFilterName)\n  ) {\n    return option as EventsDisplayFilterName;\n  }\n\n  return EventsDisplayFilterName.p100;\n}\nexport function decodeEventsDisplayFilterFromLocation(location: Location) {\n  return stringToFilter(\n    decodeScalar(location.query.showTransactions, EventsDisplayFilterName.p100)\n  );\n}\n\nexport function filterEventsDisplayToLocationQuery(\n  option: EventsDisplayFilterName,\n  spanOperationBreakdownFilter: SpanOperationBreakdownFilter\n) {\n  const eventsFilterOptions = getEventsFilterOptions(spanOperationBreakdownFilter);\n  const kind = eventsFilterOptions[option].sort?.kind;\n  const field = eventsFilterOptions[option].sort?.field;\n\n  const query: {showTransactions: string; sort?: string} = {\n    showTransactions: option,\n  };\n  if (kind && field) {\n    query.sort = `${kind === 'desc' ? '-' : ''}${field}`;\n  }\n  return query;\n}\n\nexport function mapShowTransactionToPercentile(\n  showTransaction\n): EventsDisplayFilterName | undefined {\n  switch (showTransaction) {\n    case TransactionFilterOptions.OUTLIER:\n      return EventsDisplayFilterName.p100;\n    case TransactionFilterOptions.SLOW:\n      return EventsDisplayFilterName.p95;\n    default:\n      return undefined;\n  }\n}\n","import {Component, Fragment} from 'react';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport cloneDeep from 'lodash/cloneDeep';\nimport set from 'lodash/set';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport {Client} from 'sentry/api';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport Field from 'sentry/components/forms/field';\nimport SelectControl from 'sentry/components/forms/selectControl';\nimport Input from 'sentry/components/input';\nimport Link from 'sentry/components/links/link';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport EventView from 'sentry/utils/discover/eventView';\nimport withApi from 'sentry/utils/withApi';\nimport withProjects from 'sentry/utils/withProjects';\n\nimport {transactionSummaryRouteWithQuery} from './utils';\n\nexport enum TransactionThresholdMetric {\n  TRANSACTION_DURATION = 'duration',\n  LARGEST_CONTENTFUL_PAINT = 'lcp',\n}\n\nexport const METRIC_CHOICES = [\n  {label: t('Transaction Duration'), value: 'duration'},\n  {label: t('Largest Contentful Paint'), value: 'lcp'},\n];\n\ntype Props = {\n  api: Client;\n  eventView: EventView;\n  organization: Organization;\n  projects: Project[];\n  transactionName: string;\n  transactionThreshold: number | undefined;\n  transactionThresholdMetric: TransactionThresholdMetric | undefined;\n  onApply?: (threshold, metric) => void;\n  project?: string;\n} & ModalRenderProps;\n\ntype State = {\n  error: string | null;\n  metric: TransactionThresholdMetric | undefined;\n  threshold: number | undefined;\n};\n\nclass TransactionThresholdModal extends Component<Props, State> {\n  state: State = {\n    threshold: this.props.transactionThreshold,\n    metric: this.props.transactionThresholdMetric,\n    error: null,\n  };\n\n  getProject() {\n    const {projects, eventView, project} = this.props;\n\n    if (defined(project)) {\n      return projects.find(proj => proj.id === project);\n    }\n    const projectId = String(eventView.project[0]);\n    return projects.find(proj => proj.id === projectId);\n  }\n\n  handleApply = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const {api, closeModal, organization, transactionName, onApply} = this.props;\n\n    const project = this.getProject();\n    if (!defined(project)) {\n      return;\n    }\n\n    const transactionThresholdUrl = `/organizations/${organization.slug}/project-transaction-threshold-override/`;\n\n    api\n      .requestPromise(transactionThresholdUrl, {\n        method: 'POST',\n        includeAllArgs: true,\n        query: {\n          project: project.id,\n        },\n        data: {\n          transaction: transactionName,\n          threshold: this.state.threshold,\n          metric: this.state.metric,\n        },\n      })\n      .then(() => {\n        closeModal();\n        if (onApply) {\n          onApply(this.state.threshold, this.state.metric);\n        }\n      })\n      .catch(err => {\n        this.setState({\n          error: err,\n        });\n        const errorMessage =\n          err.responseJSON?.threshold ?? err.responseJSON?.non_field_errors ?? null;\n        addErrorMessage(errorMessage);\n      });\n  };\n\n  handleFieldChange = (field: string) => (value: string) => {\n    this.setState(prevState => {\n      const newState = cloneDeep(prevState);\n      set(newState, field, value);\n\n      return {...newState, errors: undefined};\n    });\n  };\n\n  handleReset = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const {api, closeModal, organization, transactionName, onApply} = this.props;\n\n    const project = this.getProject();\n    if (!defined(project)) {\n      return;\n    }\n\n    const transactionThresholdUrl = `/organizations/${organization.slug}/project-transaction-threshold-override/`;\n\n    api\n      .requestPromise(transactionThresholdUrl, {\n        method: 'DELETE',\n        includeAllArgs: true,\n        query: {\n          project: project.id,\n        },\n        data: {\n          transaction: transactionName,\n        },\n      })\n      .then(() => {\n        const projectThresholdUrl = `/projects/${organization.slug}/${project.slug}/transaction-threshold/configure/`;\n        this.props.api\n          .requestPromise(projectThresholdUrl, {\n            method: 'GET',\n            includeAllArgs: true,\n            query: {\n              project: project.id,\n            },\n          })\n          .then(([data]) => {\n            this.setState({\n              threshold: data.threshold,\n              metric: data.metric,\n            });\n            closeModal();\n            if (onApply) {\n              onApply(this.state.threshold, this.state.metric);\n            }\n          })\n          .catch(err => {\n            const errorMessage = err.responseJSON?.threshold ?? null;\n            addErrorMessage(errorMessage);\n          });\n      })\n      .catch(err => {\n        this.setState({\n          error: err,\n        });\n      });\n  };\n\n  renderModalFields() {\n    return (\n      <Fragment>\n        <Field\n          data-test-id=\"response-metric\"\n          label={t('Calculation Method')}\n          inline={false}\n          help={t(\n            'This determines which duration metric is used for the Response Time Threshold.'\n          )}\n          showHelpInTooltip\n          flexibleControlStateSize\n          stacked\n          required\n        >\n          <SelectControl\n            required\n            options={METRIC_CHOICES.slice()}\n            name=\"responseMetric\"\n            label={t('Calculation Method')}\n            value={this.state.metric}\n            onChange={(option: {label: string; value: string}) => {\n              this.handleFieldChange('metric')(option.value);\n            }}\n          />\n        </Field>\n        <Field\n          data-test-id=\"response-time-threshold\"\n          label={t('Response Time Threshold (ms)')}\n          inline={false}\n          help={t(\n            'The satisfactory response time for the calculation method defined above. This is used to calculate Apdex and User Misery scores.'\n          )}\n          showHelpInTooltip\n          flexibleControlStateSize\n          stacked\n          required\n        >\n          <Input\n            type=\"number\"\n            name=\"threshold\"\n            required\n            pattern=\"[0-9]*(\\.[0-9]*)?\"\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n              this.handleFieldChange('threshold')(event.target.value);\n            }}\n            value={this.state.threshold}\n            step={100}\n            min={100}\n          />\n        </Field>\n      </Fragment>\n    );\n  }\n\n  render() {\n    const {Header, Body, Footer, organization, transactionName, eventView} = this.props;\n\n    const project = this.getProject();\n\n    const summaryView = eventView.clone();\n    summaryView.query = summaryView.getQueryWithAdditionalConditions();\n    const target = transactionSummaryRouteWithQuery({\n      orgSlug: organization.slug,\n      transaction: transactionName,\n      query: summaryView.generateQueryStringObject(),\n      projectID: project?.id,\n    });\n\n    return (\n      <Fragment>\n        <Header closeButton>\n          <h4>{t('Transaction Settings')}</h4>\n        </Header>\n        <Body>\n          <Instruction>\n            {tct(\n              'The changes below will only be applied to [transaction]. To set it at a more global level, go to [projectSettings: Project Settings].',\n              {\n                transaction: <Link to={target}>{transactionName}</Link>,\n                projectSettings: (\n                  <Link\n                    to={`/settings/${organization.slug}/projects/${project?.slug}/performance/`}\n                  />\n                ),\n              }\n            )}\n          </Instruction>\n          {this.renderModalFields()}\n        </Body>\n        <Footer>\n          <ButtonBar gap={1}>\n            <Button\n              priority=\"default\"\n              onClick={this.handleReset}\n              data-test-id=\"reset-all\"\n            >\n              {t('Reset All')}\n            </Button>\n            <Button\n              aria-label={t('Apply')}\n              priority=\"primary\"\n              onClick={this.handleApply}\n              data-test-id=\"apply-threshold\"\n            >\n              {t('Apply')}\n            </Button>\n          </ButtonBar>\n        </Footer>\n      </Fragment>\n    );\n  }\n}\n\nconst Instruction = styled('div')`\n  margin-bottom: ${space(4)};\n`;\n\nexport const modalCss = css`\n  width: 100%;\n  max-width: 650px;\n  margin: 70px auto;\n`;\n\nexport default withApi(withProjects(TransactionThresholdModal));\n","import styled from '@emotion/styled';\nimport {LocationDescriptor, Query} from 'history';\n\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {TableDataRow} from 'sentry/utils/discover/discoverQuery';\nimport {generateEventSlug} from 'sentry/utils/discover/urls';\nimport {getTransactionDetailsUrl} from 'sentry/utils/performance/urls';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport {getTraceDetailsUrl} from 'sentry/views/performance/traceDetails/utils';\n\nimport {DisplayModes} from './transactionOverview/charts';\n\nexport enum TransactionFilterOptions {\n  FASTEST = 'fastest',\n  SLOW = 'slow',\n  OUTLIER = 'outlier',\n  RECENT = 'recent',\n}\n\nexport function generateTransactionSummaryRoute({orgSlug}: {orgSlug: String}): string {\n  return `/organizations/${orgSlug}/performance/summary/`;\n}\n\n// normalizes search conditions by removing any redundant search conditions before presenting them in:\n// - query strings\n// - search UI\nexport function normalizeSearchConditions(query: string): MutableSearch {\n  const filterParams = normalizeSearchConditionsWithTransactionName(query);\n\n  // no need to include transaction as its already in the query params\n  filterParams.removeFilter('transaction');\n\n  return filterParams;\n}\n\n// normalizes search conditions by removing any redundant search conditions, but retains any transaction name\nexport function normalizeSearchConditionsWithTransactionName(\n  query: string\n): MutableSearch {\n  const filterParams = new MutableSearch(query);\n\n  // remove any event.type queries since it is implied to apply to only transactions\n  filterParams.removeFilter('event.type');\n\n  return filterParams;\n}\n\nexport function transactionSummaryRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n  unselectedSeries = 'p100()',\n  display,\n  trendFunction,\n  trendColumn,\n  showTransactions,\n  additionalQuery,\n}: {\n  orgSlug: string;\n  query: Query;\n  transaction: string;\n  additionalQuery?: Record<string, string>;\n  display?: DisplayModes;\n  projectID?: string | string[];\n  showTransactions?: TransactionFilterOptions;\n  trendColumn?: string;\n  trendFunction?: string;\n  unselectedSeries?: string | string[];\n}) {\n  const pathname = generateTransactionSummaryRoute({\n    orgSlug,\n  });\n\n  let searchFilter: typeof query.query;\n  if (typeof query.query === 'string') {\n    searchFilter = normalizeSearchConditions(query.query).formatString();\n  } else {\n    searchFilter = query.query;\n  }\n\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: searchFilter,\n      unselectedSeries,\n      showTransactions,\n      display,\n      trendFunction,\n      trendColumn,\n      ...additionalQuery,\n    },\n  };\n}\n\nexport function generateTraceLink(dateSelection) {\n  return (\n    organization: Organization,\n    tableRow: TableDataRow,\n    _query: Query\n  ): LocationDescriptor => {\n    const traceId = `${tableRow.trace}`;\n    if (!traceId) {\n      return {};\n    }\n\n    return getTraceDetailsUrl(organization, traceId, dateSelection, {});\n  };\n}\n\nexport function generateTransactionLink(transactionName: string) {\n  return (\n    organization: Organization,\n    tableRow: TableDataRow,\n    query: Query,\n    spanId?: string\n  ): LocationDescriptor => {\n    const eventSlug = generateEventSlug(tableRow);\n    return getTransactionDetailsUrl(\n      organization.slug,\n      eventSlug,\n      transactionName,\n      query,\n      spanId\n    );\n  };\n}\n\nexport const SidebarSpacer = styled('div')`\n  margin-top: ${space(3)};\n`;\n"],"names":["SEARCH_SPECIAL_CHARS_REGEXP","RegExp","NEGATION_OPERATOR","SEARCH_WILDCARD","SearchBar","props","maxSearchItems","organization","tags","omitTags","fields","projectIds","includeSessionTagsValues","maxMenuHeight","api","useApi","useEffect","getEventFieldValues","cache","clear","memoize","tag","query","endpointParams","projectIdStrings","map","String","isAggregateField","key","isMeasurement","Promise","resolve","fetchTagValues","slug","then","results","flatten","filter","name","defined","Error","getTagList","measurements","functionTags","Object","fromEntries","item","keys","FIELD_TAGS","includes","field","isEquation","kind","FieldKind","getFunctionTags","fieldTags","measurementsWithKind","getMeasurementTags","spanTags","SPAN_OP_BREAKDOWN_FIELDS","semverTags","SEMVER_TAGS","combinedTags","features","assign","omit","TRACING_FIELDS","tagsWithKind","sortedTagKeys","sort","a","b","toLowerCase","localeCompare","has","FieldKey","values","predefined","hasRecentSearches","savedSearchType","SavedSearchType","onGetTagValues","supportedTags","prepareQuery","replace","excludeEnvironment","withTags","measurementsFromDetails","details","entries","value","MOBILE_MEASUREMENTS","MOBILE_VITAL_DETAILS","WEB_MEASUREMENTS","WEB_VITAL_DETAILS","getMeasurements","Measurements","children","Fragment","getBucketWidth","data","length","bin","computeBuckets","width","bucket","start","end","formatHistogramData","precision","type","additionalFieldsFn","formatter","decimalPlaces","getDuration","factor","Math","round","Number","EPSILON","toLocaleString","count","getTransactionDetailsUrl","orgSlug","eventSlug","transaction","spanId","locationQuery","target","pathname","hash","spanTargetHash","undefined","WrappedComponent","WithTags","Component","TagStore","this","setState","componentWillUnmount","unsubscribe","render","state","getDisplayName","EventsDisplayFilterName","getEventsFilterOptions","spanOperationBreakdownFilter","percentileValues","p99","p95","p75","p50","toFixed","filterToField","label","t","p100","eventsRouteWithQuery","projectID","project","environment","statsPeriod","decodeEventsDisplayFilterFromLocation","location","option","decodeScalar","showTransactions","filterEventsDisplayToLocationQuery","eventsFilterOptions","mapShowTransactionToPercentile","showTransaction","TransactionFilterOptions","TransactionThresholdMetric","METRIC_CHOICES","TransactionThresholdModal","threshold","transactionThreshold","metric","transactionThresholdMetric","error","event","preventDefault","closeModal","transactionName","onApply","getProject","transactionThresholdUrl","requestPromise","method","includeAllArgs","id","catch","err","errorMessage","responseJSON","non_field_errors","addErrorMessage","prevState","newState","cloneDeep","set","errors","projectThresholdUrl","projects","eventView","find","proj","projectId","renderModalFields","inline","help","showHelpInTooltip","flexibleControlStateSize","stacked","required","options","slice","onChange","handleFieldChange","pattern","step","min","Header","Body","Footer","summaryView","clone","getQueryWithAdditionalConditions","transactionSummaryRouteWithQuery","generateQueryStringObject","closeButton","Instruction","tct","to","projectSettings","gap","priority","onClick","handleReset","handleApply","space","modalCss","withApi","withProjects","normalizeSearchConditions","filterParams","normalizeSearchConditionsWithTransactionName","removeFilter","MutableSearch","unselectedSeries","display","trendFunction","trendColumn","additionalQuery","generateTransactionSummaryRoute","searchFilter","formatString","generateTraceLink","dateSelection","tableRow","_query","traceId","trace","getTraceDetailsUrl","generateTransactionLink","generateEventSlug","SidebarSpacer"],"sourceRoot":""}