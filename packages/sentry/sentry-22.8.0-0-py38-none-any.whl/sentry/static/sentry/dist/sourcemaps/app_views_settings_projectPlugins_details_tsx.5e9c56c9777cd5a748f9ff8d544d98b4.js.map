{"version":3,"file":"chunks/app_views_settings_projectPlugins_details_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/stores/pluginsStore.tsx","webpack:///./app/utils/withPlugins.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/projectPlugins/details.tsx"],"sourcesContent":["import {createStore, StoreDefinition} from 'reflux';\n\nimport PluginActions from 'sentry/actions/pluginActions';\nimport {Plugin} from 'sentry/types';\nimport {makeSafeRefluxStore} from 'sentry/utils/makeSafeRefluxStore';\n\ninterface PluginStoreDefinition extends StoreDefinition {\n  plugins: Map<string, Plugin> | null;\n  state: {\n    error: Error | null;\n    loading: boolean;\n    pageLinks: string | null;\n    plugins: Plugin[];\n  };\n  updating: Map<string, Plugin>;\n}\n\nconst defaultState = {\n  loading: true,\n  plugins: [],\n  error: null,\n  pageLinks: null,\n};\n\nconst storeConfig: PluginStoreDefinition = {\n  plugins: null,\n  state: {...defaultState},\n  updating: new Map(),\n  unsubscribeListeners: [],\n\n  reset() {\n    // reset our state\n    this.plugins = null;\n    this.state = {...defaultState};\n    this.updating = new Map();\n    return this.state;\n  },\n\n  getInitialState() {\n    return this.getState();\n  },\n\n  getState() {\n    const {plugins: _plugins, ...state} = this.state;\n\n    return {\n      ...state,\n      plugins: this.plugins ? Array.from(this.plugins.values()) : [],\n    };\n  },\n\n  init() {\n    this.reset();\n    this.unsubscribeListeners.push(\n      this.listenTo(PluginActions.fetchAll, this.onFetchAll)\n    );\n    this.unsubscribeListeners.push(\n      this.listenTo(PluginActions.fetchAllSuccess, this.onFetchAllSuccess)\n    );\n    this.unsubscribeListeners.push(\n      this.listenTo(PluginActions.fetchAllError, this.onFetchAllError)\n    );\n    this.unsubscribeListeners.push(this.listenTo(PluginActions.update, this.onUpdate));\n    this.unsubscribeListeners.push(\n      this.listenTo(PluginActions.updateSuccess, this.onUpdateSuccess)\n    );\n    this.unsubscribeListeners.push(\n      this.listenTo(PluginActions.updateError, this.onUpdateError)\n    );\n  },\n\n  triggerState() {\n    this.trigger(this.getState());\n  },\n\n  onFetchAll({resetLoading}: {resetLoading?: boolean} = {}) {\n    if (resetLoading) {\n      this.state.loading = true;\n      this.state.error = null;\n      this.plugins = null;\n    }\n\n    this.triggerState();\n  },\n\n  onFetchAllSuccess(data: Plugin[], {pageLinks}: {pageLinks?: string}) {\n    this.plugins = new Map(data.map(plugin => [plugin.id, plugin]));\n    this.state.pageLinks = pageLinks || null;\n    this.state.loading = false;\n    this.triggerState();\n  },\n\n  onFetchAllError(err) {\n    this.plugins = null;\n    this.state.loading = false;\n    this.state.error = err;\n    this.triggerState();\n  },\n\n  onUpdate(id: string, updateObj: Partial<Plugin>) {\n    if (!this.plugins) {\n      return;\n    }\n\n    const plugin = this.plugins.get(id);\n    if (!plugin) {\n      return;\n    }\n    const newPlugin = {\n      ...plugin,\n      ...updateObj,\n    };\n\n    this.plugins.set(id, newPlugin);\n    this.updating.set(id, plugin);\n    this.triggerState();\n  },\n\n  onUpdateSuccess(id: string, _updateObj: Partial<Plugin>) {\n    this.updating.delete(id);\n  },\n\n  onUpdateError(id: string, _updateObj: Partial<Plugin>, err) {\n    const origPlugin = this.updating.get(id);\n    if (!origPlugin || !this.plugins) {\n      return;\n    }\n\n    this.plugins.set(id, origPlugin);\n    this.updating.delete(id);\n    this.state.error = err;\n    this.triggerState();\n  },\n};\n\nconst PluginStore = createStore(makeSafeRefluxStore(storeConfig));\nexport default PluginStore;\n","import {Component} from 'react';\n\nimport {fetchPlugins} from 'sentry/actionCreators/plugins';\nimport PluginsStore from 'sentry/stores/pluginsStore';\nimport {Organization, Plugin, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport getDisplayName from 'sentry/utils/getDisplayName';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withProject from 'sentry/utils/withProject';\n\ntype WithPluginProps = {\n  organization: Organization;\n  project?: Project;\n};\n\ntype State = {\n  loading: boolean;\n  plugins: Plugin[];\n};\n\n/**\n * Higher order component that fetches list of plugins and\n * passes PluginsStore to component as `plugins`\n */\nfunction withPlugins<P extends WithPluginProps>(\n  WrappedComponent: React.ComponentType<P>\n) {\n  class WithPlugins extends Component<Omit<P, keyof 'plugins'> & WithPluginProps, State> {\n    static displayName = `withPlugins(${getDisplayName(WrappedComponent)})`;\n    state = {plugins: [], loading: true};\n\n    componentDidMount() {\n      this.fetchPlugins();\n    }\n\n    componentDidUpdate(prevProps, _prevState, prevContext) {\n      const {organization, project} = this.props;\n\n      // Only fetch plugins when a org slug or project slug has changed\n      const prevOrg = prevProps.organization || prevContext?.organization;\n      const prevProject = prevProps.project || prevContext?.project;\n\n      // If previous org/project is undefined then it means:\n      // the HoC has mounted, `fetchPlugins` has been called (via cDM), and\n      // store was updated. We don't need to fetchPlugins again (or it will cause an infinite loop)\n      //\n      // This is for the unusual case where component is mounted and receives a new org/project prop\n      // e.g. when switching projects via breadcrumbs in settings.\n      if (!defined(prevProject) || !defined(prevOrg)) {\n        return;\n      }\n\n      const isOrgSame = prevOrg.slug === organization.slug;\n      const isProjectSame = prevProject.slug === project?.slug;\n\n      // Don't do anything if org and project are the same\n      if (isOrgSame && isProjectSame) {\n        return;\n      }\n\n      this.fetchPlugins();\n    }\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    unsubscribe = PluginsStore.listen(({plugins, loading}: State) => {\n      // State is destructured as store updates contain additional keys\n      // that are not exposed by this HoC\n      this.setState({plugins, loading});\n    }, undefined);\n\n    fetchPlugins() {\n      const {organization, project} = this.props;\n\n      if (!project || !organization) {\n        return;\n      }\n\n      fetchPlugins({projectId: project.slug, orgId: organization.slug});\n    }\n\n    render() {\n      return (\n        <WrappedComponent {...(this.props as P & WithPluginProps)} plugins={this.state} />\n      );\n    }\n  }\n  return withOrganization(withProject(WithPlugins));\n}\n\nexport default withPlugins;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport {disablePlugin, enablePlugin} from 'sentry/actionCreators/plugins';\nimport Button from 'sentry/components/button';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport PluginConfig from 'sentry/components/pluginConfig';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Plugin, Project} from 'sentry/types';\nimport {trackIntegrationAnalytics} from 'sentry/utils/integrationUtil';\nimport withPlugins from 'sentry/utils/withPlugins';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\n\ntype Props = {\n  organization: Organization;\n  plugins: {\n    plugins: Plugin[];\n  };\n  project: Project;\n} & RouteComponentProps<{orgId: string; pluginId: string; projectId: string}, {}>;\n\ntype State = {\n  pluginDetails?: Plugin;\n} & AsyncView['state'];\n\n/**\n * There are currently two sources of truths for plugin details:\n *\n * 1) PluginsStore has a list of plugins, and this is where ENABLED state lives\n * 2) We fetch \"plugin details\" via API and save it to local state as `pluginDetails`.\n *    This is because \"details\" call contains form `config` and the \"list\" endpoint does not.\n *    The more correct way would be to pass `config` to PluginConfig and use plugin from\n *    PluginsStore\n */\nclass ProjectPluginDetails extends AsyncView<Props, State> {\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    super.componentDidUpdate(prevProps, prevState);\n    if (prevProps.params.pluginId !== this.props.params.pluginId) {\n      this.recordDetailsViewed();\n    }\n  }\n  componentDidMount() {\n    this.recordDetailsViewed();\n  }\n\n  recordDetailsViewed() {\n    const {pluginId} = this.props.params;\n\n    trackIntegrationAnalytics('integrations.details_viewed', {\n      integration: pluginId,\n      integration_type: 'plugin',\n      view: 'plugin_details',\n      organization: this.props.organization,\n    });\n  }\n\n  getTitle() {\n    const {plugin} = this.state;\n    if (plugin && plugin.name) {\n      return plugin.name;\n    }\n    return 'Sentry';\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {projectId, orgId, pluginId} = this.props.params;\n    return [['pluginDetails', `/projects/${orgId}/${projectId}/plugins/${pluginId}/`]];\n  }\n\n  trimSchema(value) {\n    return value.split('//')[1];\n  }\n\n  handleReset = () => {\n    const {projectId, orgId, pluginId} = this.props.params;\n\n    addLoadingMessage(t('Saving changes\\u2026'));\n    trackIntegrationAnalytics('integrations.uninstall_clicked', {\n      integration: pluginId,\n      integration_type: 'plugin',\n      view: 'plugin_details',\n      organization: this.props.organization,\n    });\n\n    this.api.request(`/projects/${orgId}/${projectId}/plugins/${pluginId}/`, {\n      method: 'POST',\n      data: {reset: true},\n      success: pluginDetails => {\n        this.setState({pluginDetails});\n        addSuccessMessage(t('Plugin was reset'));\n        trackIntegrationAnalytics('integrations.uninstall_completed', {\n          integration: pluginId,\n          integration_type: 'plugin',\n          view: 'plugin_details',\n          organization: this.props.organization,\n        });\n      },\n      error: () => {\n        addErrorMessage(t('An error occurred'));\n      },\n    });\n  };\n\n  handleEnable = () => {\n    enablePlugin(this.props.params);\n    this.analyticsChangeEnableStatus(true);\n  };\n\n  handleDisable = () => {\n    disablePlugin(this.props.params);\n    this.analyticsChangeEnableStatus(false);\n  };\n\n  analyticsChangeEnableStatus = (enabled: boolean) => {\n    const {pluginId} = this.props.params;\n    const eventKey = enabled ? 'integrations.enabled' : 'integrations.disabled';\n    trackIntegrationAnalytics(eventKey, {\n      integration: pluginId,\n      integration_type: 'plugin',\n      view: 'plugin_details',\n      organization: this.props.organization,\n    });\n  };\n\n  // Enabled state is handled via PluginsStore and not via plugins detail\n  getEnabled() {\n    const {pluginDetails} = this.state;\n    const {plugins} = this.props;\n\n    const plugin =\n      plugins &&\n      plugins.plugins &&\n      plugins.plugins.find(({slug}) => slug === this.props.params.pluginId);\n\n    return plugin ? plugin.enabled : pluginDetails && pluginDetails.enabled;\n  }\n\n  renderActions() {\n    const {pluginDetails} = this.state;\n    if (!pluginDetails) {\n      return null;\n    }\n    const enabled = this.getEnabled();\n\n    const enable = (\n      <StyledButton size=\"sm\" onClick={this.handleEnable}>\n        {t('Enable Plugin')}\n      </StyledButton>\n    );\n\n    const disable = (\n      <StyledButton size=\"sm\" priority=\"danger\" onClick={this.handleDisable}>\n        {t('Disable Plugin')}\n      </StyledButton>\n    );\n\n    const toggleEnable = enabled ? disable : enable;\n\n    return (\n      <div className=\"pull-right\">\n        {pluginDetails.canDisable && toggleEnable}\n        <Button size=\"sm\" onClick={this.handleReset}>\n          {t('Reset Configuration')}\n        </Button>\n      </div>\n    );\n  }\n\n  renderBody() {\n    const {organization, project} = this.props;\n    const {pluginDetails} = this.state;\n    if (!pluginDetails) {\n      return null;\n    }\n\n    return (\n      <div>\n        <SettingsPageHeader title={pluginDetails.name} action={this.renderActions()} />\n        <div className=\"row\">\n          <div className=\"col-md-7\">\n            <PluginConfig\n              organization={organization}\n              project={project}\n              data={pluginDetails}\n              enabled={this.getEnabled()}\n              onDisablePlugin={this.handleDisable}\n            />\n          </div>\n          <div className=\"col-md-4 col-md-offset-1\">\n            <div className=\"pluginDetails-meta\">\n              <h4>{t('Plugin Information')}</h4>\n\n              <dl className=\"flat\">\n                <dt>{t('Name')}</dt>\n                <dd>{pluginDetails.name}</dd>\n                <dt>{t('Author')}</dt>\n                <dd>{pluginDetails.author?.name}</dd>\n                {pluginDetails.author?.url && (\n                  <div>\n                    <dt>{t('URL')}</dt>\n                    <dd>\n                      <ExternalLink href={pluginDetails.author.url}>\n                        {this.trimSchema(pluginDetails.author.url)}\n                      </ExternalLink>\n                    </dd>\n                  </div>\n                )}\n                <dt>{t('Version')}</dt>\n                <dd>{pluginDetails.version}</dd>\n              </dl>\n\n              {pluginDetails.description && (\n                <div>\n                  <h4>{t('Description')}</h4>\n                  <p className=\"description\">{pluginDetails.description}</p>\n                </div>\n              )}\n\n              {pluginDetails.resourceLinks && (\n                <div>\n                  <h4>{t('Resources')}</h4>\n                  <dl className=\"flat\">\n                    {pluginDetails.resourceLinks.map(({title, url}) => (\n                      <dd key={url}>\n                        <ExternalLink href={url}>{title}</ExternalLink>\n                      </dd>\n                    ))}\n                  </dl>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport {ProjectPluginDetails};\n\nexport default withPlugins(ProjectPluginDetails);\n\nconst StyledButton = styled(Button)`\n  margin-right: ${space(0.75)};\n`;\n"],"names":["defaultState","loading","plugins","error","pageLinks","storeConfig","state","updating","Map","unsubscribeListeners","reset","this","getInitialState","getState","_plugins","Array","from","values","init","push","listenTo","PluginActions","onFetchAll","onFetchAllSuccess","onFetchAllError","onUpdate","onUpdateSuccess","onUpdateError","triggerState","trigger","resetLoading","data","map","plugin","id","err","updateObj","get","newPlugin","set","_updateObj","delete","origPlugin","createStore","makeSafeRefluxStore","WrappedComponent","WithPlugins","Component","PluginsStore","setState","undefined","componentDidMount","fetchPlugins","componentDidUpdate","prevProps","_prevState","prevContext","organization","project","props","prevOrg","prevProject","defined","isOrgSame","slug","isProjectSame","componentWillUnmount","unsubscribe","projectId","orgId","render","getDisplayName","withOrganization","withProject","AsyncView","AsyncComponent","getTitle","title","renderComponent","ProjectPluginDetails","pluginId","params","addLoadingMessage","t","trackIntegrationAnalytics","integration","integration_type","view","api","request","method","success","pluginDetails","addSuccessMessage","addErrorMessage","enablePlugin","analyticsChangeEnableStatus","disablePlugin","enabled","eventKey","prevState","super","recordDetailsViewed","name","getEndpoints","trimSchema","value","split","getEnabled","find","renderActions","enable","StyledButton","size","onClick","handleEnable","disable","priority","handleDisable","toggleEnable","className","canDisable","handleReset","renderBody","action","onDisablePlugin","author","url","href","version","description","resourceLinks","withPlugins","Button","space"],"sourceRoot":""}