{"version":3,"file":"chunks/app_views_settings_account_accountSettingsLayout_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"oqBAQA,MAAMA,EAA4B,QAAC,aAACC,GAAF,SAChC,QAAC,IAAD,CAAoBC,mBAAmBC,EAAAA,EAAAA,GAAiB,CAACF,aAAAA,OADrDD,EAAAA,YAAAA,4BAIN,U,8DCCA,MAAMI,UAA8BC,EAAAA,UAKlCC,kBACE,MAAO,CACLL,aAAcM,KAAKC,MAAMP,cAI7BQ,mBAAmBC,GACjB,MAAM,aAACT,GAAgBM,KAAKC,MACxBE,EAAUT,eAAiBA,GAO3BA,QAA+C,IAAxBA,EAAaU,SACtCC,EAAAA,EAAAA,IAAyBX,EAAaY,KAAM,CAC1CC,WAAW,EACXC,cAAc,IAKpBC,SACE,MAAM,aAACf,GAAgBM,KAAKC,MAE5B,OACE,QAAC,IAAD,IACMD,KAAKC,MACTS,iBAAkB,KAAM,QAAC,EAAD,CAA2BhB,aAAcA,IAFnE,SAIGM,KAAKC,MAAMU,YApCdd,EAAAA,YAAAA,yB,OAAAA,EAAAA,oBACuB,CACzBH,aAAckB,EAAAA,EAAAA,eAwClB,SAAeC,EAAAA,EAAAA,GAAkBhB","sources":["webpack:///./app/views/settings/account/accountSettingsNavigation.tsx","webpack:///./app/views/settings/account/accountSettingsLayout.tsx"],"sourcesContent":["import {Organization} from 'sentry/types';\nimport getConfiguration from 'sentry/views/settings/account/navigationConfiguration';\nimport SettingsNavigation from 'sentry/views/settings/components/settingsNavigation';\n\ntype Props = {\n  organization: Organization;\n};\n\nconst AccountSettingsNavigation = ({organization}: Props) => (\n  <SettingsNavigation navigationObjects={getConfiguration({organization})} />\n);\n\nexport default AccountSettingsNavigation;\n","import {Component} from 'react';\n\nimport {fetchOrganizationDetails} from 'sentry/actionCreators/organizations';\nimport SentryTypes from 'sentry/sentryTypes';\nimport {Organization} from 'sentry/types';\nimport withLatestContext from 'sentry/utils/withLatestContext';\nimport AccountSettingsNavigation from 'sentry/views/settings/account/accountSettingsNavigation';\nimport SettingsLayout from 'sentry/views/settings/components/settingsLayout';\n\ntype Props = React.ComponentProps<typeof SettingsLayout> & {\n  organization: Organization;\n};\n\nclass AccountSettingsLayout extends Component<Props> {\n  static childContextTypes = {\n    organization: SentryTypes.Organization,\n  };\n\n  getChildContext() {\n    return {\n      organization: this.props.organization,\n    };\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {organization} = this.props;\n    if (prevProps.organization === organization) {\n      return;\n    }\n\n    // if there is no org in context, SidebarDropdown uses an org from `withLatestContext`\n    // (which queries the org index endpoint instead of org details)\n    // and does not have `access` info\n    if (organization && typeof organization.access === 'undefined') {\n      fetchOrganizationDetails(organization.slug, {\n        setActive: true,\n        loadProjects: true,\n      });\n    }\n  }\n\n  render() {\n    const {organization} = this.props;\n\n    return (\n      <SettingsLayout\n        {...this.props}\n        renderNavigation={() => <AccountSettingsNavigation organization={organization} />}\n      >\n        {this.props.children}\n      </SettingsLayout>\n    );\n  }\n}\n\nexport default withLatestContext(AccountSettingsLayout);\n"],"names":["AccountSettingsNavigation","organization","navigationObjects","getConfiguration","AccountSettingsLayout","Component","getChildContext","this","props","componentDidUpdate","prevProps","access","fetchOrganizationDetails","slug","setActive","loadProjects","render","renderNavigation","children","SentryTypes","withLatestContext"],"sourceRoot":""}