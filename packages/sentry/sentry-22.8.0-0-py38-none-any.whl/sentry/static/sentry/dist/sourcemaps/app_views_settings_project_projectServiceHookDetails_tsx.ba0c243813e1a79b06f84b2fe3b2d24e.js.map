{"version":3,"file":"chunks/app_views_settings_project_projectServiceHookDetails_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/forms/controls/multipleCheckbox.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/project/projectServiceHookDetails.tsx","webpack:///./app/views/settings/project/serviceHookSettingsForm.tsx"],"sourcesContent":["import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport {Choices} from 'sentry/types';\nimport {defined} from 'sentry/utils';\n\nconst MultipleCheckboxWrapper = styled('div')`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst Label = styled('label')`\n  font-weight: normal;\n  white-space: nowrap;\n  margin-right: 10px;\n  margin-bottom: 10px;\n  width: 20%;\n`;\n\nconst CheckboxLabel = styled('span')`\n  margin-left: 3px;\n`;\n\ntype SelectedValue = (string | number)[];\n\ntype Props = {\n  choices: Choices;\n  value: (string | number)[];\n  disabled?: boolean;\n  onChange?: (value: SelectedValue, event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nclass MultipleCheckbox extends Component<Props> {\n  onChange = (selectedValue: string | number, e: React.ChangeEvent<HTMLInputElement>) => {\n    const {value, onChange} = this.props;\n    let newValue: SelectedValue = [];\n\n    if (typeof onChange !== 'function') {\n      return;\n    }\n\n    if (e.target.checked) {\n      newValue = value ? [...value, selectedValue] : [value];\n    } else {\n      newValue = value.filter(v => v !== selectedValue);\n    }\n\n    onChange(newValue, e);\n  };\n\n  render() {\n    const {disabled, choices, value} = this.props;\n\n    return (\n      <MultipleCheckboxWrapper>\n        {choices.map(([choiceValue, choiceLabel]) => (\n          <LabelContainer key={choiceValue}>\n            <Label>\n              <input\n                type=\"checkbox\"\n                value={choiceValue}\n                onChange={this.onChange.bind(this, choiceValue)}\n                disabled={disabled}\n                checked={defined(value) && value.indexOf(choiceValue) !== -1}\n              />\n              <CheckboxLabel>{choiceLabel}</CheckboxLabel>\n            </Label>\n          </LabelContainer>\n        ))}\n      </MultipleCheckboxWrapper>\n    );\n  }\n}\n\nexport default MultipleCheckbox;\n\nconst LabelContainer = styled('div')`\n  width: 100%;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    width: 50%;\n  }\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    width: 33.333%;\n  }\n  @media (min-width: ${p => p.theme.breakpoints.large}) {\n    width: 25%;\n  }\n`;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {Fragment} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'sentry/actionCreators/indicator';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport Button from 'sentry/components/button';\nimport MiniBarChart from 'sentry/components/charts/miniBarChart';\nimport ErrorBoundary from 'sentry/components/errorBoundary';\nimport Field from 'sentry/components/forms/field';\nimport TextCopyInput from 'sentry/components/forms/textCopyInput';\nimport {Panel, PanelAlert, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport {ServiceHook} from 'sentry/types';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport AsyncView from 'sentry/views/asyncView';\nimport EmptyMessage from 'sentry/views/settings/components/emptyMessage';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport ServiceHookSettingsForm from 'sentry/views/settings/project/serviceHookSettingsForm';\n\ntype Params = {hookId: string; orgId: string; projectId: string};\n\ntype StatsProps = {\n  params: Params;\n};\n\ntype StatsState = {\n  stats: {total: number; ts: number}[] | null;\n} & AsyncComponent['state'];\n\nclass HookStats extends AsyncComponent<StatsProps, StatsState> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const until = Math.floor(new Date().getTime() / 1000);\n    const since = until - 3600 * 24 * 30;\n    const {hookId, orgId, projectId} = this.props.params;\n    return [\n      [\n        'stats',\n        `/projects/${orgId}/${projectId}/hooks/${hookId}/stats/`,\n        {\n          query: {\n            since,\n            until,\n            resolution: '1d',\n          },\n        },\n      ],\n    ];\n  }\n\n  renderBody() {\n    const {stats} = this.state;\n    if (stats === null) {\n      return null;\n    }\n    let emptyStats = true;\n\n    const series = {\n      seriesName: t('Events'),\n      data: stats.map(p => {\n        if (p.total) {\n          emptyStats = false;\n        }\n        return {\n          name: p.ts * 1000,\n          value: p.total,\n        };\n      }),\n    };\n\n    return (\n      <Panel>\n        <PanelHeader>{t('Events in the last 30 days (by day)')}</PanelHeader>\n        <PanelBody withPadding>\n          {!emptyStats ? (\n            <MiniBarChart\n              isGroupedByDate\n              showTimeInTooltip\n              labelYAxisExtents\n              series={[series]}\n              height={150}\n            />\n          ) : (\n            <EmptyMessage\n              title={t('Nothing recorded in the last 30 days.')}\n              description={t('Total webhooks fired for this configuration.')}\n            />\n          )}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n\ntype Props = RouteComponentProps<Params, {}>;\ntype State = {\n  hook: ServiceHook | null;\n} & AsyncView['state'];\n\nexport default class ProjectServiceHookDetails extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {orgId, projectId, hookId} = this.props.params;\n    return [['hook', `/projects/${orgId}/${projectId}/hooks/${hookId}/`]];\n  }\n\n  onDelete = () => {\n    const {orgId, projectId, hookId} = this.props.params;\n    addLoadingMessage(t('Saving changes\\u2026'));\n    this.api.request(`/projects/${orgId}/${projectId}/hooks/${hookId}/`, {\n      method: 'DELETE',\n      success: () => {\n        clearIndicators();\n        browserHistory.push(`/settings/${orgId}/projects/${projectId}/hooks/`);\n      },\n      error: () => {\n        addErrorMessage(t('Unable to remove application. Please try again.'));\n      },\n    });\n  };\n\n  renderBody() {\n    const {orgId, projectId, hookId} = this.props.params;\n    const {hook} = this.state;\n    if (!hook) {\n      return null;\n    }\n\n    return (\n      <Fragment>\n        <SettingsPageHeader title={t('Service Hook Details')} />\n\n        <ErrorBoundary>\n          <HookStats params={this.props.params} />\n        </ErrorBoundary>\n\n        <ServiceHookSettingsForm\n          orgId={orgId}\n          projectId={projectId}\n          hookId={hookId}\n          initialData={{\n            ...hook,\n            isActive: hook.status !== 'disabled',\n          }}\n        />\n        <Panel>\n          <PanelHeader>{t('Event Validation')}</PanelHeader>\n          <PanelBody>\n            <PanelAlert type=\"info\" showIcon>\n              Sentry will send the <code>X-ServiceHook-Signature</code> header built using{' '}\n              <code>HMAC(SHA256, [secret], [payload])</code>. You should always verify\n              this signature before trusting the information provided in the webhook.\n            </PanelAlert>\n            <Field\n              label={t('Secret')}\n              flexibleControlStateSize\n              inline={false}\n              help={t('The shared secret used for generating event HMAC signatures.')}\n            >\n              <TextCopyInput>\n                {getDynamicText({\n                  value: hook.secret,\n                  fixed: 'a dynamic secret value',\n                })}\n              </TextCopyInput>\n            </Field>\n          </PanelBody>\n        </Panel>\n        <Panel>\n          <PanelHeader>{t('Delete Hook')}</PanelHeader>\n          <PanelBody>\n            <Field\n              label={t('Delete Hook')}\n              help={t('Removing this hook is immediate and permanent.')}\n            >\n              <div>\n                <Button priority=\"danger\" onClick={this.onDelete}>\n                  {t('Delete Hook')}\n                </Button>\n              </div>\n            </Field>\n          </PanelBody>\n        </Panel>\n      </Fragment>\n    );\n  }\n}\n","import {Component} from 'react';\nimport {browserHistory} from 'react-router';\n\nimport ApiForm from 'sentry/components/forms/apiForm';\nimport BooleanField from 'sentry/components/forms/booleanField';\nimport MultipleCheckbox from 'sentry/components/forms/controls/multipleCheckbox';\nimport FormField from 'sentry/components/forms/formField';\nimport TextField from 'sentry/components/forms/textField';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport {Choices, ServiceHook} from 'sentry/types';\n\nconst EVENT_CHOICES: Choices = ['event.alert', 'event.created'].map(e => [e, e]);\n\ntype Props = {\n  initialData: Partial<ServiceHook> & {isActive: boolean};\n  orgId: string;\n  projectId: string;\n  hookId?: string;\n};\n\nexport default class ServiceHookSettingsForm extends Component<Props> {\n  onSubmitSuccess = () => {\n    const {orgId, projectId} = this.props;\n    browserHistory.push(`/settings/${orgId}/projects/${projectId}/hooks/`);\n  };\n\n  render() {\n    const {initialData, orgId, projectId, hookId} = this.props;\n\n    const endpoint = hookId\n      ? `/projects/${orgId}/${projectId}/hooks/${hookId}/`\n      : `/projects/${orgId}/${projectId}/hooks/`;\n\n    return (\n      <Panel>\n        <ApiForm\n          apiMethod={hookId ? 'PUT' : 'POST'}\n          apiEndpoint={endpoint}\n          initialData={initialData}\n          onSubmitSuccess={this.onSubmitSuccess}\n          footerStyle={{\n            marginTop: 0,\n            paddingRight: 20,\n          }}\n          submitLabel={hookId ? t('Save Changes') : t('Create Hook')}\n        >\n          <PanelHeader>{t('Hook Configuration')}</PanelHeader>\n          <PanelBody>\n            <BooleanField name=\"isActive\" label={t('Active')} />\n            <TextField\n              name=\"url\"\n              label={t('URL')}\n              required\n              help={t('The URL which will receive events.')}\n            />\n            <FormField\n              name=\"events\"\n              label={t('Events')}\n              inline={false}\n              help={t('The event types you wish to subscribe to.')}\n            >\n              {({value, onChange}) => (\n                <MultipleCheckbox\n                  onChange={onChange}\n                  value={value}\n                  choices={EVENT_CHOICES}\n                />\n              )}\n            </FormField>\n          </PanelBody>\n        </ApiForm>\n      </Panel>\n    );\n  }\n}\n"],"names":["MultipleCheckboxWrapper","Label","CheckboxLabel","MultipleCheckbox","Component","selectedValue","e","value","onChange","this","props","newValue","target","checked","filter","v","render","disabled","choices","map","choiceValue","choiceLabel","LabelContainer","type","bind","defined","indexOf","p","theme","breakpoints","small","medium","large","AsyncView","AsyncComponent","getTitle","title","renderComponent","HookStats","getEndpoints","until","Math","floor","Date","getTime","since","hookId","orgId","projectId","params","query","resolution","renderBody","stats","state","emptyStats","series","seriesName","t","data","total","name","ts","withPadding","description","isGroupedByDate","showTimeInTooltip","labelYAxisExtents","height","ProjectServiceHookDetails","addLoadingMessage","api","request","method","success","clearIndicators","browserHistory","error","addErrorMessage","hook","Fragment","initialData","isActive","status","showIcon","label","flexibleControlStateSize","inline","help","getDynamicText","secret","fixed","priority","onClick","onDelete","EVENT_CHOICES","ServiceHookSettingsForm","endpoint","apiMethod","apiEndpoint","onSubmitSuccess","footerStyle","marginTop","paddingRight","submitLabel","required"],"sourceRoot":""}