{"version":3,"file":"chunks/app_components_acl_access_tsx-app_components_featureBadge_tsx-app_components_forms_textCopyIn-988e5c.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/acl/access.tsx","webpack:///./app/components/circleIndicator.tsx","webpack:///./app/components/tagDeprecated.tsx","webpack:///./app/components/featureBadge.tsx","webpack:///./app/components/forms/textCopyInput.tsx","webpack:///./app/components/truncate.tsx","webpack:///./app/utils/useOrganization.tsx","webpack:///./app/utils/withConfig.tsx","webpack:///./app/views/organizationContext.tsx"],"sourcesContent":["import {Component} from 'react';\n\nimport Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {Config, Organization, Scope} from 'sentry/types';\nimport {isRenderFunc} from 'sentry/utils/isRenderFunc';\nimport withConfig from 'sentry/utils/withConfig';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nconst DEFAULT_NO_ACCESS_MESSAGE = (\n  <Alert type=\"error\" showIcon>\n    {t('You do not have sufficient permissions to access this.')}\n  </Alert>\n);\n\n// Props that function children will get.\nexport type ChildRenderProps = {\n  hasAccess: boolean;\n  hasSuperuser: boolean;\n};\n\ntype ChildFunction = (props: ChildRenderProps) => React.ReactNode;\n\ntype DefaultProps = {\n  /**\n   * List of required access levels\n   */\n  access: Scope[];\n\n  /**\n   * Custom renderer function for \"no access\" message OR `true` to use\n   * default message. `false` will suppress message.\n   */\n  renderNoAccessMessage: ChildFunction | boolean;\n\n  /**\n   * Requires superuser\n   */\n  isSuperuser?: boolean;\n\n  /**\n   * Should the component require all access levels or just one or more.\n   */\n  requireAll?: boolean;\n};\n\nconst defaultProps: DefaultProps = {\n  renderNoAccessMessage: false,\n  isSuperuser: false,\n  requireAll: true,\n  access: [],\n};\n\ntype Props = {\n  /**\n   * Configuration from ConfigStore\n   */\n  config: Config;\n\n  /**\n   * Current Organization\n   */\n  organization: Organization;\n\n  /**\n   * Children can be a node or a function as child.\n   */\n  children?: React.ReactNode | ChildFunction;\n} & Partial<DefaultProps>;\n\n/**\n * Component to handle access restrictions.\n */\nclass Access extends Component<Props> {\n  static defaultProps = defaultProps;\n\n  render() {\n    const {\n      organization,\n      config,\n      access,\n      requireAll,\n      isSuperuser,\n      renderNoAccessMessage,\n      children,\n    } = this.props;\n\n    const {access: orgAccess} = organization || {access: []};\n    const method = requireAll ? 'every' : 'some';\n\n    const hasAccess = !access || access[method](acc => orgAccess.includes(acc));\n    const hasSuperuser = !!(config.user && config.user.isSuperuser);\n\n    const renderProps: ChildRenderProps = {\n      hasAccess,\n      hasSuperuser,\n    };\n\n    const render = hasAccess && (!isSuperuser || hasSuperuser);\n\n    if (!render && typeof renderNoAccessMessage === 'function') {\n      return renderNoAccessMessage(renderProps);\n    }\n    if (!render && renderNoAccessMessage) {\n      return DEFAULT_NO_ACCESS_MESSAGE;\n    }\n\n    if (isRenderFunc<ChildFunction>(children)) {\n      return children(renderProps);\n    }\n\n    return render ? children : null;\n  }\n}\n\nexport default withOrganization(withConfig(Access));\n","import styled from '@emotion/styled';\n\nimport {Theme} from 'sentry/utils/theme';\n\nconst defaultProps = {\n  enabled: true,\n  size: 14,\n};\n\ntype DefaultProps = Readonly<typeof defaultProps>;\n\ntype Props = {\n  color?: string;\n} & Partial<DefaultProps>;\n\nconst getBackgroundColor = (p: Props & {theme: Theme}) => {\n  if (p.color) {\n    return `background: ${p.color};`;\n  }\n\n  return `background: ${p.enabled ? p.theme.success : p.theme.error};`;\n};\n\nconst getSize = (p: Props) => `\n  height: ${p.size}px;\n  width: ${p.size}px;\n`;\n\nconst CircleIndicator = styled('div')<Props>`\n  display: inline-block;\n  position: relative;\n  border-radius: 50%;\n  ${getSize};\n  ${getBackgroundColor};\n`;\n\nCircleIndicator.defaultProps = defaultProps;\n\nexport default CircleIndicator;\n","import {cloneElement, isValidElement} from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\nimport {Theme} from 'sentry/utils/theme';\n\ntype Props = React.HTMLAttributes<HTMLDivElement> & {\n  border?: boolean;\n  icon?: string | React.ReactNode;\n  inline?: boolean;\n  priority?: keyof Theme['badge'] | keyof Theme['alert'];\n  size?: string;\n};\n\ntype StyleFuncProps = Props & {theme: Theme};\n\n/**\n * Get priority from alerts or badge styles\n */\nconst getPriority = (p: StyleFuncProps) => {\n  if (p.priority) {\n    return p.theme.alert[p.priority] ?? p.theme.badge[p.priority] ?? null;\n  }\n\n  return null;\n};\n\nconst getMarginLeft = (p: StyleFuncProps) =>\n  p.inline ? `margin-left: ${p.size === 'small' ? '0.25em' : '0.5em'};` : '';\n\nconst getBorder = (p: StyleFuncProps) =>\n  p.border ? `border: 1px solid ${getPriority(p)?.border ?? p.theme.border};` : '';\n\nconst Tag = styled(\n  ({\n    children,\n    icon,\n    inline: _inline,\n    priority: _priority,\n    size: _size,\n    border: _border,\n    ...props\n  }: Props) => (\n    <div {...props}>\n      {icon && (\n        <IconWrapper>\n          {isValidElement(icon) && cloneElement(icon, {size: 'xs'})}\n        </IconWrapper>\n      )}\n      {children}\n    </div>\n  )\n)`\n  display: inline-flex;\n  box-sizing: border-box;\n  padding: ${p => (p.size === 'small' ? '0.1em 0.4em 0.2em' : '0.35em 0.8em 0.4em')};\n  font-size: ${p => p.theme.fontSizeExtraSmall};\n  line-height: 1;\n  color: ${p => (p.priority ? p.theme.background : p.theme.textColor)};\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: middle;\n  align-items: center;\n  border-radius: ${p => (p.size === 'small' ? '0.25em' : '2em')};\n  text-transform: lowercase;\n  font-weight: ${p => (p.size === 'small' ? 'bold' : 'normal')};\n  background: ${p => getPriority(p)?.background ?? p.theme.gray100};\n  ${p => getBorder(p)};\n  ${p => getMarginLeft(p)};\n`;\n\nconst IconWrapper = styled('span')`\n  margin-right: ${space(0.5)};\n`;\n\nexport default Tag;\n","import {Fragment} from 'react';\nimport {useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport {captureException, withScope} from '@sentry/react';\nimport type {Severity} from '@sentry/types';\n\nimport CircleIndicator from 'sentry/components/circleIndicator';\nimport Tag from 'sentry/components/tagDeprecated';\nimport Tooltip from 'sentry/components/tooltip';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\n\ntype BadgeProps = {\n  type: 'alpha' | 'beta' | 'new';\n  expiresAt?: Date;\n  noTooltip?: boolean;\n  title?: string;\n  variant?: 'indicator' | 'badge';\n};\n\ntype Props = Omit<React.HTMLAttributes<HTMLDivElement>, keyof BadgeProps> & BadgeProps;\n\nconst defaultTitles = {\n  alpha: t('This feature is internal and available for QA purposes'),\n  beta: t('This feature is available for early adopters and may change'),\n  new: t('This feature is new! Try it out and let us know what you think'),\n};\n\nconst labels = {\n  alpha: t('alpha'),\n  beta: t('beta'),\n  new: t('new'),\n};\n\nfunction BaseFeatureBadge({\n  type,\n  variant = 'badge',\n  title,\n  noTooltip,\n  expiresAt,\n  ...props\n}: Props) {\n  const theme = useTheme();\n  if (expiresAt && expiresAt.valueOf() < Date.now()) {\n    // Only get 1% of events as we don't need many to know that a badge needs to be cleaned up.\n    if (Math.random() < 0.01) {\n      withScope(scope => {\n        scope.setTag('title', title);\n        scope.setTag('type', type);\n        scope.setLevel('warning' as Severity);\n        captureException(new Error('Expired Feature Badge'));\n      });\n    }\n    return null;\n  }\n\n  return (\n    <div {...props}>\n      <Tooltip title={title ?? defaultTitles[type]} disabled={noTooltip} position=\"right\">\n        <Fragment>\n          {variant === 'badge' && <StyledTag priority={type}>{labels[type]}</StyledTag>}\n          {variant === 'indicator' && (\n            <CircleIndicator color={theme.badge[type].indicatorColor} size={8} />\n          )}\n        </Fragment>\n      </Tooltip>\n    </div>\n  );\n}\n\nconst StyledTag = styled(Tag)`\n  padding: 3px ${space(0.75)};\n`;\n\nconst FeatureBadge = styled(BaseFeatureBadge)`\n  display: inline-flex;\n  align-items: center;\n  margin-left: ${space(0.75)};\n  position: relative;\n  top: -1px;\n`;\n\nexport default FeatureBadge;\n","import {Component, createRef} from 'react';\nimport {findDOMNode} from 'react-dom';\nimport styled from '@emotion/styled';\n\nimport Button from 'sentry/components/button';\nimport Clipboard from 'sentry/components/clipboard';\nimport {IconCopy} from 'sentry/icons';\nimport {inputStyles} from 'sentry/styles/input';\nimport {selectText} from 'sentry/utils/selectText';\n\nconst Wrapper = styled('div')`\n  display: flex;\n`;\n\nexport const StyledInput = styled('input')<{rtl?: boolean}>`\n  ${inputStyles};\n  background-color: ${p => p.theme.backgroundSecondary};\n  border-right-width: 0;\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n  direction: ${p => (p.rtl ? 'rtl' : 'ltr')};\n\n  &:hover,\n  &:focus {\n    background-color: ${p => p.theme.backgroundSecondary};\n    border-right-width: 0;\n  }\n`;\n\nconst OverflowContainer = styled('div')`\n  flex-grow: 1;\n  border: none;\n`;\n\nexport const StyledCopyButton = styled(Button)`\n  flex-shrink: 1;\n  border-radius: 0 0.25em 0.25em 0;\n  box-shadow: none;\n`;\n\ntype Props = {\n  /**\n   * Text to copy\n   */\n  children: string;\n  className?: string;\n  disabled?: boolean;\n  onCopy?: (value: string, event: React.MouseEvent) => void;\n  /**\n   * Always show the ending of a long overflowing text in input\n   */\n  rtl?: boolean;\n  style?: React.CSSProperties;\n};\n\nclass TextCopyInput extends Component<Props> {\n  textRef = createRef<HTMLInputElement>();\n\n  // Select text when copy button is clicked\n  handleCopyClick = (e: React.MouseEvent) => {\n    if (!this.textRef.current) {\n      return;\n    }\n\n    const {onCopy, children} = this.props;\n\n    this.handleSelectText();\n\n    onCopy?.(children, e);\n\n    e.stopPropagation();\n  };\n\n  handleSelectText = () => {\n    const {rtl} = this.props;\n\n    if (!this.textRef.current) {\n      return;\n    }\n\n    // We use findDOMNode here because `this.textRef` is not a dom node,\n    // it's a ref to AutoSelectText\n    const node = findDOMNode(this.textRef.current); // eslint-disable-line react/no-find-dom-node\n    if (!node || !(node instanceof HTMLElement)) {\n      return;\n    }\n\n    if (rtl && node instanceof HTMLInputElement) {\n      // we don't want to select the first character - \\u202A, nor the last - \\u202C\n      node.setSelectionRange(1, node.value.length - 1);\n    } else {\n      selectText(node);\n    }\n  };\n\n  render() {\n    const {className, disabled, style, children, rtl} = this.props;\n\n    /**\n     * We are using direction: rtl; to always show the ending of a long overflowing text in input.\n     *\n     * This however means that the trailing characters with BiDi class O.N. ('Other Neutrals') goes to the other side.\n     * Hello! becomes !Hello and vice versa. This is a problem for us when we want to show path in this component, because\n     * /user/local/bin becomes user/local/bin/. Wrapping in unicode characters for left-to-righ embedding solves this,\n     * however we need to be aware of them when selecting the text - we are solving that by offsetting the selectionRange.\n     */\n    const inputValue = rtl ? '\\u202A' + children + '\\u202C' : children;\n\n    return (\n      <Wrapper className={className}>\n        <OverflowContainer>\n          <StyledInput\n            readOnly\n            disabled={disabled}\n            ref={this.textRef}\n            style={style}\n            value={inputValue}\n            onClick={this.handleSelectText}\n            rtl={rtl}\n          />\n        </OverflowContainer>\n        <Clipboard hideUnsupported value={children}>\n          <StyledCopyButton\n            type=\"button\"\n            disabled={disabled}\n            onClick={this.handleCopyClick}\n          >\n            <IconCopy />\n          </StyledCopyButton>\n        </Clipboard>\n      </Wrapper>\n    );\n  }\n}\n\nexport default TextCopyInput;\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\n\ntype DefaultProps = {\n  className: string;\n  expandDirection: 'left' | 'right';\n  expandable: boolean;\n  leftTrim: boolean;\n  maxLength: number;\n  minLength: number;\n};\n\ntype Props = DefaultProps & {\n  value: string;\n  trimRegex?: RegExp;\n};\n\ntype State = {\n  isExpanded: boolean;\n};\n\nclass Truncate extends Component<Props, State> {\n  static defaultProps: DefaultProps = {\n    className: '',\n    minLength: 15,\n    maxLength: 50,\n    leftTrim: false,\n    expandable: true,\n    expandDirection: 'right',\n  };\n\n  state: State = {\n    isExpanded: false,\n  };\n\n  onFocus = () => {\n    const {value, maxLength} = this.props;\n    if (value.length <= maxLength) {\n      return;\n    }\n    this.setState({isExpanded: true});\n  };\n\n  onBlur = () => {\n    if (this.state.isExpanded) {\n      this.setState({isExpanded: false});\n    }\n  };\n\n  render() {\n    const {\n      className,\n      leftTrim,\n      trimRegex,\n      minLength,\n      maxLength,\n      value,\n      expandable,\n      expandDirection,\n    } = this.props;\n    const isTruncated = value.length > maxLength;\n    let shortValue: React.ReactNode = '';\n\n    if (isTruncated) {\n      const slicedValue = leftTrim\n        ? value.slice(value.length - (maxLength - 4), value.length)\n        : value.slice(0, maxLength - 4);\n\n      // Try to trim to values from the regex\n      if (trimRegex && leftTrim) {\n        const valueIndex = slicedValue.search(trimRegex);\n        shortValue = (\n          <span>\n            …{' '}\n            {valueIndex > 0 && valueIndex <= maxLength - minLength\n              ? slicedValue.slice(slicedValue.search(trimRegex), slicedValue.length)\n              : slicedValue}\n          </span>\n        );\n      } else if (trimRegex && !leftTrim) {\n        const matches = slicedValue.match(trimRegex);\n        let lastIndex = matches\n          ? slicedValue.lastIndexOf(matches[matches.length - 1]) + 1\n          : slicedValue.length;\n        if (lastIndex <= minLength) {\n          lastIndex = slicedValue.length;\n        }\n        shortValue = <span>{slicedValue.slice(0, lastIndex)} …</span>;\n      } else if (leftTrim) {\n        shortValue = <span>… {slicedValue}</span>;\n      } else {\n        shortValue = <span>{slicedValue} …</span>;\n      }\n    } else {\n      shortValue = value;\n    }\n\n    return (\n      <Wrapper\n        className={className}\n        onMouseOver={expandable ? this.onFocus : undefined}\n        onMouseOut={expandable ? this.onBlur : undefined}\n        onFocus={expandable ? this.onFocus : undefined}\n        onBlur={expandable ? this.onBlur : undefined}\n      >\n        <span>{shortValue}</span>\n        {isTruncated && (\n          <FullValue expanded={this.state.isExpanded} expandDirection={expandDirection}>\n            {value}\n          </FullValue>\n        )}\n      </Wrapper>\n    );\n  }\n}\n\nconst Wrapper = styled('span')`\n  position: relative;\n`;\n\nexport const FullValue = styled('span')<{\n  expandDirection: 'left' | 'right';\n  expanded: boolean;\n}>`\n  display: none;\n  position: absolute;\n  background: ${p => p.theme.background};\n  padding: ${space(0.5)};\n  border: 1px solid ${p => p.theme.innerBorder};\n  white-space: nowrap;\n  border-radius: ${space(0.5)};\n  top: -5px;\n  ${p => p.expandDirection === 'left' && 'right: -5px;'}\n  ${p => p.expandDirection === 'right' && 'left: -5px;'}\n\n  ${p =>\n    p.expanded &&\n    `\n    z-index: ${p.theme.zIndex.truncationFullValue};\n    display: block;\n    `}\n`;\n\nexport default Truncate;\n","import {useContext} from 'react';\n\nimport {OrganizationContext} from 'sentry/views/organizationContext';\n\nfunction useOrganization() {\n  const organization = useContext(OrganizationContext);\n  if (!organization) {\n    throw new Error('useOrganization called but organization is not set.');\n  }\n  return organization;\n}\n\nexport default useOrganization;\n","import ConfigStore from 'sentry/stores/configStore';\nimport {useLegacyStore} from 'sentry/stores/useLegacyStore';\nimport {Config} from 'sentry/types';\nimport getDisplayName from 'sentry/utils/getDisplayName';\n\ntype InjectedConfigProps = {\n  config: Config;\n};\n\n/**\n * Higher order component that passes the config object to the wrapped\n * component\n */\nfunction withConfig<P extends InjectedConfigProps>(\n  WrappedComponent: React.ComponentType<P>\n) {\n  type Props = Omit<P, keyof InjectedConfigProps> & Partial<InjectedConfigProps>;\n\n  const Wrapper: React.FC<Props> = props => {\n    const config = useLegacyStore(ConfigStore);\n    const allProps = {config, ...props} as P;\n\n    return <WrappedComponent {...allProps} />;\n  };\n\n  Wrapper.displayName = `withConfig(${getDisplayName(WrappedComponent)})`;\n\n  return Wrapper;\n}\n\nexport default withConfig;\n","import {createContext} from 'react';\n\nimport {Organization} from 'sentry/types';\n\nexport const OrganizationContext = createContext<Organization | null>(null);\n"],"names":["DEFAULT_NO_ACCESS_MESSAGE","type","showIcon","t","Access","Component","render","organization","config","access","requireAll","isSuperuser","renderNoAccessMessage","children","this","props","orgAccess","hasAccess","acc","includes","hasSuperuser","user","renderProps","isRenderFunc","withOrganization","withConfig","getBackgroundColor","p","color","enabled","theme","success","error","getSize","size","CircleIndicator","defaultProps","getPriority","priority","alert","badge","Tag","icon","inline","_inline","_priority","_size","border","_border","IconWrapper","isValidElement","cloneElement","fontSizeExtraSmall","background","textColor","gray100","getBorder","getMarginLeft","space","defaultTitles","alpha","beta","new","labels","BaseFeatureBadge","variant","title","noTooltip","expiresAt","useTheme","valueOf","Date","now","Math","random","withScope","scope","setTag","setLevel","captureException","Error","disabled","position","Fragment","StyledTag","indicatorColor","Wrapper","StyledInput","inputStyles","backgroundSecondary","rtl","OverflowContainer","StyledCopyButton","Button","TextCopyInput","createRef","e","textRef","current","onCopy","handleSelectText","stopPropagation","node","findDOMNode","HTMLElement","HTMLInputElement","setSelectionRange","value","length","selectText","className","style","inputValue","readOnly","ref","onClick","hideUnsupported","handleCopyClick","Truncate","isExpanded","maxLength","setState","state","leftTrim","trimRegex","minLength","expandable","expandDirection","isTruncated","shortValue","slicedValue","slice","valueIndex","search","matches","match","lastIndex","lastIndexOf","onMouseOver","onFocus","undefined","onMouseOut","onBlur","FullValue","expanded","innerBorder","zIndex","truncationFullValue","useContext","OrganizationContext","WrappedComponent","allProps","useLegacyStore","ConfigStore","displayName","getDisplayName","createContext"],"sourceRoot":""}