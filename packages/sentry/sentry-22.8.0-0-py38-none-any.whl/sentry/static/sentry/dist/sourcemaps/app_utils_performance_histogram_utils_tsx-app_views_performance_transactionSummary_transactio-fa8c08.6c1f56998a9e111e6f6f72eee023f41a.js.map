{"version":3,"file":"chunks/app_utils_performance_histogram_utils_tsx-app_views_performance_transactionSummary_transactio-fa8c08.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/events/searchBar.tsx","webpack:///./app/utils/measurements/measurements.tsx","webpack:///./app/utils/performance/histogram/utils.tsx","webpack:///./app/utils/performance/urls.ts","webpack:///./app/utils/withTags.tsx","webpack:///./app/views/performance/transactionSummary/transactionEvents/utils.tsx","webpack:///./app/views/performance/transactionSummary/utils.tsx","webpack:///./app/views/performance/trends/content.tsx","webpack:///./app/views/performance/trends/index.tsx"],"sourcesContent":["import {useEffect} from 'react';\nimport assign from 'lodash/assign';\nimport flatten from 'lodash/flatten';\nimport memoize from 'lodash/memoize';\nimport omit from 'lodash/omit';\n\nimport {fetchTagValues} from 'sentry/actionCreators/tags';\nimport SmartSearchBar from 'sentry/components/smartSearchBar';\nimport {NEGATION_OPERATOR, SEARCH_WILDCARD} from 'sentry/constants';\nimport {Organization, SavedSearchType, Tag, TagCollection} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {\n  Field,\n  FIELD_TAGS,\n  isAggregateField,\n  isEquation,\n  isMeasurement,\n  SEMVER_TAGS,\n  SPAN_OP_BREAKDOWN_FIELDS,\n  TRACING_FIELDS,\n} from 'sentry/utils/discover/fields';\nimport {FieldKey, FieldKind} from 'sentry/utils/fields';\nimport Measurements from 'sentry/utils/measurements/measurements';\nimport useApi from 'sentry/utils/useApi';\nimport withTags from 'sentry/utils/withTags';\n\nconst SEARCH_SPECIAL_CHARS_REGEXP = new RegExp(\n  `^${NEGATION_OPERATOR}|\\\\${SEARCH_WILDCARD}`,\n  'g'\n);\n\nconst getFunctionTags = (fields: Readonly<Field[]>) =>\n  Object.fromEntries(\n    fields\n      .filter(\n        item => !Object.keys(FIELD_TAGS).includes(item.field) && !isEquation(item.field)\n      )\n      .map(item => [\n        item.field,\n        {key: item.field, name: item.field, kind: FieldKind.FUNCTION},\n      ])\n  );\n\nconst getFieldTags = () =>\n  Object.fromEntries(\n    Object.keys(FIELD_TAGS).map(key => [\n      key,\n      {\n        ...FIELD_TAGS[key],\n        kind: FieldKind.FIELD,\n      },\n    ])\n  );\n\nconst getMeasurementTags = (\n  measurements: Parameters<\n    React.ComponentProps<typeof Measurements>['children']\n  >[0]['measurements']\n) =>\n  Object.fromEntries(\n    Object.keys(measurements).map(key => [\n      key,\n      {\n        ...measurements[key],\n        kind: FieldKind.MEASUREMENT,\n      },\n    ])\n  );\n\nconst getSpanTags = () => {\n  return Object.fromEntries(\n    SPAN_OP_BREAKDOWN_FIELDS.map(key => [key, {key, name: key, kind: FieldKind.METRICS}])\n  );\n};\n\nconst getSemverTags = () =>\n  Object.fromEntries(\n    Object.keys(SEMVER_TAGS).map(key => [\n      key,\n      {\n        ...SEMVER_TAGS[key],\n        kind: FieldKind.FIELD,\n      },\n    ])\n  );\n\nexport type SearchBarProps = Omit<React.ComponentProps<typeof SmartSearchBar>, 'tags'> & {\n  organization: Organization;\n  tags: TagCollection;\n  fields?: Readonly<Field[]>;\n  includeSessionTagsValues?: boolean;\n  /**\n   * Used to define the max height of the menu in px.\n   */\n  maxMenuHeight?: number;\n  maxSearchItems?: React.ComponentProps<typeof SmartSearchBar>['maxSearchItems'];\n  omitTags?: string[];\n  projectIds?: number[] | Readonly<number[]>;\n};\n\nfunction SearchBar(props: SearchBarProps) {\n  const {\n    maxSearchItems,\n    organization,\n    tags,\n    omitTags,\n    fields,\n    projectIds,\n    includeSessionTagsValues,\n    maxMenuHeight,\n  } = props;\n\n  const api = useApi();\n\n  useEffect(() => {\n    // Clear memoized data on mount to make tests more consistent.\n    getEventFieldValues.cache.clear?.();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [projectIds]);\n\n  // Returns array of tag values that substring match `query`; invokes `callback`\n  // with data when ready\n  const getEventFieldValues = memoize(\n    (tag, query, endpointParams): Promise<string[]> => {\n      const projectIdStrings = (projectIds as Readonly<number>[])?.map(String);\n\n      if (isAggregateField(tag.key) || isMeasurement(tag.key)) {\n        // We can't really auto suggest values for aggregate fields\n        // or measurements, so we simply don't\n        return Promise.resolve([]);\n      }\n\n      return fetchTagValues(\n        api,\n        organization.slug,\n        tag.key,\n        query,\n        projectIdStrings,\n        endpointParams,\n\n        // allows searching for tags on transactions as well\n        true,\n\n        // allows searching for tags on sessions as well\n        includeSessionTagsValues\n      ).then(\n        results =>\n          flatten(results.filter(({name}) => defined(name)).map(({name}) => name)),\n        () => {\n          throw new Error('Unable to fetch event field values');\n        }\n      );\n    },\n    ({key}, query) => `${key}-${query}`\n  );\n\n  const getTagList = (\n    measurements: Parameters<\n      React.ComponentProps<typeof Measurements>['children']\n    >[0]['measurements']\n  ) => {\n    const functionTags = getFunctionTags(fields ?? []);\n    const fieldTags = getFieldTags();\n    const measurementsWithKind = getMeasurementTags(measurements);\n    const spanTags = getSpanTags();\n    const semverTags = getSemverTags();\n\n    const orgHasPerformanceView = organization.features.includes('performance-view');\n\n    const combinedTags: Record<string, Tag> = orgHasPerformanceView\n      ? Object.assign({}, measurementsWithKind, spanTags, fieldTags, functionTags)\n      : omit(fieldTags, TRACING_FIELDS);\n\n    const tagsWithKind = Object.fromEntries(\n      Object.keys(tags).map(key => [\n        key,\n        {\n          ...tags[key],\n          kind: FieldKind.TAG,\n        },\n      ])\n    );\n\n    assign(combinedTags, tagsWithKind, fieldTags, semverTags);\n\n    const sortedTagKeys = Object.keys(combinedTags);\n    sortedTagKeys.sort((a, b) => {\n      return a.toLowerCase().localeCompare(b.toLowerCase());\n    });\n\n    combinedTags.has = {\n      key: FieldKey.HAS,\n      name: 'Has property',\n      values: sortedTagKeys,\n      predefined: true,\n      kind: FieldKind.FIELD,\n    };\n\n    return omit(combinedTags, omitTags ?? []);\n  };\n\n  return (\n    <Measurements>\n      {({measurements}) => (\n        <SmartSearchBar\n          hasRecentSearches\n          savedSearchType={SavedSearchType.EVENT}\n          onGetTagValues={getEventFieldValues}\n          supportedTags={getTagList(measurements)}\n          prepareQuery={query => {\n            // Prepare query string (e.g. strip special characters like negation operator)\n            return query.replace(SEARCH_SPECIAL_CHARS_REGEXP, '');\n          }}\n          maxSearchItems={maxSearchItems}\n          excludeEnvironment\n          maxMenuHeight={maxMenuHeight ?? 300}\n          {...props}\n        />\n      )}\n    </Measurements>\n  );\n}\n\nexport default withTags(SearchBar);\n","import {Fragment} from 'react';\n\nimport {\n  MOBILE_VITAL_DETAILS,\n  WEB_VITAL_DETAILS,\n} from 'sentry/utils/performance/vitals/constants';\nimport {Vital} from 'sentry/utils/performance/vitals/types';\n\nimport {MobileVital, WebVital} from '../fields';\n\nexport type Measurement = {\n  key: string;\n  name: string;\n};\n\nexport type MeasurementCollection = Record<string, Measurement>;\n\ntype VitalType = WebVital | MobileVital;\n\nfunction measurementsFromDetails(\n  details: Partial<Record<VitalType, Vital>>\n): MeasurementCollection {\n  return Object.fromEntries(\n    Object.entries(details).map(([key, value]) => {\n      const newValue: Measurement = {\n        name: value.name,\n        key,\n      };\n      return [key, newValue];\n    })\n  );\n}\n\nconst MOBILE_MEASUREMENTS = measurementsFromDetails(MOBILE_VITAL_DETAILS);\nconst WEB_MEASUREMENTS = measurementsFromDetails(WEB_VITAL_DETAILS);\n\nexport function getMeasurements() {\n  return {...WEB_MEASUREMENTS, ...MOBILE_MEASUREMENTS};\n}\n\ntype ChildrenProps = {\n  measurements: MeasurementCollection;\n};\n\ntype Props = {\n  children: (props: ChildrenProps) => React.ReactNode;\n};\n\nfunction Measurements({children}: Props) {\n  const measurements = getMeasurements();\n  return <Fragment>{children({measurements})}</Fragment>;\n}\n\nexport default Measurements;\n","import {ColumnType} from 'sentry/utils/discover/fields';\nimport {getDuration} from 'sentry/utils/formatters';\n\nimport {HistogramData} from './types';\n\nexport function getBucketWidth(data: HistogramData) {\n  // We can assume that all buckets are of equal width, use the first two\n  // buckets to get the width. The value of each histogram function indicates\n  // the beginning of the bucket.\n  return data.length >= 2 ? data[1].bin - data[0].bin : 0;\n}\n\nexport function computeBuckets(data: HistogramData) {\n  const width = getBucketWidth(data);\n\n  return data.map(item => {\n    const bucket = item.bin;\n    return {\n      start: bucket,\n      end: bucket + width,\n    };\n  });\n}\n\nexport function formatHistogramData(\n  data: HistogramData,\n  {\n    precision,\n    type,\n    additionalFieldsFn,\n  }: {\n    additionalFieldsFn?: any;\n    precision?: number;\n    type?: ColumnType;\n  } = {}\n) {\n  const formatter = (value: number): string => {\n    switch (type) {\n      case 'duration':\n        const decimalPlaces = precision ?? (value < 1000 ? 0 : 3);\n        return getDuration(value / 1000, decimalPlaces, true);\n      case 'number':\n        // This is trying to avoid some of potential rounding errors that cause bins\n        // have the same label, if the number of bins doesn't visually match what is\n        // expected, check that this rounding is correct. If this issue persists,\n        // consider formatting the bin as a string in the response\n        const factor = 10 ** (precision ?? 0);\n        return (Math.round((value + Number.EPSILON) * factor) / factor).toLocaleString();\n      default:\n        throw new Error(`Unable to format type: ${type}`);\n    }\n  };\n  return data.map(item => {\n    return {\n      value: item.count,\n      name: formatter(item.bin),\n      ...(additionalFieldsFn?.(item.bin) ?? {}),\n    };\n  });\n}\n","import {LocationDescriptor, Query} from 'history';\n\nimport {spanTargetHash} from 'sentry/components/events/interfaces/spans/utils';\nimport {Organization} from 'sentry/types';\nimport {defined} from 'sentry/utils';\n\nexport function getTransactionDetailsUrl(\n  orgSlug: Organization['slug'],\n  eventSlug: string,\n  transaction?: string,\n  query?: Query,\n  spanId?: string\n): LocationDescriptor {\n  const locationQuery = {\n    ...(query || {}),\n    transaction,\n  };\n  if (!defined(locationQuery.transaction)) {\n    delete locationQuery.transaction;\n  }\n\n  const target = {\n    pathname: `/organizations/${orgSlug}/performance/${eventSlug}/`,\n    query: locationQuery,\n    hash: defined(spanId) ? spanTargetHash(spanId) : undefined,\n  };\n  if (!defined(target.hash)) {\n    delete target.hash;\n  }\n\n  return target;\n}\n","import {Component} from 'react';\n\nimport TagStore from 'sentry/stores/tagStore';\nimport {TagCollection} from 'sentry/types';\nimport getDisplayName from 'sentry/utils/getDisplayName';\n\ntype InjectedTagsProps = {\n  tags: TagCollection;\n};\n\ntype State = {\n  tags: TagCollection;\n};\n\n/**\n * HOC for getting *only* tags from the TagStore.\n */\nfunction withTags<P extends InjectedTagsProps>(WrappedComponent: React.ComponentType<P>) {\n  class WithTags extends Component<Omit<P, keyof InjectedTagsProps>, State> {\n    static displayName = `withTags(${getDisplayName(WrappedComponent)})`;\n\n    state: State = {\n      tags: TagStore.getStateTags(),\n    };\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    unsubscribe = TagStore.listen(\n      (tags: TagCollection) => this.setState({tags}),\n      undefined\n    );\n\n    render() {\n      const {tags, ...props} = this.props as P;\n      return <WrappedComponent {...({tags: tags ?? this.state.tags, ...props} as P)} />;\n    }\n  }\n\n  return WithTags;\n}\n\nexport default withTags;\n","import {Location, Query} from 'history';\n\nimport {t} from 'sentry/locale';\nimport {decodeScalar} from 'sentry/utils/queryString';\n\nimport {filterToField, SpanOperationBreakdownFilter} from '../filter';\nimport {TransactionFilterOptions} from '../utils';\n\nexport enum EventsDisplayFilterName {\n  p50 = 'p50',\n  p75 = 'p75',\n  p95 = 'p95',\n  p99 = 'p99',\n  p100 = 'p100',\n}\n\nexport type EventsDisplayFilter = {\n  label: string;\n  name: EventsDisplayFilterName;\n  query?: string[][];\n  sort?: {field: string; kind: 'desc' | 'asc'};\n};\n\nexport type EventsFilterOptions = {\n  [name in EventsDisplayFilterName]: EventsDisplayFilter;\n};\n\nexport type EventsFilterPercentileValues = {\n  [name in Exclude<EventsDisplayFilterName, EventsDisplayFilterName.p100>]: number;\n};\n\nexport function getEventsFilterOptions(\n  spanOperationBreakdownFilter: SpanOperationBreakdownFilter,\n  percentileValues?: EventsFilterPercentileValues\n): EventsFilterOptions {\n  const {p99, p95, p75, p50} = percentileValues\n    ? percentileValues\n    : {p99: 0, p95: 0, p75: 0, p50: 0};\n  return {\n    [EventsDisplayFilterName.p50]: {\n      name: EventsDisplayFilterName.p50,\n      query: p50 ? [['transaction.duration', `<=${p50.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p50'),\n    },\n    [EventsDisplayFilterName.p75]: {\n      name: EventsDisplayFilterName.p75,\n      query: p75 ? [['transaction.duration', `<=${p75.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p75'),\n    },\n    [EventsDisplayFilterName.p95]: {\n      name: EventsDisplayFilterName.p95,\n      query: p95 ? [['transaction.duration', `<=${p95.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p95'),\n    },\n    [EventsDisplayFilterName.p99]: {\n      name: EventsDisplayFilterName.p99,\n      query: p99 ? [['transaction.duration', `<=${p99.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p99'),\n    },\n    [EventsDisplayFilterName.p100]: {\n      name: EventsDisplayFilterName.p100,\n      label: t('p100'),\n    },\n  };\n}\n\nexport function eventsRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n}: {\n  orgSlug: string;\n  query: Query;\n  transaction: string;\n  projectID?: string | string[];\n}) {\n  const pathname = `/organizations/${orgSlug}/performance/summary/events/`;\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n    },\n  };\n}\n\nfunction stringToFilter(option: string) {\n  if (\n    Object.values(EventsDisplayFilterName).includes(option as EventsDisplayFilterName)\n  ) {\n    return option as EventsDisplayFilterName;\n  }\n\n  return EventsDisplayFilterName.p100;\n}\nexport function decodeEventsDisplayFilterFromLocation(location: Location) {\n  return stringToFilter(\n    decodeScalar(location.query.showTransactions, EventsDisplayFilterName.p100)\n  );\n}\n\nexport function filterEventsDisplayToLocationQuery(\n  option: EventsDisplayFilterName,\n  spanOperationBreakdownFilter: SpanOperationBreakdownFilter\n) {\n  const eventsFilterOptions = getEventsFilterOptions(spanOperationBreakdownFilter);\n  const kind = eventsFilterOptions[option].sort?.kind;\n  const field = eventsFilterOptions[option].sort?.field;\n\n  const query: {showTransactions: string; sort?: string} = {\n    showTransactions: option,\n  };\n  if (kind && field) {\n    query.sort = `${kind === 'desc' ? '-' : ''}${field}`;\n  }\n  return query;\n}\n\nexport function mapShowTransactionToPercentile(\n  showTransaction\n): EventsDisplayFilterName | undefined {\n  switch (showTransaction) {\n    case TransactionFilterOptions.OUTLIER:\n      return EventsDisplayFilterName.p100;\n    case TransactionFilterOptions.SLOW:\n      return EventsDisplayFilterName.p95;\n    default:\n      return undefined;\n  }\n}\n","import styled from '@emotion/styled';\nimport {LocationDescriptor, Query} from 'history';\n\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {TableDataRow} from 'sentry/utils/discover/discoverQuery';\nimport {generateEventSlug} from 'sentry/utils/discover/urls';\nimport {getTransactionDetailsUrl} from 'sentry/utils/performance/urls';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport {getTraceDetailsUrl} from 'sentry/views/performance/traceDetails/utils';\n\nimport {DisplayModes} from './transactionOverview/charts';\n\nexport enum TransactionFilterOptions {\n  FASTEST = 'fastest',\n  SLOW = 'slow',\n  OUTLIER = 'outlier',\n  RECENT = 'recent',\n}\n\nexport function generateTransactionSummaryRoute({orgSlug}: {orgSlug: String}): string {\n  return `/organizations/${orgSlug}/performance/summary/`;\n}\n\n// normalizes search conditions by removing any redundant search conditions before presenting them in:\n// - query strings\n// - search UI\nexport function normalizeSearchConditions(query: string): MutableSearch {\n  const filterParams = normalizeSearchConditionsWithTransactionName(query);\n\n  // no need to include transaction as its already in the query params\n  filterParams.removeFilter('transaction');\n\n  return filterParams;\n}\n\n// normalizes search conditions by removing any redundant search conditions, but retains any transaction name\nexport function normalizeSearchConditionsWithTransactionName(\n  query: string\n): MutableSearch {\n  const filterParams = new MutableSearch(query);\n\n  // remove any event.type queries since it is implied to apply to only transactions\n  filterParams.removeFilter('event.type');\n\n  return filterParams;\n}\n\nexport function transactionSummaryRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n  unselectedSeries = 'p100()',\n  display,\n  trendFunction,\n  trendColumn,\n  showTransactions,\n  additionalQuery,\n}: {\n  orgSlug: string;\n  query: Query;\n  transaction: string;\n  additionalQuery?: Record<string, string>;\n  display?: DisplayModes;\n  projectID?: string | string[];\n  showTransactions?: TransactionFilterOptions;\n  trendColumn?: string;\n  trendFunction?: string;\n  unselectedSeries?: string | string[];\n}) {\n  const pathname = generateTransactionSummaryRoute({\n    orgSlug,\n  });\n\n  let searchFilter: typeof query.query;\n  if (typeof query.query === 'string') {\n    searchFilter = normalizeSearchConditions(query.query).formatString();\n  } else {\n    searchFilter = query.query;\n  }\n\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: searchFilter,\n      unselectedSeries,\n      showTransactions,\n      display,\n      trendFunction,\n      trendColumn,\n      ...additionalQuery,\n    },\n  };\n}\n\nexport function generateTraceLink(dateSelection) {\n  return (\n    organization: Organization,\n    tableRow: TableDataRow,\n    _query: Query\n  ): LocationDescriptor => {\n    const traceId = `${tableRow.trace}`;\n    if (!traceId) {\n      return {};\n    }\n\n    return getTraceDetailsUrl(organization, traceId, dateSelection, {});\n  };\n}\n\nexport function generateTransactionLink(transactionName: string) {\n  return (\n    organization: Organization,\n    tableRow: TableDataRow,\n    query: Query,\n    spanId?: string\n  ): LocationDescriptor => {\n    const eventSlug = generateEventSlug(tableRow);\n    return getTransactionDetailsUrl(\n      organization.slug,\n      eventSlug,\n      transactionName,\n      query,\n      spanId\n    );\n  };\n}\n\nexport const SidebarSpacer = styled('div')`\n  margin-top: ${space(3)};\n`;\n","import {Component, Fragment} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport Alert from 'sentry/components/alert';\nimport Breadcrumbs from 'sentry/components/breadcrumbs';\nimport DatePageFilter from 'sentry/components/datePageFilter';\nimport EnvironmentPageFilter from 'sentry/components/environmentPageFilter';\nimport SearchBar from 'sentry/components/events/searchBar';\nimport CompactSelect from 'sentry/components/forms/compactSelect';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport PageFilterBar from 'sentry/components/organizations/pageFilterBar';\nimport PageFiltersContainer from 'sentry/components/organizations/pageFilters/container';\nimport ProjectPageFilter from 'sentry/components/projectPageFilter';\nimport {MAX_QUERY_LENGTH} from 'sentry/constants';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, PageFilters, Project} from 'sentry/types';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {generateAggregateFields} from 'sentry/utils/discover/fields';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport withPageFilters from 'sentry/utils/withPageFilters';\n\nimport {getPerformanceLandingUrl, getTransactionSearchQuery} from '../utils';\n\nimport ChangedTransactions from './changedTransactions';\nimport {TrendChangeType, TrendFunctionField, TrendView} from './types';\nimport {\n  DEFAULT_MAX_DURATION,\n  DEFAULT_TRENDS_STATS_PERIOD,\n  getCurrentTrendFunction,\n  getCurrentTrendParameter,\n  getSelectedQueryKey,\n  modifyTrendsViewDefaultPeriod,\n  resetCursors,\n  TRENDS_FUNCTIONS,\n  TRENDS_PARAMETERS,\n} from './utils';\n\ntype Props = {\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n  selection: PageFilters;\n};\n\ntype State = {\n  error?: string;\n  previousTrendFunction?: TrendFunctionField;\n};\n\nexport const defaultTrendsSelectionDate = {\n  start: null,\n  end: null,\n  utc: false,\n  period: DEFAULT_TRENDS_STATS_PERIOD,\n};\n\nclass TrendsContent extends Component<Props, State> {\n  state: State = {};\n\n  handleSearch = (searchQuery: string) => {\n    const {location} = this.props;\n\n    const cursors = resetCursors();\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...location.query,\n        ...cursors,\n        query: String(searchQuery).trim() || undefined,\n      },\n    });\n  };\n\n  setError = (error: string | undefined) => {\n    this.setState({error});\n  };\n\n  handleTrendFunctionChange = (field: string) => {\n    const {organization, location} = this.props;\n\n    const offsets = {};\n\n    Object.values(TrendChangeType).forEach(trendChangeType => {\n      const queryKey = getSelectedQueryKey(trendChangeType);\n      offsets[queryKey] = undefined;\n    });\n\n    trackAnalyticsEvent({\n      eventKey: 'performance_views.trends.change_function',\n      eventName: 'Performance Views: Change Function',\n      organization_id: parseInt(organization.id, 10),\n      function_name: field,\n    });\n\n    this.setState({\n      previousTrendFunction: getCurrentTrendFunction(location).field,\n    });\n\n    const cursors = resetCursors();\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...location.query,\n        ...offsets,\n        ...cursors,\n        trendFunction: field,\n      },\n    });\n  };\n\n  renderError() {\n    const {error} = this.state;\n\n    if (!error) {\n      return null;\n    }\n\n    return (\n      <Alert type=\"error\" showIcon>\n        {error}\n      </Alert>\n    );\n  }\n\n  handleParameterChange = (label: string) => {\n    const {organization, location} = this.props;\n    const cursors = resetCursors();\n\n    trackAnalyticsEvent({\n      eventKey: 'performance_views.trends.change_parameter',\n      eventName: 'Performance Views: Change Parameter',\n      organization_id: parseInt(organization.id, 10),\n      parameter_name: label,\n    });\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...location.query,\n        ...cursors,\n        trendParameter: label,\n      },\n    });\n  };\n\n  getPerformanceLink() {\n    const {location} = this.props;\n\n    const newQuery = {\n      ...location.query,\n    };\n    const query = decodeScalar(location.query.query, '');\n    const conditions = new MutableSearch(query);\n\n    // This stops errors from occurring when navigating to other views since we are appending aggregates to the trends view\n    conditions.removeFilter('tpm()');\n    conditions.removeFilter('confidence()');\n    conditions.removeFilter('transaction.duration');\n    newQuery.query = conditions.formatString();\n    return {\n      pathname: getPerformanceLandingUrl(this.props.organization),\n      query: newQuery,\n    };\n  }\n\n  render() {\n    const {organization, eventView, location, projects} = this.props;\n    const {previousTrendFunction} = this.state;\n\n    const trendView = eventView.clone() as TrendView;\n    modifyTrendsViewDefaultPeriod(trendView, location);\n\n    const fields = generateAggregateFields(\n      organization,\n      [\n        {\n          field: 'absolute_correlation()',\n        },\n        {\n          field: 'trend_percentage()',\n        },\n        {\n          field: 'trend_difference()',\n        },\n        {\n          field: 'count_percentage()',\n        },\n        {\n          field: 'tpm()',\n        },\n        {\n          field: 'tps()',\n        },\n      ],\n      ['epm()', 'eps()']\n    );\n    const currentTrendFunction = getCurrentTrendFunction(location);\n    const currentTrendParameter = getCurrentTrendParameter(\n      location,\n      projects,\n      eventView.project\n    );\n    const query = getTransactionSearchQuery(location);\n\n    return (\n      <PageFiltersContainer\n        defaultSelection={{\n          datetime: defaultTrendsSelectionDate,\n        }}\n      >\n        <Layout.Header>\n          <Layout.HeaderContent>\n            <Breadcrumbs\n              crumbs={[\n                {\n                  label: 'Performance',\n                  to: this.getPerformanceLink(),\n                },\n                {\n                  label: 'Trends',\n                },\n              ]}\n            />\n            <Layout.Title>{t('Trends')}</Layout.Title>\n          </Layout.HeaderContent>\n        </Layout.Header>\n        <Layout.Body>\n          <Layout.Main fullWidth>\n            <DefaultTrends location={location} eventView={eventView} projects={projects}>\n              <FilterActions>\n                <PageFilterBar condensed>\n                  <ProjectPageFilter />\n                  <EnvironmentPageFilter />\n                  <DatePageFilter alignDropdown=\"left\" />\n                </PageFilterBar>\n                <StyledSearchBar\n                  searchSource=\"trends\"\n                  organization={organization}\n                  projectIds={trendView.project}\n                  query={query}\n                  fields={fields}\n                  onSearch={this.handleSearch}\n                  maxQueryLength={MAX_QUERY_LENGTH}\n                />\n                <CompactSelect\n                  triggerProps={{prefix: t('Percentile')}}\n                  value={currentTrendFunction.field}\n                  options={TRENDS_FUNCTIONS.map(({label, field}) => ({\n                    value: field,\n                    label,\n                  }))}\n                  onChange={opt => this.handleTrendFunctionChange(opt.value)}\n                />\n                <CompactSelect\n                  triggerProps={{prefix: t('Parameter')}}\n                  value={currentTrendParameter.label}\n                  options={TRENDS_PARAMETERS.map(({label}) => ({\n                    value: label,\n                    label,\n                  }))}\n                  onChange={opt => this.handleParameterChange(opt.value)}\n                />\n              </FilterActions>\n              <ListContainer>\n                <ChangedTransactions\n                  trendChangeType={TrendChangeType.IMPROVED}\n                  previousTrendFunction={previousTrendFunction}\n                  trendView={trendView}\n                  location={location}\n                  setError={this.setError}\n                />\n                <ChangedTransactions\n                  trendChangeType={TrendChangeType.REGRESSION}\n                  previousTrendFunction={previousTrendFunction}\n                  trendView={trendView}\n                  location={location}\n                  setError={this.setError}\n                />\n              </ListContainer>\n            </DefaultTrends>\n          </Layout.Main>\n        </Layout.Body>\n      </PageFiltersContainer>\n    );\n  }\n}\n\ntype DefaultTrendsProps = {\n  children: React.ReactNode[];\n  eventView: EventView;\n  location: Location;\n  projects: Project[];\n};\n\nclass DefaultTrends extends Component<DefaultTrendsProps> {\n  hasPushedDefaults = false;\n\n  render() {\n    const {children, location, eventView, projects} = this.props;\n\n    const queryString = decodeScalar(location.query.query);\n    const trendParameter = getCurrentTrendParameter(\n      location,\n      projects,\n      eventView.project\n    );\n    const conditions = new MutableSearch(queryString || '');\n\n    if (queryString || this.hasPushedDefaults) {\n      this.hasPushedDefaults = true;\n      return <Fragment>{children}</Fragment>;\n    }\n    this.hasPushedDefaults = true;\n    conditions.setFilterValues('tpm()', ['>0.01']);\n    conditions.setFilterValues(trendParameter.column, ['>0', `<${DEFAULT_MAX_DURATION}`]);\n\n    const query = conditions.formatString();\n    eventView.query = query;\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...location.query,\n        cursor: undefined,\n        query: String(query).trim() || undefined,\n      },\n    });\n    return null;\n  }\n}\n\nconst FilterActions = styled('div')`\n  display: grid;\n  gap: ${space(2)};\n  margin-bottom: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: repeat(3, min-content);\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.xlarge}) {\n    grid-template-columns: auto 1fr auto auto;\n  }\n`;\n\nconst StyledSearchBar = styled(SearchBar)`\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    order: 1;\n    grid-column: 1/5;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.xlarge}) {\n    order: initial;\n    grid-column: auto;\n  }\n`;\n\nconst ListContainer = styled('div')`\n  display: grid;\n  gap: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: repeat(2, minmax(0, 1fr));\n  }\n`;\n\nexport default withPageFilters(TrendsContent);\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport {Client} from 'sentry/api';\nimport NoProjectMessage from 'sentry/components/noProjectMessage';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport {PageContent} from 'sentry/styles/organization';\nimport {Organization, PageFilters, Project} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withPageFilters from 'sentry/utils/withPageFilters';\nimport withProjects from 'sentry/utils/withProjects';\n\nimport {generatePerformanceEventView} from '../data';\n\nimport TrendsContent from './content';\n\ntype Props = {\n  api: Client;\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n  selection: PageFilters;\n};\n\ntype State = {\n  eventView: EventView;\n  error?: string;\n};\n\nclass TrendsSummary extends Component<Props, State> {\n  static getDerivedStateFromProps(nextProps: Readonly<Props>, prevState: State): State {\n    return {\n      ...prevState,\n      eventView: generatePerformanceEventView(nextProps.location, nextProps.projects, {\n        isTrends: true,\n      }),\n    };\n  }\n\n  state: State = {\n    eventView: generatePerformanceEventView(this.props.location, this.props.projects, {\n      isTrends: true,\n    }),\n    error: undefined,\n  };\n\n  getDocumentTitle(): string {\n    return [t('Trends'), t('Performance')].join(' - ');\n  }\n\n  setError = (error: string | undefined) => {\n    this.setState({error});\n  };\n\n  renderContent() {\n    const {organization, location, projects} = this.props;\n    const {eventView} = this.state;\n    return (\n      <TrendsContent\n        organization={organization}\n        location={location}\n        eventView={eventView}\n        projects={projects}\n      />\n    );\n  }\n\n  render() {\n    const {organization} = this.props;\n\n    return (\n      <SentryDocumentTitle title={this.getDocumentTitle()} orgSlug={organization.slug}>\n        <StyledPageContent>\n          <NoProjectMessage organization={organization}>\n            {this.renderContent()}\n          </NoProjectMessage>\n        </StyledPageContent>\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nexport default withOrganization(withProjects(withPageFilters(withApi(TrendsSummary))));\n\nconst StyledPageContent = styled(PageContent)`\n  padding: 0;\n`;\n"],"names":["SEARCH_SPECIAL_CHARS_REGEXP","RegExp","NEGATION_OPERATOR","SEARCH_WILDCARD","SearchBar","props","maxSearchItems","organization","tags","omitTags","fields","projectIds","includeSessionTagsValues","maxMenuHeight","api","useApi","useEffect","getEventFieldValues","cache","clear","memoize","tag","query","endpointParams","projectIdStrings","map","String","isAggregateField","key","isMeasurement","Promise","resolve","fetchTagValues","slug","then","results","flatten","filter","name","defined","Error","getTagList","measurements","functionTags","Object","fromEntries","item","keys","FIELD_TAGS","includes","field","isEquation","kind","FieldKind","getFunctionTags","fieldTags","measurementsWithKind","getMeasurementTags","spanTags","SPAN_OP_BREAKDOWN_FIELDS","semverTags","SEMVER_TAGS","combinedTags","features","assign","omit","TRACING_FIELDS","tagsWithKind","sortedTagKeys","sort","a","b","toLowerCase","localeCompare","has","FieldKey","values","predefined","hasRecentSearches","savedSearchType","SavedSearchType","onGetTagValues","supportedTags","prepareQuery","replace","excludeEnvironment","withTags","measurementsFromDetails","details","entries","value","MOBILE_MEASUREMENTS","MOBILE_VITAL_DETAILS","WEB_MEASUREMENTS","WEB_VITAL_DETAILS","getMeasurements","Measurements","children","Fragment","getBucketWidth","data","length","bin","computeBuckets","width","bucket","start","end","formatHistogramData","precision","type","additionalFieldsFn","formatter","decimalPlaces","getDuration","factor","Math","round","Number","EPSILON","toLocaleString","count","getTransactionDetailsUrl","orgSlug","eventSlug","transaction","spanId","locationQuery","target","pathname","hash","spanTargetHash","undefined","WrappedComponent","WithTags","Component","TagStore","this","setState","componentWillUnmount","unsubscribe","render","state","getDisplayName","EventsDisplayFilterName","getEventsFilterOptions","spanOperationBreakdownFilter","percentileValues","p99","p95","p75","p50","toFixed","filterToField","label","t","p100","eventsRouteWithQuery","projectID","project","environment","statsPeriod","decodeEventsDisplayFilterFromLocation","location","option","decodeScalar","showTransactions","filterEventsDisplayToLocationQuery","eventsFilterOptions","mapShowTransactionToPercentile","showTransaction","TransactionFilterOptions","normalizeSearchConditions","filterParams","normalizeSearchConditionsWithTransactionName","removeFilter","MutableSearch","transactionSummaryRouteWithQuery","unselectedSeries","display","trendFunction","trendColumn","additionalQuery","generateTransactionSummaryRoute","searchFilter","formatString","generateTraceLink","dateSelection","tableRow","_query","traceId","trace","getTraceDetailsUrl","generateTransactionLink","transactionName","generateEventSlug","SidebarSpacer","space","defaultTrendsSelectionDate","utc","period","DEFAULT_TRENDS_STATS_PERIOD","TrendsContent","searchQuery","cursors","resetCursors","browserHistory","trim","error","offsets","TrendChangeType","forEach","trendChangeType","queryKey","getSelectedQueryKey","trackAnalyticsEvent","eventKey","eventName","organization_id","parseInt","id","function_name","previousTrendFunction","getCurrentTrendFunction","parameter_name","trendParameter","renderError","showIcon","getPerformanceLink","newQuery","conditions","getPerformanceLandingUrl","eventView","projects","trendView","clone","modifyTrendsViewDefaultPeriod","generateAggregateFields","currentTrendFunction","currentTrendParameter","getCurrentTrendParameter","getTransactionSearchQuery","defaultSelection","datetime","crumbs","to","fullWidth","DefaultTrends","FilterActions","condensed","alignDropdown","StyledSearchBar","searchSource","onSearch","handleSearch","maxQueryLength","MAX_QUERY_LENGTH","triggerProps","prefix","options","TRENDS_FUNCTIONS","onChange","opt","handleTrendFunctionChange","TRENDS_PARAMETERS","handleParameterChange","ListContainer","setError","queryString","hasPushedDefaults","setFilterValues","column","DEFAULT_MAX_DURATION","cursor","p","theme","breakpoints","small","xlarge","withPageFilters","TrendsSummary","generatePerformanceEventView","isTrends","nextProps","prevState","getDocumentTitle","join","renderContent","title","StyledPageContent","withOrganization","withProjects","withApi","PageContent"],"sourceRoot":""}