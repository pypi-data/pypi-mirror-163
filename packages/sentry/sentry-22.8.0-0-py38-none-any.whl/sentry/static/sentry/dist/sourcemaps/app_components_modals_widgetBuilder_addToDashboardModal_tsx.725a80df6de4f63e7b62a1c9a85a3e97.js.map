{"version":3,"file":"chunks/app_components_modals_widgetBuilder_addToDashboardModal_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/modals/widgetBuilder/addToDashboardModal.tsx"],"sourcesContent":["import {Fragment, useEffect, useState} from 'react';\nimport {InjectedRouter} from 'react-router';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport {Location, Query} from 'history';\n\nimport {\n  fetchDashboard,\n  fetchDashboards,\n  updateDashboard,\n} from 'sentry/actionCreators/dashboards';\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport SelectControl from 'sentry/components/forms/selectControl';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {DateString, Organization, PageFilters, SelectValue} from 'sentry/types';\nimport handleXhrErrorResponse from 'sentry/utils/handleXhrErrorResponse';\nimport useApi from 'sentry/utils/useApi';\nimport {\n  DashboardDetails,\n  DashboardListItem,\n  DisplayType,\n  MAX_WIDGETS,\n  Widget,\n} from 'sentry/views/dashboardsV2/types';\nimport {\n  getDashboardFiltersFromURL,\n  getSavedFiltersAsPageFilters,\n  getSavedPageFilters,\n} from 'sentry/views/dashboardsV2/utils';\nimport {NEW_DASHBOARD_ID} from 'sentry/views/dashboardsV2/widgetBuilder/utils';\nimport WidgetCard from 'sentry/views/dashboardsV2/widgetCard';\n\ntype WidgetAsQueryParams = Query & {\n  defaultTableColumns: string[];\n  defaultTitle: string;\n  defaultWidgetQuery: string;\n  displayType: DisplayType;\n  environment: string[];\n  project: number[];\n  source: string;\n  end?: DateString;\n  start?: DateString;\n  statsPeriod?: string | null;\n};\n\nexport type AddToDashboardModalProps = {\n  location: Location;\n  organization: Organization;\n  router: InjectedRouter;\n  selection: PageFilters;\n  widget: Widget;\n  widgetAsQueryParams: WidgetAsQueryParams;\n};\n\ntype Props = ModalRenderProps & AddToDashboardModalProps;\n\nconst SELECT_DASHBOARD_MESSAGE = t('Select a dashboard');\n\nfunction AddToDashboardModal({\n  Header,\n  Body,\n  Footer,\n  closeModal,\n  location,\n  organization,\n  router,\n  selection,\n  widget,\n  widgetAsQueryParams,\n}: Props) {\n  const api = useApi();\n  const [dashboards, setDashboards] = useState<DashboardListItem[] | null>(null);\n  const [selectedDashboard, setSelectedDashboard] = useState<DashboardDetails | null>(\n    null\n  );\n  const [selectedDashboardId, setSelectedDashboardId] = useState<string | null>(null);\n\n  useEffect(() => {\n    // Track mounted state so we dont call setState on unmounted components\n    let unmounted = false;\n\n    fetchDashboards(api, organization.slug).then(response => {\n      // If component has unmounted, dont set state\n      if (unmounted) {\n        return;\n      }\n\n      setDashboards(response);\n    });\n\n    return () => {\n      unmounted = true;\n    };\n  }, [api, organization.slug]);\n\n  useEffect(() => {\n    // Track mounted state so we dont call setState on unmounted components\n    let unmounted = false;\n\n    if (selectedDashboardId === NEW_DASHBOARD_ID || selectedDashboardId === null) {\n      setSelectedDashboard(null);\n    } else {\n      fetchDashboard(api, organization.slug, selectedDashboardId).then(response => {\n        // If component has unmounted, dont set state\n        if (unmounted) {\n          return;\n        }\n\n        setSelectedDashboard(response);\n      });\n    }\n\n    return () => {\n      unmounted = true;\n    };\n  }, [api, organization.slug, selectedDashboardId]);\n\n  function handleGoToBuilder() {\n    const pathname =\n      selectedDashboardId === NEW_DASHBOARD_ID\n        ? `/organizations/${organization.slug}/dashboards/new/widget/new/`\n        : `/organizations/${organization.slug}/dashboard/${selectedDashboardId}/widget/new/`;\n\n    router.push({\n      pathname,\n      query: {\n        ...widgetAsQueryParams,\n        ...(organization.features.includes('dashboards-top-level-filter') &&\n        selectedDashboard\n          ? getSavedPageFilters(selectedDashboard)\n          : {}),\n      },\n    });\n    closeModal();\n  }\n\n  async function handleAddAndStayInDiscover() {\n    if (selectedDashboard === null) {\n      return;\n    }\n\n    let orderby = widget.queries[0].orderby;\n    if (!!!(DisplayType.AREA && widget.queries[0].columns.length)) {\n      orderby = ''; // Clear orderby if its not a top n visualization.\n    }\n    const query = widget.queries[0];\n\n    const newWidget = {\n      ...widget,\n      title: widget.title === '' ? t('All Events') : widget.title,\n      queries: [{...query, orderby}],\n    };\n\n    try {\n      const newDashboard = {\n        ...selectedDashboard,\n        widgets: [...selectedDashboard.widgets, newWidget],\n      };\n\n      await updateDashboard(api, organization.slug, newDashboard);\n\n      closeModal();\n      addSuccessMessage(t('Successfully added widget to dashboard'));\n    } catch (e) {\n      const errorMessage = t('Unable to add widget to dashboard');\n      handleXhrErrorResponse(errorMessage)(e);\n      addErrorMessage(errorMessage);\n    }\n  }\n\n  const canSubmit = selectedDashboardId !== null;\n\n  return (\n    <Fragment>\n      <Header closeButton>\n        <h4>{t('Add to Dashboard')}</h4>\n      </Header>\n      <Body>\n        <Wrapper>\n          <SelectControl\n            disabled={dashboards === null}\n            menuPlacement=\"auto\"\n            name=\"dashboard\"\n            placeholder={t('Select Dashboard')}\n            value={selectedDashboardId}\n            options={\n              dashboards && [\n                {label: t('+ Create New Dashboard'), value: 'new'},\n                ...dashboards.map(({title, id, widgetDisplay}) => ({\n                  label: title,\n                  value: id,\n                  isDisabled: widgetDisplay.length >= MAX_WIDGETS,\n                  tooltip:\n                    widgetDisplay.length >= MAX_WIDGETS &&\n                    tct('Max widgets ([maxWidgets]) per dashboard reached.', {\n                      maxWidgets: MAX_WIDGETS,\n                    }),\n                  tooltipOptions: {position: 'right'},\n                })),\n              ]\n            }\n            onChange={(option: SelectValue<string>) => {\n              if (option.disabled) {\n                return;\n              }\n              setSelectedDashboardId(option.value);\n            }}\n          />\n        </Wrapper>\n        <Wrapper>\n          {organization.features.includes('dashboards-top-level-filter')\n            ? t(\n                'Any conflicting filters from this query will be overridden by Dashboard filters. This is a preview of how the widget will appear in your dashboard.'\n              )\n            : t('This is a preview of how the widget will appear in your dashboard.')}\n        </Wrapper>\n        <WidgetCard\n          api={api}\n          organization={organization}\n          currentWidgetDragging={false}\n          isEditing={false}\n          isSorting={false}\n          widgetLimitReached={false}\n          selection={\n            organization.features.includes('dashboards-top-level-filter') &&\n            selectedDashboard\n              ? getSavedFiltersAsPageFilters(selectedDashboard)\n              : selection\n          }\n          dashboardFilters={\n            organization.features.includes('dashboards-top-level-filter')\n              ? getDashboardFiltersFromURL(location) ?? selectedDashboard?.filters\n              : {}\n          }\n          widget={widget}\n          showStoredAlert\n        />\n      </Body>\n\n      <Footer>\n        <StyledButtonBar gap={1.5}>\n          <Button\n            onClick={handleAddAndStayInDiscover}\n            disabled={!canSubmit || selectedDashboardId === NEW_DASHBOARD_ID}\n            title={canSubmit ? undefined : SELECT_DASHBOARD_MESSAGE}\n          >\n            {t('Add + Stay in Discover')}\n          </Button>\n          <Button\n            priority=\"primary\"\n            onClick={handleGoToBuilder}\n            disabled={!canSubmit}\n            title={canSubmit ? undefined : SELECT_DASHBOARD_MESSAGE}\n          >\n            {t('Open in Widget Builder')}\n          </Button>\n        </StyledButtonBar>\n      </Footer>\n    </Fragment>\n  );\n}\n\nexport default AddToDashboardModal;\n\nconst Wrapper = styled('div')`\n  margin-bottom: ${space(2)};\n`;\n\nconst StyledButtonBar = styled(ButtonBar)`\n  @media (max-width: ${props => props.theme.breakpoints.small}) {\n    grid-template-rows: repeat(2, 1fr);\n    gap: ${space(1.5)};\n    width: 100%;\n\n    > button {\n      width: 100%;\n    }\n  }\n`;\n\nexport const modalCss = css`\n  max-width: 700px;\n  margin: 70px auto;\n`;\n"],"names":["SELECT_DASHBOARD_MESSAGE","t","AddToDashboardModal","Header","Body","Footer","closeModal","location","organization","router","selection","widget","widgetAsQueryParams","api","useApi","dashboards","setDashboards","useState","selectedDashboard","setSelectedDashboard","selectedDashboardId","setSelectedDashboardId","useEffect","unmounted","fetchDashboards","slug","then","response","NEW_DASHBOARD_ID","fetchDashboard","canSubmit","Fragment","closeButton","Wrapper","disabled","menuPlacement","name","placeholder","value","options","label","map","title","id","widgetDisplay","isDisabled","length","MAX_WIDGETS","tooltip","tct","maxWidgets","tooltipOptions","position","onChange","option","features","includes","currentWidgetDragging","isEditing","isSorting","widgetLimitReached","getSavedFiltersAsPageFilters","dashboardFilters","getDashboardFiltersFromURL","filters","showStoredAlert","StyledButtonBar","gap","onClick","async","orderby","queries","DisplayType","columns","query","newWidget","newDashboard","widgets","updateDashboard","addSuccessMessage","e","errorMessage","handleXhrErrorResponse","addErrorMessage","undefined","priority","pathname","push","getSavedPageFilters","space","ButtonBar","props","theme","breakpoints","small","modalCss"],"sourceRoot":""}