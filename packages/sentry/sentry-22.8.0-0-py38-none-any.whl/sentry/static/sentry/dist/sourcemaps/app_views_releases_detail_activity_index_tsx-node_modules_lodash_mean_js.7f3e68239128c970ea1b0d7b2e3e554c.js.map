{"version":3,"file":"chunks/app_views_releases_detail_activity_index_tsx-node_modules_lodash_mean_js.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/useApiRequests.tsx","webpack:///./app/utils/useEffectAfterFirstRender.ts","webpack:///./app/utils/useLocation.tsx","webpack:///./app/utils/useParams.tsx","webpack:///./app/views/releases/detail/activity/releaseActivityRow.tsx","webpack:///./app/views/releases/detail/activity/types.tsx","webpack:///./app/views/releases/detail/activity/releaseActivityItems.tsx","webpack:///./app/views/releases/detail/activity/releaseActivity.tsx","webpack:///./app/views/releases/detail/activity/index.tsx","webpack:///../node_modules/lodash/_baseMean.js","webpack:///../node_modules/lodash/_baseSum.js","webpack:///../node_modules/lodash/mean.js"],"sourcesContent":["import {useCallback, useEffect, useMemo, useRef, useState} from 'react';\nimport * as Sentry from '@sentry/react';\n\nimport {ResponseMeta} from 'sentry/api';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {t} from 'sentry/locale';\nimport {metric} from 'sentry/utils/analytics';\nimport getRouteStringFromRoutes from 'sentry/utils/getRouteStringFromRoutes';\nimport useApi from 'sentry/utils/useApi';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport {useParams} from 'sentry/utils/useParams';\nimport {useRoutes} from 'sentry/utils/useRoutes';\nimport PermissionDenied from 'sentry/views/permissionDenied';\nimport RouteError from 'sentry/views/routeError';\n\nimport RequestError from './requestError/requestError';\nimport {useEffectAfterFirstRender} from './useEffectAfterFirstRender';\n\n/**\n * Turn {foo: X} into {foo: X, fooPageLinks: string}\n */\ntype UseApiRequestData<T extends Record<string, any>> = {\n  // Keys can be null on error\n  [Property in keyof T]: T[Property] | null;\n} & {\n  // Make request cursors available\n  [Property in keyof T as `${Property & string}PageLinks`]: string | null;\n};\n\ninterface State<T> {\n  /**\n   * Mapping of results from the configured endpoints\n   */\n  data: UseApiRequestData<T>;\n  /**\n   * Errors from the configured endpoionts\n   */\n  errors: Record<string, RequestError>;\n  /**\n   * Did *any* of the endpoints fail?\n   */\n  hasError: boolean;\n  /**\n   * Are the endpoints currently loading?\n   */\n  isLoading: boolean;\n  /**\n   * Are we *reloading* data without the loading state being set to true?\n   */\n  isReloading: boolean;\n  /**\n   * How many requests are still pending?\n   */\n  remainingRequests: number;\n}\n\ninterface Result<T extends Record<string, any>> extends State<T> {\n  /**\n   * renderComponent is a helper function that is used to render loading and\n   * errors state for you, and will only render your component once all endpoints\n   * have resolved.\n   *\n   * Typically you would use this when returning react for your component.\n   *\n   *   return renderComponent(\n   *     <div>{data.someEndpoint.resultKey}</div>\n   *   )\n   *\n   * The react element will only be rendered once all endpoints have been loaded.\n   */\n  renderComponent: (children: React.ReactElement) => React.ReactElement;\n}\n\ntype EndpointRequestOptions = {\n  /**\n   * Function to check if the error is allowed\n   */\n  allowError?: (error: any) => void;\n  /**\n   * Do not pass query parameters to the API\n   */\n  disableEntireQuery?: boolean;\n  /**\n   * If set then pass entire `query` object to API call\n   */\n  paginate?: boolean;\n};\n\nexport type EndpointDefinition<T extends Record<string, any>> = [\n  key: keyof T,\n  url: string,\n  urlOptions?: {query?: Record<string, string>},\n  requestOptions?: EndpointRequestOptions\n];\n\ntype Options<T extends Record<string, any>> = {\n  endpoints: EndpointDefinition<T>[];\n  /**\n   * If a request fails and is not a bad request, and if `disableErrorReport`\n   * is set to false, the UI will display an error modal.\n   *\n   * It is recommended to enable this property ideally only when the subclass\n   * is used by a top level route.\n   */\n  disableErrorReport?: boolean;\n  onLoadAllEndpointsSuccess?: () => void;\n  onRequestError?: (error: RequestError, args: Options<T>['endpoints'][0]) => void;\n  onRequestSuccess?: (data: {data: any; stateKey: keyof T; resp?: ResponseMeta}) => void;\n  /**\n   * Override this flag to have the component reload its state when the window\n   * becomes visible again. This will set the loading and reloading state, but\n   * will not render a loading state during reloading.\n   *\n   * eslint-disable-next-line react/sort-comp\n   */\n  reloadOnVisible?: boolean;\n  /**\n   * This affects how the component behaves when `remountComponent` is called\n   *\n   * By default, the component gets put back into a \"loading\" state when\n   * re-fetching data. If this is true, then when we fetch data, the original\n   * ready component remains mounted and it will need to handle any additional\n   * \"reloading\" states\n   */\n  shouldReload?: boolean;\n  /**\n   * should `renderError` render the `detail` attribute of a 400 error\n   */\n  shouldRenderBadRequests?: boolean;\n};\n\nfunction renderLoading() {\n  return <LoadingIndicator />;\n}\n\nfunction useApiRequests<T extends Record<string, any>>({\n  endpoints,\n  reloadOnVisible = false,\n  shouldReload = false,\n  shouldRenderBadRequests = false,\n  disableErrorReport = true,\n  onLoadAllEndpointsSuccess = () => {},\n  onRequestSuccess = _data => {},\n  onRequestError = (_error, _args) => {},\n}: Options<T>): Result<T> {\n  const api = useApi();\n  const location = useLocation<any>();\n  const params = useParams();\n\n  // Memoize the initialState so we can easily reuse it later\n  const initialState = useMemo<State<T>>(\n    () => ({\n      data: {} as T,\n      isLoading: false,\n      hasError: false,\n      isReloading: false,\n      errors: {},\n      remainingRequests: endpoints.length,\n    }),\n    [endpoints.length]\n  );\n\n  const [state, setState] = useState<State<T>>(initialState);\n\n  // Begin measuring the use of the hook for the given route\n  const triggerMeasurement = useMeasureApiRequests();\n\n  const handleRequestSuccess = useCallback(\n    (\n      {stateKey, data, resp}: {data: any; stateKey: keyof T; resp?: ResponseMeta},\n      initialRequest?: boolean\n    ) => {\n      setState(prevState => {\n        const newState = {\n          ...prevState,\n          data: {\n            ...prevState.data,\n            [stateKey]: data,\n            [`${stateKey as string}PageLinks`]: resp?.getResponseHeader('Link'),\n          },\n        };\n\n        if (initialRequest) {\n          newState.remainingRequests = prevState.remainingRequests - 1;\n          newState.isLoading = prevState.remainingRequests > 1;\n          newState.isReloading = prevState.isReloading && newState.isLoading;\n          triggerMeasurement({finished: newState.remainingRequests === 0});\n        }\n\n        return newState;\n      });\n\n      // if everything is loaded and we don't have an error, call the callback\n      onRequestSuccess({stateKey, data, resp});\n    },\n    [onRequestSuccess, triggerMeasurement]\n  );\n\n  const handleError = useCallback(\n    (error: RequestError, args: EndpointDefinition<T>) => {\n      const [stateKey] = args;\n\n      if (error && error.responseText) {\n        Sentry.addBreadcrumb({\n          message: error.responseText,\n          category: 'xhr',\n          level: 'error',\n        });\n      }\n\n      setState(prevState => {\n        const isLoading = prevState.remainingRequests > 1;\n        const newState = {\n          errors: {\n            ...prevState.errors,\n            [stateKey]: error,\n          },\n          data: {\n            ...prevState.data,\n            [stateKey]: null,\n          },\n          hasError: prevState.hasError || !!error,\n          remainingRequests: prevState.remainingRequests - 1,\n          isLoading,\n          isReloading: prevState.isReloading && isLoading,\n        };\n        triggerMeasurement({finished: newState.remainingRequests === 0, error: true});\n        return newState;\n      });\n\n      onRequestError(error, args);\n    },\n    [triggerMeasurement, onRequestError]\n  );\n\n  const fetchData = useCallback(\n    async (extraState: Partial<State<T>> = {}) => {\n      // Nothing to fetch if enpoints are empty\n      if (!endpoints.length) {\n        setState(prevState => ({\n          ...prevState,\n          data: {} as T,\n          isLoading: false,\n          hasError: false,\n        }));\n\n        return;\n      }\n\n      // Cancel any in flight requests\n      api.clear();\n\n      setState(prevState => ({\n        ...prevState,\n        isLoading: true,\n        hasError: false,\n        remainingRequests: endpoints.length,\n        ...extraState,\n      }));\n\n      await Promise.all(\n        endpoints.map(async ([stateKey, endpoint, parameters, options]) => {\n          options = options ?? {};\n          // If you're using nested async components/views make sure to pass the\n          // props through so that the child component has access to props.location\n          const locationQuery = (location && location.query) || {};\n          let query = (parameters && parameters.query) || {};\n          // If paginate option then pass entire `query` object to API call\n          // It should only be expecting `query.cursor` for pagination\n          if ((options.paginate || locationQuery.cursor) && !options.disableEntireQuery) {\n            query = {...locationQuery, ...query};\n          }\n          try {\n            const results = await api.requestPromise(endpoint, {\n              method: 'GET',\n              ...parameters,\n              query,\n              includeAllArgs: true,\n            });\n            const [data, _, resp] = results;\n            handleRequestSuccess({stateKey, data, resp}, true);\n          } catch (error) {\n            handleError(error, [stateKey, endpoint, parameters, options]);\n          }\n        })\n      );\n    },\n    [api, endpoints, handleError, handleRequestSuccess, location]\n  );\n\n  const reloadData = useCallback(() => fetchData({isReloading: true}), [fetchData]);\n\n  const handleMount = useCallback(async () => {\n    try {\n      await fetchData();\n    } catch (error) {\n      setState(prevState => ({...prevState, hasError: true}));\n      throw error;\n    }\n  }, [fetchData]);\n\n  // Trigger fetch on mount\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => void handleMount(), []);\n\n  const handleFullReload = useCallback(() => {\n    if (shouldReload) {\n      return reloadData();\n    }\n    setState({...initialState});\n    return fetchData();\n  }, [initialState, reloadData, fetchData, shouldReload]);\n\n  // Trigger fetch on location or parameter change\n  // useEffectAfterFirstRender to avoid calling at the same time as handleMount\n  useEffectAfterFirstRender(\n    () => void handleFullReload(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [location?.search, location?.state, params]\n  );\n\n  const visibilityReloader = useCallback(\n    () => !state.isLoading && !document.hidden && reloadData(),\n    [state.isLoading, reloadData]\n  );\n\n  // Trigger fetch on visible change when using visibilityReloader\n  useEffect(() => {\n    if (reloadOnVisible) {\n      document.addEventListener('visibilitychange', visibilityReloader);\n    }\n\n    return () => document.removeEventListener('visibilitychange', visibilityReloader);\n  }, [reloadOnVisible, visibilityReloader]);\n\n  // Trigger onLoadAllEndpointsSuccess when everything has been loaded\n  useEffect(\n    () => {\n      if (endpoints.length && state.remainingRequests === 0 && !state.hasError) {\n        onLoadAllEndpointsSuccess();\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [state.remainingRequests, state.hasError, endpoints.length]\n  );\n\n  const renderError = useCallback(\n    (error?: Error, disableLog = false): React.ReactElement => {\n      const errors = state.errors;\n\n      // 401s are captured by SudoModal, but may be passed back to AsyncComponent\n      // if they close the modal without identifying\n      const unauthorizedErrors = Object.values(errors).some(resp => resp?.status === 401);\n\n      // Look through endpoint results to see if we had any 403s, means their\n      // role can not access resource\n      const permissionErrors = Object.values(errors).some(resp => resp?.status === 403);\n\n      // If all error responses have status code === 0, then show error message\n      // but don't log it to sentry\n      const shouldLogSentry =\n        !!Object.values(errors).some(resp => resp?.status !== 0) || disableLog;\n\n      if (unauthorizedErrors) {\n        return (\n          <LoadingError message={t('You are not authorized to access this resource.')} />\n        );\n      }\n\n      if (permissionErrors) {\n        return <PermissionDenied />;\n      }\n\n      if (shouldRenderBadRequests) {\n        const badRequests = Object.values(errors)\n          .filter(resp => resp?.status === 400 && resp?.responseJSON?.detail)\n          .map(resp => resp.responseJSON.detail);\n\n        if (badRequests.length) {\n          return <LoadingError message={[...new Set(badRequests)].join('\\n')} />;\n        }\n      }\n\n      return (\n        <RouteError\n          error={error}\n          disableLogSentry={!shouldLogSentry}\n          disableReport={disableErrorReport}\n        />\n      );\n    },\n    [state.errors, disableErrorReport, shouldRenderBadRequests]\n  );\n\n  const shouldRenderLoading = state.isLoading && (!shouldReload || !state.isReloading);\n\n  const renderComponent = useCallback(\n    (children: React.ReactElement) =>\n      shouldRenderLoading\n        ? renderLoading()\n        : state.hasError\n        ? renderError(new Error('Unable to load all required endpoints'))\n        : children,\n    [shouldRenderLoading, state.hasError, renderError]\n  );\n\n  return {...state, renderComponent};\n}\n\nexport default useApiRequests;\n\ntype MetricsState = {\n  error: boolean;\n  finished: boolean;\n  hasMeasured: boolean;\n};\n\ntype MetricUpdate = Partial<Pick<MetricsState, 'finished' | 'error'>>;\n\n/**\n * Helper hook that marks a measurement when the component mounts.\n *\n * Use the `triggerMeasurement` function to trigger a measurement when the\n * useApiRequests hook has finished loading all requests. Will only trigger once\n */\nfunction useMeasureApiRequests() {\n  const routes = useRoutes();\n\n  const measurement = useRef<MetricsState>({\n    hasMeasured: false,\n    finished: false,\n    error: false,\n  });\n\n  // Start measuring immediately upon mount. We re-mark if the route list has\n  // changed, since the component is now being used under a different route\n  useEffect(() => {\n    // Reset the measurement object\n    measurement.current = {\n      hasMeasured: false,\n      finished: false,\n      error: false,\n    };\n\n    if (routes && routes.length) {\n      metric.mark({name: `async-component-${getRouteStringFromRoutes(routes)}`});\n    }\n  }, [routes]);\n\n  const triggerMeasurement = useCallback(\n    ({finished, error}: MetricUpdate) => {\n      if (!routes) {\n        return;\n      }\n\n      if (finished) {\n        measurement.current.finished = true;\n      }\n\n      if (error) {\n        measurement.current.error = true;\n      }\n\n      if (!measurement.current.hasMeasured && measurement.current.finished) {\n        const routeString = getRouteStringFromRoutes(routes);\n        metric.measure({\n          name: 'app.component.async-component',\n          start: `async-component-${routeString}`,\n          data: {\n            route: routeString,\n            error: measurement.current.error,\n          },\n        });\n\n        measurement.current.hasMeasured = true;\n      }\n    },\n    [routes]\n  );\n\n  return triggerMeasurement;\n}\n","import {useEffect, useRef} from 'react';\n\nconst useEffectAfterFirstRender = (\n  cb: React.EffectCallback,\n  deps: React.DependencyList\n): void => {\n  const firstRender = useRef<boolean>(true);\n\n  useEffect(() => {\n    if (firstRender.current) {\n      firstRender.current = false;\n      return;\n    }\n\n    cb();\n    // Dependencies are explicitly managed and the deps warning is enabled for the custom hook.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n};\n\nexport {useEffectAfterFirstRender};\n","import {Location, Query} from 'history';\n\nimport {useRouteContext} from 'sentry/utils/useRouteContext';\n\ntype DefaultQuery<T = string> = {\n  [key: string]: T | T[] | null | undefined;\n};\n\nexport function useLocation<Q extends Query = DefaultQuery>(): Location<Q> {\n  const route = useRouteContext();\n  return route.location;\n}\n","import {useRouteContext} from 'sentry/utils/useRouteContext';\n\nexport function useParams() {\n  const route = useRouteContext();\n  return route.params;\n}\n","import styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\nimport type {Color} from 'sentry/utils/theme';\n\ninterface ReleaseActivityRowProps {\n  children: React.ReactNode;\n  icon: React.ReactNode;\n  iconColor: Color;\n  hideConnector?: boolean;\n}\n\nexport function ReleaseActivityRow(props: ReleaseActivityRowProps) {\n  return (\n    <Step>\n      {props.hideConnector ? null : <StepConnector />}\n      <StepContainer>\n        <IconContainer color={props.iconColor}>{props.icon}</IconContainer>\n        <StepContent>{props.children}</StepContent>\n      </StepContainer>\n    </Step>\n  );\n}\n\nconst Step = styled('div')`\n  position: relative;\n  display: flex;\n  align-items: center;\n`;\n\nconst StepContainer = styled('div')`\n  position: relative;\n  display: flex;\n  align-items: flex-start;\n  flex-grow: 1;\n`;\n\nconst StepContent = styled('div')`\n  flex-grow: 1;\n  margin-left: ${space(3)};\n`;\n\nconst StepConnector = styled('div')`\n  position: absolute;\n  height: 100%;\n  top: 28px;\n  left: 23px;\n  border-right: 1px ${p => p.theme.gray300} dashed;\n`;\n\nconst IconContainer = styled('div')<{color: Color}>`\n  display: flex;\n  align-items: center;\n  padding: ${space(0.5)} ${space(1.5)};\n  width: 48px;\n  height: 48px;\n  border-radius: 50%;\n  background-color: ${p => p.theme[p.color]};\n`;\n","import type {Group} from 'sentry/types';\n\nexport enum ReleaseActivityType {\n  CREATED = 'CREATED',\n  DEPLOYED = 'DEPLOYED',\n  FINISHED = 'FINISHED',\n  ISSUE = 'ISSUE',\n}\n\ninterface ReleaseActivityBase {\n  data: {};\n  dateAdded: string;\n  type: ReleaseActivityType;\n}\n\nexport interface ReleaseActivityCreated extends ReleaseActivityBase {\n  type: ReleaseActivityType.CREATED;\n}\nexport interface ReleaseActivityFinished extends ReleaseActivityBase {\n  type: ReleaseActivityType.FINISHED;\n}\nexport interface ReleaseActivityIssue extends ReleaseActivityBase {\n  data: {\n    group: Group;\n  };\n  type: ReleaseActivityType.ISSUE;\n}\nexport interface ReleaseActivityDeployed extends ReleaseActivityBase {\n  data: {\n    environment: string;\n  };\n  type: ReleaseActivityType.DEPLOYED;\n}\n\nexport type ReleaseActivity =\n  | ReleaseActivityCreated\n  | ReleaseActivityFinished\n  | ReleaseActivityIssue\n  | ReleaseActivityDeployed;\n","import styled from '@emotion/styled';\n\nimport EventOrGroupExtraDetails from 'sentry/components/eventOrGroupExtraDetails';\nimport EventOrGroupHeader from 'sentry/components/eventOrGroupHeader';\nimport TimeSince from 'sentry/components/timeSince';\nimport {IconExclamation, IconSentry} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport useOrganization from 'sentry/utils/useOrganization';\n\nimport {ReleaseActivityRow} from './releaseActivityRow';\nimport {\n  ReleaseActivity,\n  ReleaseActivityDeployed,\n  ReleaseActivityIssue,\n  ReleaseActivityType,\n} from './types';\n\nfunction ReleaseActivityStartStop(props: ReleaseActivityItemProps) {\n  const isFinished = props.activity.type === ReleaseActivityType.FINISHED;\n  return (\n    <ReleaseActivityRow\n      icon={<StyledIconSentry color=\"white\" size=\"lg\" />}\n      iconColor=\"gray500\"\n      hideConnector={isFinished}\n    >\n      <div>\n        {isFinished\n          ? t('Release has been deployed for an hour and is no longer active')\n          : t('Release Created')}\n      </div>\n      <DateContainer>\n        <TimeSince date={props.activity.dateAdded} />\n      </DateContainer>\n    </ReleaseActivityRow>\n  );\n}\n\nexport function ReleaseActivityWaiting() {\n  return (\n    <ReleaseActivityRow\n      icon={<StyledIconSentry color=\"white\" size=\"lg\" />}\n      iconColor=\"gray500\"\n      hideConnector\n    >\n      <WaitingContainer>\n        {t('Waiting for new issues in this release to notify release participants ...')}\n      </WaitingContainer>\n    </ReleaseActivityRow>\n  );\n}\n\ninterface ReleaseActivityDeployProps {\n  activity: ReleaseActivityDeployed;\n}\n\nfunction ReleaseActivityDeploy(props: ReleaseActivityDeployProps) {\n  return (\n    <ReleaseActivityRow\n      icon={<StyledIconSentry color=\"white\" size=\"lg\" />}\n      iconColor=\"gray500\"\n    >\n      <div>{t('Deployed to %s', props.activity.data.environment)}</div>\n      <DateContainer>\n        <TimeSince date={props.activity.dateAdded} />\n      </DateContainer>\n    </ReleaseActivityRow>\n  );\n}\n\ninterface ReleaseIssueActivityProps {\n  activity: ReleaseActivityIssue;\n}\n\nfunction ReleaseIssueActivity(props: ReleaseIssueActivityProps) {\n  const org = useOrganization();\n  const group = props.activity.data.group;\n\n  return (\n    <ReleaseActivityRow\n      icon={<IconExclamation color=\"white\" size=\"lg\" />}\n      iconColor=\"yellow300\"\n    >\n      <GroupSummary>\n        <EventOrGroupHeader\n          organization={org}\n          data={group}\n          query=\"\"\n          size=\"normal\"\n          includeLink\n          hideLevel\n        />\n        <EventOrGroupExtraDetails data={group} showInboxTime={false} />\n      </GroupSummary>\n    </ReleaseActivityRow>\n  );\n}\n\ninterface ReleaseActivityItemProps {\n  activity: ReleaseActivity;\n}\n\nexport function ReleaseActivityItem(props: ReleaseActivityItemProps) {\n  switch (props.activity.type) {\n    case ReleaseActivityType.CREATED:\n    case ReleaseActivityType.FINISHED:\n      return <ReleaseActivityStartStop activity={props.activity} />;\n    case ReleaseActivityType.DEPLOYED:\n      return <ReleaseActivityDeploy activity={props.activity} />;\n    case ReleaseActivityType.ISSUE:\n      return <ReleaseIssueActivity activity={props.activity} />;\n    default:\n      return null;\n  }\n}\n\nconst DateContainer = styled('div')`\n  color: ${p => p.theme.subText};\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\n// Fix sentry icon looking off center\nconst StyledIconSentry = styled(IconSentry)`\n  margin-top: -${space(0.5)};\n`;\n\nconst GroupSummary = styled('div')`\n  overflow: hidden;\n  flex: 1;\n  margin-top: ${space(0.75)};\n`;\n\nconst WaitingContainer = styled('div')`\n  padding: ${space(1.5)} 0;\n`;\n","import {useContext, useEffect} from 'react';\nimport styled from '@emotion/styled';\n\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport GroupStore from 'sentry/stores/groupStore';\nimport space from 'sentry/styles/space';\nimport useApiRequests from 'sentry/utils/useApiRequests';\nimport {useParams} from 'sentry/utils/useParams';\n\nimport {ReleaseContext} from '../index';\n\nimport {ReleaseActivityItem, ReleaseActivityWaiting} from './releaseActivityItems';\nimport {ReleaseActivity, ReleaseActivityIssue, ReleaseActivityType} from './types';\n\nexport function ReleaseActivityList() {\n  const params = useParams();\n  const {project} = useContext(ReleaseContext);\n\n  const {data, renderComponent} = useApiRequests<{activities: ReleaseActivity[]}>({\n    endpoints: [\n      [\n        'activities',\n        `/projects/${params.orgId}/${project.slug}/releases/${params.release}/activity/`,\n      ],\n    ],\n  });\n\n  useEffect(() => {\n    const groups = data.activities\n      ?.filter(\n        (activity): activity is ReleaseActivityIssue =>\n          activity.type === ReleaseActivityType.ISSUE\n      )\n      .map(activity => activity.data.group);\n\n    // Add groups to the store for displaying via EventOrGroupHeader\n    GroupStore.add(groups ?? []);\n\n    return () => {\n      GroupStore.reset();\n    };\n  }, [data.activities]);\n\n  const activities = data.activities ?? [];\n  const isFinished = activities.some(\n    activity => activity.type === ReleaseActivityType.FINISHED\n  );\n\n  return renderComponent(\n    <Layout.Body>\n      <Layout.Main fullWidth>\n        <ActivityList>\n          {activities.map((activity, idx) => (\n            <ReleaseActivityItem key={idx} activity={activity} />\n          ))}\n          {isFinished ? null : <ReleaseActivityWaiting />}\n        </ActivityList>\n      </Layout.Main>\n    </Layout.Body>\n  );\n}\n\nconst ActivityList = styled('div')`\n  display: flex;\n  flex-direction: column;\n  gap: ${space(4)};\n`;\n","import Feature from 'sentry/components/acl/feature';\nimport FeatureDisabled from 'sentry/components/acl/featureDisabled';\nimport {PanelAlert} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport useOrganization from 'sentry/utils/useOrganization';\n\nimport {ReleaseActivityList} from './releaseActivity';\n\nfunction ReleaseDetailsActivity() {\n  const organization = useOrganization();\n\n  return (\n    <Feature\n      features={['organizations:active-release-monitor-alpha']}\n      organization={organization}\n      renderDisabled={() => (\n        <FeatureDisabled\n          alert={PanelAlert}\n          features={['organizations:active-release-monitor-alpha']}\n          featureName={t('Active Release Details')}\n        />\n      )}\n    >\n      <ReleaseActivityList />\n    </Feature>\n  );\n}\n\nexport default ReleaseDetailsActivity;\n","var baseSum = require('./_baseSum');\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/**\n * The base implementation of `_.mean` and `_.meanBy` without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {number} Returns the mean.\n */\nfunction baseMean(array, iteratee) {\n  var length = array == null ? 0 : array.length;\n  return length ? (baseSum(array, iteratee) / length) : NAN;\n}\n\nmodule.exports = baseMean;\n","/**\n * The base implementation of `_.sum` and `_.sumBy` without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {number} Returns the sum.\n */\nfunction baseSum(array, iteratee) {\n  var result,\n      index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var current = iteratee(array[index]);\n    if (current !== undefined) {\n      result = result === undefined ? current : (result + current);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseSum;\n","var baseMean = require('./_baseMean'),\n    identity = require('./identity');\n\n/**\n * Computes the mean of the values in `array`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {number} Returns the mean.\n * @example\n *\n * _.mean([4, 2, 8, 6]);\n * // => 5\n */\nfunction mean(array) {\n  return baseMean(array, identity);\n}\n\nmodule.exports = mean;\n"],"names":["renderLoading","endpoints","reloadOnVisible","shouldReload","shouldRenderBadRequests","disableErrorReport","onLoadAllEndpointsSuccess","onRequestSuccess","_data","onRequestError","_error","_args","api","useApi","location","useLocation","params","useParams","initialState","useMemo","data","isLoading","hasError","isReloading","errors","remainingRequests","length","state","setState","useState","triggerMeasurement","routes","useRoutes","measurement","useRef","hasMeasured","finished","error","useEffect","current","metric","name","getRouteStringFromRoutes","useCallback","routeString","start","route","useMeasureApiRequests","handleRequestSuccess","initialRequest","stateKey","resp","prevState","newState","getResponseHeader","handleError","args","responseText","Sentry","message","category","level","fetchData","async","extraState","clear","Promise","all","map","endpoint","parameters","options","locationQuery","query","paginate","cursor","disableEntireQuery","results","requestPromise","method","includeAllArgs","_","reloadData","handleMount","handleFullReload","useEffectAfterFirstRender","search","visibilityReloader","document","hidden","addEventListener","removeEventListener","renderError","disableLog","unauthorizedErrors","Object","values","some","status","permissionErrors","shouldLogSentry","t","badRequests","filter","responseJSON","detail","Set","join","disableLogSentry","disableReport","shouldRenderLoading","renderComponent","children","Error","cb","deps","firstRender","useRouteContext","ReleaseActivityRow","props","Step","hideConnector","StepConnector","StepContainer","IconContainer","color","iconColor","icon","StepContent","space","p","theme","gray300","ReleaseActivityType","ReleaseActivityStartStop","isFinished","activity","type","FINISHED","StyledIconSentry","size","DateContainer","date","dateAdded","ReleaseActivityWaiting","WaitingContainer","ReleaseActivityDeploy","environment","ReleaseIssueActivity","org","useOrganization","group","GroupSummary","organization","includeLink","hideLevel","showInboxTime","ReleaseActivityItem","CREATED","DEPLOYED","ISSUE","subText","fontSizeMedium","IconSentry","ReleaseActivityList","project","useContext","ReleaseContext","useApiRequests","orgId","slug","release","groups","activities","GroupStore","fullWidth","ActivityList","idx","ReleaseDetailsActivity","features","renderDisabled","alert","PanelAlert","featureName","baseSum","module","exports","array","iteratee","result","index","undefined","baseMean","identity"],"sourceRoot":""}