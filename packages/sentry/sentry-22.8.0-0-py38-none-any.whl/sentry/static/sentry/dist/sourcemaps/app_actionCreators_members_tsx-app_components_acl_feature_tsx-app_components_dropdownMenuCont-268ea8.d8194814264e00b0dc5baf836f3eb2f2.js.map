{"version":3,"file":"chunks/app_actionCreators_members_tsx-app_components_acl_feature_tsx-app_components_dropdownMenuCont-268ea8.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actionCreators/members.tsx","webpack:///./app/components/acl/comingSoon.tsx","webpack:///./app/components/acl/feature.tsx","webpack:///./app/components/dropdownMenuItem.tsx","webpack:///./app/components/dropdownMenuSection.tsx","webpack:///./app/components/dropdownMenuV2.tsx","webpack:///./app/components/dropdownMenuControl.tsx","webpack:///./app/utils/usePrevious.tsx"],"sourcesContent":["import * as Sentry from '@sentry/react';\n\nimport MemberActions from 'sentry/actions/memberActions';\nimport {Client} from 'sentry/api';\nimport MemberListStore from 'sentry/stores/memberListStore';\nimport {Member} from 'sentry/types';\n\nfunction getMemberUser(member: Member) {\n  return {\n    ...member.user,\n    role: member.role,\n  };\n}\n\nexport async function fetchOrgMembers(\n  api: Client,\n  orgId: string,\n  projectIds: string[] | null = null\n) {\n  const endpoint = `/organizations/${orgId}/users/`;\n  const query = projectIds ? {project: projectIds} : {};\n\n  try {\n    const members = await api.requestPromise(endpoint, {method: 'GET', query});\n\n    if (!members) {\n      // This shouldn't happen if the request was successful\n      // It should at least be an empty list\n      Sentry.withScope(scope => {\n        scope.setExtras({\n          orgId,\n          projectIds,\n        });\n        Sentry.captureException(new Error('Members is undefined'));\n      });\n    }\n\n    const memberUsers = members?.filter(({user}: Member) => user);\n\n    if (!memberUsers) {\n      return [];\n    }\n\n    // Update the store with just the users, as avatars rely on them.\n    MemberListStore.loadInitialData(memberUsers.map(getMemberUser));\n\n    return members;\n  } catch (err) {\n    Sentry.setExtras({\n      resp: err,\n    });\n    Sentry.captureException(err);\n  }\n\n  return [];\n}\n\ntype IndexedMembersByProject = Record<string, Member['user'][]>;\n\n/**\n * Convert a list of members with user & project data\n * into a object that maps project slugs : users in that project.\n */\nexport function indexMembersByProject(members: Member[]): IndexedMembersByProject {\n  return members.reduce((acc, member) => {\n    for (const project of member.projects) {\n      if (!acc.hasOwnProperty(project)) {\n        acc[project] = [];\n      }\n      acc[project].push(member.user);\n    }\n    return acc;\n  }, {});\n}\n\ntype UpdateMemberOptions = {\n  data: Member | null;\n  memberId: string;\n  orgId: string;\n};\n\nexport async function updateMember(\n  api: Client,\n  {orgId, memberId, data}: UpdateMemberOptions\n) {\n  MemberActions.update(memberId, data);\n\n  const endpoint = `/organizations/${orgId}/members/${memberId}/`;\n  try {\n    const resp = await api.requestPromise(endpoint, {\n      method: 'PUT',\n      data,\n    });\n    MemberActions.updateSuccess(resp);\n    return resp;\n  } catch (err) {\n    MemberActions.updateError(err);\n    throw err;\n  }\n}\n\ntype ResendMemberInviteOptions = {\n  memberId: string;\n  orgId: string;\n  data?: object;\n  regenerate?: boolean;\n};\n\nexport async function resendMemberInvite(\n  api: Client,\n  {orgId, memberId, regenerate, data}: ResendMemberInviteOptions\n) {\n  MemberActions.resendMemberInvite(orgId, data);\n\n  const endpoint = `/organizations/${orgId}/members/${memberId}/`;\n  try {\n    const resp = await api.requestPromise(endpoint, {\n      method: 'PUT',\n      data: {\n        regenerate,\n        reinvite: true,\n      },\n    });\n    MemberActions.resendMemberInviteSuccess(resp);\n    return resp;\n  } catch (err) {\n    MemberActions.resendMemberInviteError(err);\n    throw err;\n  }\n}\n\nexport function getCurrentMember(api: Client, orgId: string) {\n  return api.requestPromise(`/organizations/${orgId}/members/me/`);\n}\n","import Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\n\nconst ComingSoon = () => (\n  <Alert type=\"info\" showIcon>\n    {t('This feature is coming soon!')}\n  </Alert>\n);\n\nexport default ComingSoon;\n","import {Component} from 'react';\n\nimport HookStore from 'sentry/stores/hookStore';\nimport {Config, Organization, Project} from 'sentry/types';\nimport {FeatureDisabledHooks} from 'sentry/types/hooks';\nimport {isRenderFunc} from 'sentry/utils/isRenderFunc';\nimport withConfig from 'sentry/utils/withConfig';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withProject from 'sentry/utils/withProject';\n\nimport ComingSoon from './comingSoon';\n\ntype Props = {\n  /**\n   * If children is a function then will be treated as a render prop and\n   * passed FeatureRenderProps.\n   *\n   * The other interface is more simple, only show `children` if org/project has\n   * all the required feature.\n   */\n  children: React.ReactNode | ChildrenRenderFn;\n  config: Config;\n  /**\n   * List of required feature tags. Note we do not enforce uniqueness of tags anywhere.\n   * On the backend end, feature tags have a scope prefix string that is stripped out on the\n   * frontend (since feature tags are attached to a context object).\n   *\n   * Use `organizations:` or `projects:` prefix strings to specify a feature with context.\n   */\n  features: string[];\n  /**\n   * The following properties will be set by the HoCs\n   */\n  organization: Organization;\n  /**\n   * Specify the key to use for hookstore functionality.\n   *\n   * The hookName should be prefixed with `feature-disabled`.\n   *\n   * When specified, the hookstore will be checked if the feature is\n   * disabled, and the first available hook will be used as the render\n   * function.\n   */\n  hookName?: keyof FeatureDisabledHooks;\n  project?: Project;\n  /**\n   * Custom renderer function for when the feature is not enabled.\n   *\n   *  - [default] Set this to false to disable rendering anything. If the\n   *    feature is not enabled no children will be rendered.\n   *\n   *  - Set this to `true` to use the default `ComingSoon` alert component.\n   *\n   *  - Provide a custom render function to customize the rendered component.\n   *\n   * When a custom render function is used, the same object that would be\n   * passed to `children` if a func is provided there, will be used here,\n   * additionally `children` will also be passed.\n   */\n  renderDisabled?: boolean | RenderDisabledFn;\n  /**\n   * Should the component require all features or just one or more.\n   */\n  requireAll?: boolean;\n};\n\n/**\n * Common props passed to children and disabled render handlers.\n */\ntype FeatureRenderProps = {\n  features: string[];\n  hasFeature: boolean;\n  organization: Organization;\n  project?: Project;\n};\n\n/**\n * When a feature is disabled the caller of Feature may provide a `renderDisabled`\n * prop. This prop can be overridden by getsentry via hooks. Often getsentry will\n * call the original children function  but override the `renderDisabled`\n * with another function/component.\n */\ntype RenderDisabledProps = FeatureRenderProps & {\n  children: React.ReactNode | ChildrenRenderFn;\n  renderDisabled?: (props: FeatureRenderProps) => React.ReactNode;\n};\n\nexport type RenderDisabledFn = (props: RenderDisabledProps) => React.ReactNode;\n\ntype ChildRenderProps = FeatureRenderProps & {\n  renderDisabled?: undefined | boolean | RenderDisabledFn;\n};\n\nexport type ChildrenRenderFn = (props: ChildRenderProps) => React.ReactNode;\n\ntype AllFeatures = {\n  configFeatures: string[];\n  organization: string[];\n  project: string[];\n};\n\n/**\n * Component to handle feature flags.\n */\nclass Feature extends Component<Props> {\n  static defaultProps = {\n    renderDisabled: false,\n    requireAll: true,\n  };\n\n  getAllFeatures(): AllFeatures {\n    const {organization, project, config} = this.props;\n\n    return {\n      configFeatures: config.features ? Array.from(config.features) : [],\n      organization: (organization && organization.features) || [],\n      project: (project && project.features) || [],\n    };\n  }\n\n  hasFeature(feature: string, features: AllFeatures) {\n    const shouldMatchOnlyProject = feature.match(/^projects:(.+)/);\n    const shouldMatchOnlyOrg = feature.match(/^organizations:(.+)/);\n\n    // Array of feature strings\n    const {configFeatures, organization, project} = features;\n\n    // Check config store first as this overrides features scoped to org or\n    // project contexts.\n    if (configFeatures.includes(feature)) {\n      return true;\n    }\n\n    if (shouldMatchOnlyProject) {\n      return project.includes(shouldMatchOnlyProject[1]);\n    }\n\n    if (shouldMatchOnlyOrg) {\n      return organization.includes(shouldMatchOnlyOrg[1]);\n    }\n\n    // default, check all feature arrays\n    return organization.includes(feature) || project.includes(feature);\n  }\n\n  render() {\n    const {\n      children,\n      features,\n      renderDisabled,\n      hookName,\n      organization,\n      project,\n      requireAll,\n    } = this.props;\n\n    const allFeatures = this.getAllFeatures();\n    const method = requireAll ? 'every' : 'some';\n    const hasFeature =\n      !features || features[method](feat => this.hasFeature(feat, allFeatures));\n\n    // Default renderDisabled to the ComingSoon component\n    let customDisabledRender =\n      renderDisabled === false\n        ? false\n        : typeof renderDisabled === 'function'\n        ? renderDisabled\n        : () => <ComingSoon />;\n\n    // Override the renderDisabled function with a hook store function if there\n    // is one registered for the feature.\n    if (hookName) {\n      const hooks = HookStore.get(hookName);\n\n      if (hooks.length > 0) {\n        customDisabledRender = hooks[0];\n      }\n    }\n    const renderProps = {\n      organization,\n      project,\n      features,\n      hasFeature,\n    };\n\n    if (!hasFeature && customDisabledRender !== false) {\n      return customDisabledRender({children, ...renderProps});\n    }\n\n    if (isRenderFunc<ChildrenRenderFn>(children)) {\n      return children({renderDisabled, ...renderProps});\n    }\n\n    return hasFeature && children ? children : null;\n  }\n}\n\nexport default withOrganization(withProject(withConfig(Feature)));\n","import {Fragment, useEffect, useRef, useState} from 'react';\nimport {useHover, useKeyboard} from '@react-aria/interactions';\nimport {useMenuItem} from '@react-aria/menu';\nimport {mergeProps} from '@react-aria/utils';\nimport {TreeState} from '@react-stately/tree';\nimport {Node} from '@react-types/shared';\nimport {LocationDescriptor} from 'history';\n\nimport Link from 'sentry/components/links/link';\nimport MenuListItem, {\n  InnerWrap as MenuListItemInnerWrap,\n  MenuListItemProps,\n} from 'sentry/components/menuListItem';\nimport {IconChevron} from 'sentry/icons';\nimport usePrevious from 'sentry/utils/usePrevious';\n\nexport type MenuItemProps = MenuListItemProps & {\n  /**\n   * Item key. Must be unique across the entire menu, including sub-menus.\n   */\n  key: string;\n  /**\n   * Sub-items that are nested inside this item. By default, sub-items are\n   * rendered collectively as menu sections inside the current menu. If\n   * `isSubmenu` is true, then they will be rendered together in a sub-menu.\n   */\n  children?: MenuItemProps[];\n  /**\n   * Hide item from the dropdown menu. Note: this will also remove the item\n   * from the selection manager.\n   */\n  hidden?: boolean;\n  /*\n   * Whether this menu item is a trigger for a nested sub-menu. Only works\n   * when `children` is also defined.\n   */\n  isSubmenu?: boolean;\n  /**\n   * Function to call when user selects/clicks/taps on the menu item. The\n   * item's key is passed as an argument.\n   */\n  onAction?: (key: MenuItemProps['key']) => void;\n  /**\n   * Whether to show a line divider below this menu item\n   */\n  showDividers?: boolean;\n  /**\n   * Passed as the `menuTitle` prop onto the associated sub-menu (applicable\n   * if `children` is defined and `isSubmenu` is true)\n   */\n  submenuTitle?: string;\n  /**\n   * Destination if this menu item is a link. See also: `isExternalLink`.\n   */\n  to?: LocationDescriptor;\n};\n\ntype Props = {\n  /**\n   * Whether to close the menu when an item has been clicked/selected\n   */\n  closeOnSelect: boolean;\n  /**\n   * Whether this is the last node in the collection\n   */\n  isLastNode: boolean;\n  /**\n   * Node representation (from @react-aria) of the item\n   */\n  node: Node<MenuItemProps>;\n  /**\n   * Used to close the menu when needed (e.g. when the item is\n   * clicked/selected)\n   */\n  onClose: () => void;\n  /**\n   * Tree state (from @react-stately) inherited from parent menu\n   */\n  state: TreeState<MenuItemProps>;\n  /**\n   * Whether this is a trigger button (displayed as a normal menu item) for a\n   * submenu\n   */\n  isSubmenuTrigger?: boolean;\n  /**\n   * Tag name for item wrapper\n   */\n  renderAs?: React.ElementType;\n  /**\n   * If isSubmenuTrigger is true, then replace the internal ref object with\n   * this ref\n   */\n  submenuTriggerRef?: React.RefObject<HTMLLIElement>;\n};\n\n/**\n * A menu item with a label, optional details, leading and trailing elements.\n * Can also be used as a trigger button for a submenu. See:\n * https://react-spectrum.adobe.com/react-aria/useMenu.html\n */\nconst MenuItem = ({\n  node,\n  isLastNode,\n  state,\n  onClose,\n  closeOnSelect,\n  isSubmenuTrigger = false,\n  submenuTriggerRef,\n  renderAs = 'li' as React.ElementType,\n  ...submenuTriggerProps\n}: Props) => {\n  const ourRef = useRef(null);\n  const isDisabled = state.disabledKeys.has(node.key);\n  const isFocused = state.selectionManager.focusedKey === node.key;\n  const {key, onAction, to, label, showDividers, ...itemProps} = node.value;\n  const {size} = node.props;\n\n  const ref = submenuTriggerRef ?? ourRef;\n\n  const actionHandler = () => {\n    if (to) {\n      return;\n    }\n    if (isSubmenuTrigger) {\n      state.selectionManager.select(node.key);\n      return;\n    }\n    onAction?.(key);\n  };\n\n  // Open submenu on hover\n  const [isHovering, setIsHovering] = useState(false);\n  const {hoverProps} = useHover({onHoverChange: setIsHovering});\n  const prevIsHovering = usePrevious(isHovering);\n  const prevIsFocused = usePrevious(isFocused);\n  useEffect(() => {\n    if (isHovering === prevIsHovering && isFocused === prevIsFocused) {\n      return;\n    }\n\n    if (isHovering && isFocused) {\n      if (isSubmenuTrigger) {\n        state.selectionManager.select(node.key);\n        return;\n      }\n      state.selectionManager.clearSelection();\n    }\n  }, [\n    isHovering,\n    isFocused,\n    prevIsHovering,\n    prevIsFocused,\n    isSubmenuTrigger,\n    node.key,\n    state.selectionManager,\n  ]);\n\n  // Open submenu on arrow right key press\n  const {keyboardProps} = useKeyboard({\n    onKeyDown: e => {\n      if (e.key === 'Enter' && to) {\n        const mouseEvent = new MouseEvent('click', {\n          ctrlKey: e.ctrlKey,\n          metaKey: e.metaKey,\n        });\n        ref.current?.querySelector(`${MenuListItemInnerWrap}`)?.dispatchEvent(mouseEvent);\n        onClose();\n        return;\n      }\n\n      if (e.key === 'ArrowRight' && isSubmenuTrigger) {\n        state.selectionManager.select(node.key);\n        return;\n      }\n\n      e.continuePropagation();\n    },\n  });\n\n  // Manage interactive events & create aria attributes\n  const {menuItemProps, labelProps, descriptionProps} = useMenuItem(\n    {\n      key: node.key,\n      onAction: actionHandler,\n      closeOnSelect: to ? false : closeOnSelect,\n      onClose,\n      isDisabled,\n    },\n    state,\n    ref\n  );\n\n  // Merged menu item props, class names are combined, event handlers chained,\n  // etc. See: https://react-spectrum.adobe.com/react-aria/mergeProps.html\n  const props = mergeProps(submenuTriggerProps, menuItemProps, hoverProps, keyboardProps);\n  const itemLabel = node.rendered ?? label;\n  const showDivider = showDividers && !isLastNode;\n  const innerWrapProps = {as: to ? Link : 'div', to};\n\n  return (\n    <MenuListItem\n      ref={ref}\n      as={renderAs}\n      data-test-id={key}\n      label={itemLabel}\n      isDisabled={isDisabled}\n      isFocused={isFocused}\n      showDivider={showDivider}\n      innerWrapProps={innerWrapProps}\n      labelProps={labelProps}\n      detailsProps={descriptionProps}\n      size={size}\n      {...props}\n      {...itemProps}\n      {...(isSubmenuTrigger && {\n        role: 'menuitemradio',\n        trailingItems: (\n          <Fragment>\n            {itemProps.trailingItems}\n            <IconChevron size=\"xs\" direction=\"right\" aria-hidden=\"true\" />\n          </Fragment>\n        ),\n      })}\n    />\n  );\n};\n\nexport default MenuItem;\n","import styled from '@emotion/styled';\nimport {useMenuSection} from '@react-aria/menu';\nimport {Node} from '@react-types/shared';\n\nimport {MenuItemProps} from 'sentry/components/dropdownMenuItem';\nimport space from 'sentry/styles/space';\n\ntype Props = {\n  children: React.ReactNode;\n  node: Node<MenuItemProps>;\n};\n\n/**\n * A wrapper component for menu sections. See:\n * https://react-spectrum.adobe.com/react-aria/useMenu.html\n */\nfunction MenuSection({node, children}: Props) {\n  const {itemProps, headingProps, groupProps} = useMenuSection({\n    heading: node.rendered,\n    'aria-label': node['aria-label'],\n  });\n\n  return (\n    <MenuSectionWrap {...itemProps}>\n      {node.rendered && <Heading {...headingProps}>{node.rendered}</Heading>}\n      <Group {...groupProps}>{children}</Group>\n    </MenuSectionWrap>\n  );\n}\n\nexport default MenuSection;\n\nconst MenuSectionWrap = styled('li')`\n  list-style-type: none;\n`;\n\nconst Heading = styled('span')`\n  display: inline-block;\n  font-weight: 600;\n  font-size: ${p => p.theme.fontSizeSmall};\n  color: ${p => p.theme.subText};\n  text-transform: uppercase;\n  white-space: nowrap;\n  margin: ${space(1)} ${space(1.5)} ${space(0.5)};\n  padding-right: ${space(1)};\n\n  ${/* sc-selector */ MenuSectionWrap}:first-of-type & {\n    margin-top: ${space(0.5)};\n  }\n`;\n\nconst Group = styled('ul')`\n  list-style-type: none;\n  padding: 0;\n  margin: 0;\n`;\n","import {Fragment, useEffect, useMemo, useRef, useState} from 'react';\nimport styled from '@emotion/styled';\nimport {FocusScope} from '@react-aria/focus';\nimport {useKeyboard} from '@react-aria/interactions';\nimport {AriaMenuOptions, useMenu} from '@react-aria/menu';\nimport {\n  AriaPositionProps,\n  OverlayProps,\n  PositionAria,\n  useOverlay,\n  useOverlayPosition,\n} from '@react-aria/overlays';\nimport {useSeparator} from '@react-aria/separator';\nimport {mergeProps} from '@react-aria/utils';\nimport {useTreeState} from '@react-stately/tree';\nimport {Node} from '@react-types/shared';\n\nimport MenuControl from 'sentry/components/dropdownMenuControl';\nimport MenuItem, {MenuItemProps} from 'sentry/components/dropdownMenuItem';\nimport MenuSection from 'sentry/components/dropdownMenuSection';\nimport space from 'sentry/styles/space';\n\ntype Props = {\n  /**\n   * If this is a submenu, it will in some cases need to close the root menu\n   * (e.g. when a submenu item is clicked).\n   */\n  closeRootMenu: () => void;\n  /**\n   * Whether this is a submenu\n   */\n  isSubmenu: boolean;\n  /**\n   * Ref object to the trigger element, needed for useOverlayPosition()\n   */\n  triggerRef: React.RefObject<HTMLButtonElement>;\n  /**\n   * If this is a submenu, it will in some cases need to close itself (e.g.\n   * when the user presses the arrow left key)\n   */\n  closeCurrentSubmenu?: () => void;\n  /**\n   * Whether the menu should close when an item has been clicked/selected\n   */\n  closeOnSelect?: boolean;\n  /*\n   * Title to display on top of the menu\n   */\n  menuTitle?: string;\n  onClose?: () => void;\n  size?: MenuItemProps['size'];\n  /**\n   * Current width of the trigger element. This is used as the menu's minimum\n   * width.\n   */\n  triggerWidth?: number;\n} & AriaMenuOptions<MenuItemProps> &\n  Partial<OverlayProps> &\n  Partial<AriaPositionProps>;\n\nfunction Menu({\n  offset = 8,\n  crossOffset = 0,\n  containerPadding = 0,\n  placement = 'bottom left',\n  closeOnSelect = true,\n  triggerRef,\n  triggerWidth,\n  size,\n  isSubmenu,\n  menuTitle,\n  closeRootMenu,\n  closeCurrentSubmenu,\n  isDismissable = true,\n  shouldCloseOnBlur = true,\n  ...props\n}: Props) {\n  const state = useTreeState<MenuItemProps>({...props, selectionMode: 'single'});\n  const stateCollection = useMemo(() => [...state.collection], [state.collection]);\n\n  // Implement focus states, keyboard navigation, aria-label,...\n  const menuRef = useRef(null);\n  const {menuProps} = useMenu({...props, selectionMode: 'single'}, state, menuRef);\n  const {separatorProps} = useSeparator({elementType: 'li'});\n\n  // If this is a submenu, pressing arrow left should close it (but not the\n  // root menu).\n  const {keyboardProps} = useKeyboard({\n    onKeyDown: e => {\n      if (isSubmenu && e.key === 'ArrowLeft') {\n        closeCurrentSubmenu?.();\n        return;\n      }\n      e.continuePropagation();\n    },\n  });\n\n  // Close the menu on outside interaction, blur, or Esc key press, and\n  // control its position relative to the trigger button. See:\n  // https://react-spectrum.adobe.com/react-aria/useOverlay.html\n  // https://react-spectrum.adobe.com/react-aria/useOverlayPosition.html\n  const overlayRef = useRef(null);\n  const {overlayProps} = useOverlay(\n    {\n      onClose: closeRootMenu,\n      shouldCloseOnBlur,\n      isDismissable,\n      isOpen: true,\n      shouldCloseOnInteractOutside: target =>\n        target && triggerRef.current !== target && !triggerRef.current?.contains(target),\n    },\n    overlayRef\n  );\n  const {overlayProps: positionProps, placement: placementProp} = useOverlayPosition({\n    targetRef: triggerRef,\n    overlayRef,\n    offset,\n    crossOffset,\n    placement,\n    containerPadding,\n    isOpen: true,\n    // useOverlayPosition's algorithm doesn't work well for submenus on viewport\n    // scroll. Changing the boundary element (document.body by default) seems to\n    // fix this.\n    boundaryElement: document.querySelector<HTMLElement>('.app') ?? undefined,\n  });\n\n  // Store whether this menu/submenu is the current focused one, which in a\n  // nested, tree-like menu system should be the leaf submenu. This\n  // information is used for controlling keyboard events. See:\n  // modifiedMenuProps below.\n  const [hasFocus, setHasFocus] = useState(true);\n  useEffect(() => {\n    // A submenu is a leaf when it does not contain any expanded submenu. This\n    // logically follows from the tree-like structure and single-selection\n    // nature of menus.\n    const isLeafSubmenu = !stateCollection.some(node => {\n      const isSection = node.hasChildNodes && !node.value.isSubmenu;\n      // A submenu with key [key] is expanded if\n      // state.selectionManager.isSelected([key]) = true\n      return isSection\n        ? [...node.childNodes].some(child =>\n            state.selectionManager.isSelected(`${child.key}`)\n          )\n        : state.selectionManager.isSelected(`${node.key}`);\n    });\n    setHasFocus(isLeafSubmenu);\n  }, [stateCollection, state.selectionManager]);\n  // Menu props from useMenu, modified to disable keyboard events if the\n  // current menu does not have focus.\n  const modifiedMenuProps = {\n    ...menuProps,\n    ...(!hasFocus && {\n      onKeyUp: () => null,\n      onKeyDown: () => null,\n    }),\n  };\n\n  // Render a single menu item\n  const renderItem = (node: Node<MenuItemProps>, isLastNode: boolean) => {\n    return (\n      <MenuItem\n        node={node}\n        isLastNode={isLastNode}\n        state={state}\n        onClose={closeRootMenu}\n        closeOnSelect={closeOnSelect}\n      />\n    );\n  };\n\n  // Render a submenu whose trigger button is a menu item\n  const renderItemWithSubmenu = (node: Node<MenuItemProps>, isLastNode: boolean) => {\n    const trigger = ({props: submenuTriggerProps, ref: submenuTriggerRef}) => (\n      <MenuItem\n        renderAs=\"div\"\n        node={node}\n        isLastNode={isLastNode}\n        state={state}\n        isSubmenuTrigger\n        submenuTriggerRef={submenuTriggerRef}\n        {...submenuTriggerProps}\n      />\n    );\n\n    return (\n      <MenuControl\n        items={node.value.children as MenuItemProps[]}\n        trigger={trigger}\n        menuTitle={node.value.submenuTitle}\n        placement=\"right top\"\n        offset={-4}\n        crossOffset={-8}\n        closeOnSelect={closeOnSelect}\n        isOpen={state.selectionManager.isSelected(node.key)}\n        size={size}\n        isSubmenu\n        closeRootMenu={closeRootMenu}\n        closeCurrentSubmenu={() => state.selectionManager.clearSelection()}\n        renderWrapAs=\"li\"\n      />\n    );\n  };\n\n  // Render a collection of menu items\n  const renderCollection = (collection: Node<MenuItemProps>[]) =>\n    collection.map((node, i) => {\n      const isLastNode = collection.length - 1 === i;\n      const showSeparator =\n        !isLastNode && (node.type === 'section' || collection[i + 1]?.type === 'section');\n\n      let itemToRender: React.ReactNode;\n\n      if (node.type === 'section') {\n        itemToRender = (\n          <MenuSection node={node}>{renderCollection([...node.childNodes])}</MenuSection>\n        );\n      } else {\n        itemToRender = node.value.isSubmenu\n          ? renderItemWithSubmenu(node, isLastNode)\n          : renderItem(node, isLastNode);\n      }\n\n      return (\n        <Fragment key={node.key}>\n          {itemToRender}\n          {showSeparator && <Separator {...separatorProps} />}\n        </Fragment>\n      );\n    });\n\n  return (\n    <FocusScope restoreFocus autoFocus>\n      <Overlay\n        ref={overlayRef}\n        placementProp={placementProp}\n        {...mergeProps(overlayProps, positionProps, keyboardProps)}\n      >\n        <MenuWrap\n          ref={menuRef}\n          {...modifiedMenuProps}\n          style={{\n            maxHeight: positionProps.style?.maxHeight,\n            minWidth: triggerWidth,\n          }}\n        >\n          {menuTitle && <MenuTitle>{menuTitle}</MenuTitle>}\n          {renderCollection(stateCollection)}\n        </MenuWrap>\n      </Overlay>\n    </FocusScope>\n  );\n}\n\nexport default Menu;\n\nconst Overlay = styled('div')<{placementProp: PositionAria['placement']}>`\n  max-width: 24rem;\n  border-radius: ${p => p.theme.borderRadius};\n  background: ${p => p.theme.backgroundElevated};\n  box-shadow: 0 0 0 1px ${p => p.theme.translucentBorder}, ${p => p.theme.dropShadowHeavy};\n  font-size: ${p => p.theme.fontSizeMedium};\n\n  margin: ${space(1)} 0;\n  ${p => p.placementProp === 'top' && `margin-bottom: 0;`}\n  ${p => p.placementProp === 'bottom' && `margin-top: 0;`}\n\n  /* Override z-index from useOverlayPosition */\n  z-index: ${p => p.theme.zIndex.dropdown} !important;\n`;\n\nconst MenuWrap = styled('ul')`\n  margin: 0;\n  padding: ${space(0.5)} 0;\n  font-size: ${p => p.theme.fontSizeMedium};\n  overflow-x: hidden;\n  overflow-y: auto;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst MenuTitle = styled('div')`\n  font-weight: 600;\n  font-size: ${p => p.theme.fontSizeSmall};\n  color: ${p => p.theme.headingColor};\n  white-space: nowrap;\n  padding: ${space(0.25)} ${space(1.5)} ${space(0.75)};\n  margin-bottom: ${space(0.5)};\n  border-bottom: solid 1px ${p => p.theme.innerBorder};\n`;\n\nconst Separator = styled('li')`\n  list-style-type: none;\n  border-top: solid 1px ${p => p.theme.innerBorder};\n  margin: ${space(0.5)} ${space(1.5)};\n`;\n","import {useCallback, useEffect, useRef, useState} from 'react';\nimport styled from '@emotion/styled';\nimport {useButton} from '@react-aria/button';\nimport {AriaMenuOptions, useMenuTrigger} from '@react-aria/menu';\nimport {AriaPositionProps, OverlayProps} from '@react-aria/overlays';\nimport {useResizeObserver} from '@react-aria/utils';\nimport {Item, Section} from '@react-stately/collections';\nimport {useMenuTriggerState} from '@react-stately/menu';\nimport {MenuTriggerProps} from '@react-types/menu';\n\nimport DropdownButton, {DropdownButtonProps} from 'sentry/components/dropdownButton';\nimport {MenuItemProps} from 'sentry/components/dropdownMenuItem';\nimport Menu from 'sentry/components/dropdownMenuV2';\nimport {FormSize} from 'sentry/utils/theme';\n\ntype TriggerProps = {\n  props: Omit<React.HTMLAttributes<Element>, 'children'> & {\n    onClick?: (e: MouseEvent) => void;\n  };\n  ref: React.RefObject<HTMLButtonElement>;\n};\n\ntype Props = {\n  /**\n   * Items to display inside the dropdown menu. If the item has a `children`\n   * prop, it will be rendered as a menu section. If it has a `children` prop\n   * and its `isSubmenu` prop is true, it will be rendered as a submenu.\n   */\n  items: MenuItemProps[];\n  /**\n   * Pass class name to the outer wrap\n   */\n  className?: string;\n  /**\n   * If this is a submenu, it will in some cases need to close itself (e.g.\n   * when the user presses the arrow left key)\n   */\n  closeCurrentSubmenu?: () => void;\n  /**\n   * If this is a submenu, it will in some cases need to close the root menu\n   * (e.g. when a submenu item is clicked).\n   */\n  closeRootMenu?: () => void;\n  /**\n   * Whether the trigger is disabled.\n   */\n  isDisabled?: boolean;\n  /**\n   * Whether this is a submenu.\n   */\n  isSubmenu?: boolean;\n  /**\n   * Title for the current menu.\n   */\n  menuTitle?: string;\n  /**\n   * Tag name for the outer wrap, defaults to `div`\n   */\n  renderWrapAs?: React.ElementType;\n  /**\n   * Affects the size of the trigger button and menu items.\n   */\n  size?: FormSize;\n  /**\n   * Optionally replace the trigger button with a different component. Note\n   * that the replacement must have the `props` and `ref` (supplied in\n   * TriggerProps) forwarded its outer wrap, otherwise the accessibility\n   * features won't work correctly.\n   */\n  trigger?: (props: TriggerProps) => React.ReactNode;\n  /**\n   * By default, the menu trigger will be rendered as a button, with\n   * triggerLabel as the button label.\n   */\n  triggerLabel?: React.ReactNode;\n  /**\n   * If using the default button trigger (i.e. the custom `trigger` prop has\n   * not been provided), then `triggerProps` will be passed on to the button\n   * component.\n   */\n  triggerProps?: DropdownButtonProps;\n} & Partial<MenuTriggerProps> &\n  Partial<AriaMenuOptions<MenuItemProps>> &\n  Partial<OverlayProps> &\n  Partial<AriaPositionProps>;\n\n/**\n * A menu component that renders both the trigger button and the dropdown\n * menu. See: https://react-spectrum.adobe.com/react-aria/useMenuTrigger.html\n */\nfunction MenuControl({\n  items,\n  trigger,\n  triggerLabel,\n  triggerProps = {},\n  isDisabled: disabledProp,\n  isSubmenu = false,\n  closeRootMenu,\n  closeCurrentSubmenu,\n  renderWrapAs = 'div',\n  size = 'md',\n  className,\n  ...props\n}: Props) {\n  const ref = useRef<HTMLButtonElement>(null);\n  const isDisabled = disabledProp ?? (!items || items.length === 0);\n\n  // Control the menu open state. See:\n  // https://react-spectrum.adobe.com/react-aria/useMenuTrigger.html\n  const state = useMenuTriggerState(props);\n  const {menuTriggerProps, menuProps} = useMenuTrigger(\n    {type: 'menu', isDisabled},\n    state,\n    ref\n  );\n  const {buttonProps} = useButton(\n    {\n      isDisabled,\n      ...menuTriggerProps,\n      ...(isSubmenu && {\n        onKeyUp: e => e.continuePropagation(),\n        onKeyDown: e => e.continuePropagation(),\n        onPress: () => null,\n        onPressStart: () => null,\n        onPressEnd: () => null,\n      }),\n    },\n    ref\n  );\n\n  // Calculate the current trigger element's width. This will be used as\n  // the min width for the menu.\n  const [triggerWidth, setTriggerWidth] = useState<number>();\n  // Update triggerWidth when its size changes using useResizeObserver\n  const updateTriggerWidth = useCallback(async () => {\n    // Wait until the trigger element finishes rendering, otherwise\n    // ResizeObserver might throw an infinite loop error.\n    await new Promise(resolve => window.setTimeout(resolve));\n\n    const newTriggerWidth = ref.current?.offsetWidth;\n    !isSubmenu && newTriggerWidth && setTriggerWidth(newTriggerWidth);\n  }, [isSubmenu]);\n\n  useResizeObserver({ref, onResize: updateTriggerWidth});\n  // If ResizeObserver is not available, manually update the width\n  // when any of [trigger, triggerLabel, triggerProps] changes.\n  useEffect(() => {\n    if (typeof window.ResizeObserver !== 'undefined') {\n      return;\n    }\n    updateTriggerWidth();\n  }, [updateTriggerWidth]);\n\n  // Recursively remove hidden items, including those nested in submenus\n  function removeHiddenItems(source) {\n    return source\n      .filter(item => !item.hidden)\n      .map(item => ({\n        ...item,\n        ...(item.children ? {children: removeHiddenItems(item.children)} : {}),\n      }));\n  }\n\n  function renderTrigger() {\n    if (trigger) {\n      return trigger({\n        props: {\n          size,\n          isOpen: state.isOpen,\n          ...triggerProps,\n          ...buttonProps,\n        },\n        ref,\n      });\n    }\n    return (\n      <DropdownButton\n        ref={ref}\n        size={size}\n        isOpen={state.isOpen}\n        {...triggerProps}\n        {...buttonProps}\n      >\n        {triggerLabel}\n      </DropdownButton>\n    );\n  }\n\n  function renderMenu() {\n    if (!state.isOpen) {\n      return null;\n    }\n\n    return (\n      <Menu\n        {...props}\n        {...menuProps}\n        triggerRef={ref}\n        triggerWidth={triggerWidth}\n        size={size}\n        isSubmenu={isSubmenu}\n        isDismissable={!isSubmenu && props.isDismissable}\n        shouldCloseOnBlur={!isSubmenu && props.shouldCloseOnBlur}\n        closeRootMenu={closeRootMenu ?? state.close}\n        closeCurrentSubmenu={closeCurrentSubmenu}\n        items={removeHiddenItems(items)}\n      >\n        {(item: MenuItemProps) => {\n          if (item.children && item.children.length > 0 && !item.isSubmenu) {\n            return (\n              <Section key={item.key} title={item.label} items={item.children}>\n                {sectionItem => (\n                  <Item size={size} {...sectionItem}>\n                    {sectionItem.label}\n                  </Item>\n                )}\n              </Section>\n            );\n          }\n          return (\n            <Item size={size} {...item}>\n              {item.label}\n            </Item>\n          );\n        }}\n      </Menu>\n    );\n  }\n\n  return (\n    <MenuControlWrap className={className} as={renderWrapAs} role=\"presentation\">\n      {renderTrigger()}\n      {renderMenu()}\n    </MenuControlWrap>\n  );\n}\n\nexport default MenuControl;\n\nconst MenuControlWrap = styled('div')`\n  list-style-type: none;\n`;\n","import {useEffect, useRef} from 'react';\n\n/**\n * Provides previous prop or state inside of function components.\n * It’s possible that in the future React will provide a usePrevious Hook out of the box since it’s a relatively common use case.\n * @see {@link https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state}\n *\n * @returns 'ref.current' and therefore should not be used as a dependency of useEffect.\n * Mutable values like 'ref.current' are not valid dependencies of useEffect because changing them does not re-render the component.\n */\nfunction usePrevious<T>(value: T): T {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref = useRef<T>(value);\n  // Store current value in ref\n  useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n  // Return previous value (happens before update in useEffect above)\n  return ref.current;\n}\n\nexport default usePrevious;\n"],"names":["getMemberUser","member","user","role","async","fetchOrgMembers","api","orgId","projectIds","endpoint","query","project","members","requestPromise","method","Sentry","scope","setExtras","Error","memberUsers","filter","MemberListStore","map","err","resp","indexMembersByProject","reduce","acc","projects","hasOwnProperty","push","updateMember","memberId","data","MemberActions","resendMemberInvite","regenerate","reinvite","ComingSoon","type","showIcon","t","Feature","Component","getAllFeatures","organization","config","this","props","configFeatures","features","Array","from","hasFeature","feature","shouldMatchOnlyProject","match","shouldMatchOnlyOrg","includes","render","children","renderDisabled","hookName","requireAll","allFeatures","feat","customDisabledRender","hooks","HookStore","length","renderProps","isRenderFunc","withOrganization","withProject","withConfig","MenuItem","node","isLastNode","state","onClose","closeOnSelect","isSubmenuTrigger","submenuTriggerRef","renderAs","submenuTriggerProps","ourRef","useRef","isDisabled","disabledKeys","has","key","isFocused","selectionManager","focusedKey","onAction","to","label","showDividers","itemProps","value","size","ref","isHovering","setIsHovering","useState","hoverProps","useHover","onHoverChange","prevIsHovering","usePrevious","prevIsFocused","useEffect","select","clearSelection","keyboardProps","useKeyboard","onKeyDown","e","mouseEvent","MouseEvent","ctrlKey","metaKey","current","querySelector","MenuListItemInnerWrap","dispatchEvent","continuePropagation","menuItemProps","labelProps","descriptionProps","useMenuItem","mergeProps","itemLabel","rendered","showDivider","innerWrapProps","as","Link","detailsProps","trailingItems","Fragment","direction","MenuSection","headingProps","groupProps","useMenuSection","heading","MenuSectionWrap","Heading","Group","p","theme","fontSizeSmall","subText","space","Menu","offset","crossOffset","containerPadding","placement","triggerRef","triggerWidth","isSubmenu","menuTitle","closeRootMenu","closeCurrentSubmenu","isDismissable","shouldCloseOnBlur","useTreeState","selectionMode","stateCollection","useMemo","collection","menuRef","menuProps","useMenu","separatorProps","useSeparator","elementType","overlayRef","overlayProps","useOverlay","isOpen","shouldCloseOnInteractOutside","target","contains","positionProps","placementProp","useOverlayPosition","targetRef","boundaryElement","document","undefined","hasFocus","setHasFocus","isLeafSubmenu","some","hasChildNodes","childNodes","child","isSelected","modifiedMenuProps","onKeyUp","renderCollection","i","showSeparator","itemToRender","items","trigger","submenuTitle","renderWrapAs","renderItemWithSubmenu","renderItem","Separator","restoreFocus","autoFocus","Overlay","MenuWrap","style","maxHeight","minWidth","MenuTitle","borderRadius","backgroundElevated","translucentBorder","dropShadowHeavy","fontSizeMedium","zIndex","dropdown","headingColor","innerBorder","MenuControl","triggerLabel","triggerProps","disabledProp","className","useMenuTriggerState","menuTriggerProps","useMenuTrigger","buttonProps","useButton","onPress","onPressStart","onPressEnd","setTriggerWidth","updateTriggerWidth","useCallback","Promise","resolve","window","setTimeout","newTriggerWidth","offsetWidth","useResizeObserver","onResize","ResizeObserver","MenuControlWrap","close","removeHiddenItems","source","item","hidden","title","sectionItem"],"sourceRoot":""}