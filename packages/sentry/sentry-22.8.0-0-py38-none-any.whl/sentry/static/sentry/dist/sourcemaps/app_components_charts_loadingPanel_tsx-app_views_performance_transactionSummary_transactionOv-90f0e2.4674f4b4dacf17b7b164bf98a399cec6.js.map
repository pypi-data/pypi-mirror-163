{"version":3,"file":"chunks/app_components_charts_loadingPanel_tsx-app_views_performance_transactionSummary_transactionOv-90f0e2.xxxxxxxxxxxxxxxxxxxx.js","mappings":"ydAQA,MAAMA,GAAe,QAAO,QAAEC,OAAQC,KAAYC,GAAtB,SAC1B,kBAASA,EAAT,UACE,QAAC,IAAD,QAFiB,qBAAH,gDAQNC,GAAKA,EAAEH,QARD,gEAclBD,EAAaK,aAAe,CAC1BJ,OAAQ,SAGV,W,8DCtBA,MAUA,GAVoB,E,kFAAA,GAAO,MAAP,sBAAH,qBACKG,GAAKA,EAAEE,MAAMC,qBADlB,mBAEEH,GAAKA,EAAEE,MAAME,cAFf,sD,sOCyBjB,SAASC,EAAoBN,GAC3B,MAAMO,EALR,SAAuBP,GACrB,OAAOQ,EAAAA,EAAAA,IAASR,EAA2BS,aAIjBC,CAAcV,GACpCA,EAAMS,YAAc,IAV1B,SAAwBT,GACtB,OAAOQ,EAAAA,EAAAA,IAASR,EAA4BW,cAUxCC,CAAeZ,GACfA,EAAMW,aAAe,IACrBX,EAAMa,QAEV,OACE,QAAC,IAAD,CACEC,aAAcd,EAAMc,aACpBD,QAASN,EACTQ,YAAa,IAXVT,EAAAA,YAAAA,sBAgBT,W,sRCKO,SAASU,EAAmBC,GACjC,MAAM,gBAACC,GAAmBD,EAc1B,OAbA,SAAsCjB,GACpC,MAAM,UAACmB,GAAanB,EACdoB,EAAyBD,EAAUE,oBAAoBrB,EAAMsB,UASnE,OARAF,EAAWF,gBAAkBA,EAC7BE,EAAWG,KAAON,EAAOM,KAAON,EAAOM,KAAOH,EAAWG,KACrDN,EAAOO,aACTJ,EAAWI,WAAaP,EAAOO,YAE7BP,EAAOQ,SACTL,EAAWK,OAASR,EAAOQ,QAEtBL,GAKX,SAASM,EAAkBC,EAAuBC,GAChD,OACED,EAAUT,kBAAoBU,EAAUV,iBACxCS,EAAUJ,OAASK,EAAUL,MAC7BI,EAAUH,aAAeI,EAAUJ,YACnCG,EAAUF,SAAWG,EAAUH,OAInC,SAASI,EAAqB7B,GAC5B,OACE,QAAC,KAAD,CACE8B,MAAM,4BACNC,kBAAmBf,EAAmBhB,GACtC0B,kBAAmBA,KACf1B,IAND6B,EAAAA,YAAAA,uBAWT,SAAeG,EAAAA,EAAAA,GAAQH,I,g/CC5CvB,MAAMI,EAAmB,cAgBnBC,EAA4B,CAChC,CACEC,IAAK,MACLC,MAAO,MACPC,KAAM,UACNC,OAAQ,EACRC,OAAQ,CACNC,KAAM,UAGV,CACEL,IAAK,WACLC,MAAO,WACPC,KAAM,aACNC,OAAQ,EACRC,OAAQ,CACNC,KAAM,UAGV,CACEL,IAAK,YACLC,MAAO,YACPC,KAAM,eACNC,OAAQ,EACRC,OAAQ,CACNC,KAAM,SAERC,SAAS,GAEX,CACEN,IAAK,YACLC,MAAO,YACPC,KAAM,YACNC,OAAQ,EACRC,OAAQ,CACNC,KAAM,SAERC,SAAS,GAEX,CACEN,IAAK,aACLC,MAAO,aACPC,KAAM,kBACNC,OAAQ,EACRC,OAAQ,CACNC,KAAM,SAERC,SAAS,GAEX,CACEN,IAAK,WACLC,MAAO,WACPC,KAAM,kBACNC,OAAQ,EACRC,OAAQ,CACNC,KAAM,SAERC,SAAS,IAIAC,EAAsB,CACjCC,EACAC,EACAzB,KAEA,MAAM0B,EAAkBC,EAAAA,GAAyCH,GACjE,OAAIE,KAIoBE,EAAAA,EAAAA,IAAuCH,EAAUzB,KACjD6B,EAAAA,GAAAA,SACf,mBAGF,yBAkCF,SAASC,EAASjD,GACvB,OAAO,eAAKkD,UAAU,WAAf,SAA2BlD,EAAMmD,IAAIC,aAD9BH,EAAAA,YAAAA,WAgBT,MAAMI,UAAoBC,EAAAA,UAAiB,uDACjC,CACbC,OAAQ,MAFsC,kCAK3B,CAACC,EAAqBC,KACzC,MAAMF,EAAmB,IAAIG,KAAKC,MAAMJ,QACxCA,EAAOC,GAAeC,EAAWnB,MAC7BsB,OAAOH,EAAWnB,OAClBuB,EAAAA,GACJH,KAAKI,SAAS,CAACP,OAAAA,QAV+B,8BAa9BQ,IAChB,MAAM,OAACR,GAAUG,KAAKC,MACtB,OAAOI,EAAQC,KAAI,CAACC,EAAsBC,IACf,iBAAdX,EAAOW,GACT,IAAID,EAAK3B,MAAOiB,EAAOW,IAEzBD,QAnBqC,sCA2EvB,CACvBE,EACAC,EACAL,IAEO,CAACxB,EAAiC8B,IACvCX,KAAKY,eAAeH,EAAiBC,EAAW7B,EAAQwB,EAAQM,OAjFpB,mCAoF1B,CAAC/C,EAAoBG,EAAgB8C,KACzD,MAAM,aAACC,GAAgBd,KAAK1D,OAC5ByE,EAAAA,EAAAA,IAAoB,CAClBC,SAAU,mDACVC,UAAW,gDACXC,gBAAiBC,SAASL,EAAaM,GAAI,MAG7C,MAAMC,GAAcC,EAAAA,EAAAA,IAAa1D,EAAS2D,MAAMA,OAC1CC,EAAa,IAAIC,EAAAA,GAAcJ,MAAAA,EAAAA,EAAe,IAEpDG,EAAWE,gBAAgB3D,EAAQ,CAAC8C,IAEpC,MAAMU,EAAQC,EAAWG,eACzBC,EAAAA,eAAAA,KAAoB,CAClBC,SAAUjE,EAASiE,SACnBN,MAAO,IACF3D,EAAS2D,MACZA,MAAOO,OAAOP,GAAOQ,cAtGqB,gCA2G7B,CACjBlD,EACAgC,EACAmB,IAEQC,IACN,MAAM,UAACxE,EAAD,SAAYG,EAAZ,aAAsBkD,GAAgBd,KAAK1D,OACjDyE,EAAAA,EAAAA,IAAoB,CAClBC,SAAU,qDACVC,UAAW,sDACXC,gBAAiBC,SAASL,EAAaM,GAAI,MAG7C,MAAMc,GAAmBC,EAAAA,EAAAA,IAA0B1E,EAAU8D,QAE7Da,EAAAA,EAAAA,IAAYF,EAAkBD,EAAQ,IAAIpD,EAAQF,KAAMqD,EAAUZ,IAAKP,GAEvEe,EAAAA,eAAAA,KAAoB,CAClBC,SAAUjE,EAASiE,SACnBN,MAAO,IACF3D,EAAS2D,MACZ,CAAChD,QAAmB8D,EACpBd,MAAOW,EAAiBP,sBAjIgB,8BAgJ/B,CACfW,EACAzD,EACA0D,KAEA,MAAMC,EAAQD,EAAQ1D,EAAOJ,MACvB,SAACb,EAAD,aAAWkD,EAAX,gBAAyB2B,GAAmBH,EAElD,GAAmB,QAAfzD,EAAOJ,IAAe,CACxB,MAAMiE,GAASC,EAAAA,EAAAA,IAAmB,CAChCC,QAAS9B,EAAa+B,KACtBC,YAAaL,EACbM,WAAWzB,EAAAA,EAAAA,IAAa1D,EAAS2D,MAAMyB,SACvCzB,MAAO,IAAI3D,EAAS2D,MAAOxD,OAAQwE,EAAQU,YAE7C,OACE,QAAC,IAAD,CAAMC,GAAIR,EAAQS,QAAS,IAAMnD,KAAKoD,gBAAtC,SACGb,EAAQU,WAKf,MAAMI,EAAe,CAACC,EAAAA,GAAAA,IAAaA,EAAAA,GAAAA,SAEnC,GAAmB,aAAfzE,EAAOJ,IAAoB,CAC7B,MAAMuD,EAAY,IAAIO,EAASnB,GAAImB,EAAQU,UAC3C,OACE,QAAC,KAAD,CACEpE,OAAQA,EACR0D,QAASP,EACTuB,iBAAkBvD,KAAKuD,iBAAiB1E,EAAQ0D,EAAQ7C,WAAYsC,GACpEqB,aAAcA,EAJhB,UAME,eAAK7D,UAAU,WAAf,SAA2B+C,EAAQ7C,eAKzC,GAAmB,cAAfb,EAAOJ,IACT,OAAO,QAAC+E,EAAD,WAAaC,EAAAA,EAAAA,IAAiBlB,EAAQmB,UAAW,KAG1D,GAAmB,eAAf7E,EAAOJ,IAAsB,CAC/B,MAAMkF,EAAapB,EAAQqB,WACrBC,GAAMJ,EAAAA,EAAAA,IAAiBE,EAAa,EAAG,GAC7C,OACE,QAACH,EAAD,UACGG,EAAa,GAAIG,EAAAA,EAAAA,GAAE,aAAcD,IAAOC,EAAAA,EAAAA,GAAE,YAAaD,KAK9D,MAAmB,cAAfhF,EAAOJ,KAEP,QAAC+E,EAAD,WACE,QAAC,IAAD,CAAqBpG,cAAY,EAACH,aAAcsF,EAAQwB,cAK3C,aAAflF,EAAOJ,KAEP,QAAC+E,EAAD,WACE,QAAC,IAAD,CAAqBpG,cAAY,EAACH,aAAcsF,EAAQyB,aAIvDxB,MAnNuC,sCAsNtBF,GACjB,CAACzD,EAAiC0D,IACvCvC,KAAKiE,eAAe3B,EAAazD,EAAQ0D,KAjM7C2B,YAAYC,EAA0BC,GACpC,MAAM,aAACtD,GAAgBd,KAAK1D,OAC5ByE,EAAAA,EAAAA,IAAoB,CAClBC,SAAU,8CACVC,UAAW,yCACXC,gBAAiBC,SAASL,EAAaM,GAAI,IAC3C1C,MAAO0F,EACPC,UAAWF,IAIfvD,eACEH,EACAC,EACA7B,EACAyF,GAEA,MAAM,SAAC1G,GAAYoC,KAAK1D,MAClBiI,GAAQC,EAAAA,EAAAA,IAAe3F,EAAOJ,IAAKI,EAAO4F,KAAM/D,GAChDhC,EAAQ,CAACA,MAAOG,EAAOJ,IAAKG,MAAOC,EAAOD,OAe1C8F,EAAcjE,EAAgBkE,aAAajG,EAAOgC,GAClD3B,GAAU6F,EAAAA,EAAAA,IAAgBlG,EAAOgC,GAEjCyD,EAAkBO,EAAcA,EAAY5F,UAAOuD,EACnD+B,EAAmBM,EAAcA,EAAYhG,WAAQ2D,EAE3D,OACE,QAAC,IAAD,CACEkC,MAAOA,EACPM,MAAOP,EAAW3F,KAClB0F,UAAWF,EACXpF,QAASA,EACT+F,iBAzBJ,WACE,IAAKpE,EACH,OAGF,MAAMqE,EAAgBtE,EAAgBuE,YAAYtG,EAAOgC,IACnD,KAAC7C,GAAQkH,EAAcE,4BAE7B,MAAO,IACFrH,EACH2D,MAAO,IAAI3D,EAAS2D,MAAO,CAAChD,QAAmB8D,EAAW6C,QAASrH,KAgBnEsF,QAAS,IAAMnD,KAAKkE,YAAYC,EAAiBC,KAiEvDhB,gBACE,MAAM,aAACtC,GAAgBd,KAAK1D,OAC5ByE,EAAAA,EAAAA,IAAoB,CAClBC,SAAU,uDACVC,UAAW,kDACXC,gBAAiBC,SAASL,EAAaM,GAAI,MA+E/C+D,SAAS,QACP,MAAM,UAAC1H,EAAD,aAAYqD,EAAZ,SAA0BlD,EAA1B,cAAoCqB,EAApC,SAAmDC,EAAnD,gBAA6DuD,GACjEzC,KAAK1D,MAED4I,GAAU5D,EAAAA,EAAAA,IAAY,UAAC1D,EAAS2D,aAAV,aAAC,EAAgB2D,SACvCE,GAAS9D,EAAAA,EAAAA,IAAY,UAAC1D,EAAS2D,aAAV,aAAC,eAEtB8D,EAAe5H,EAAU6H,QAC/BD,EAAaE,OAAS/G,EAEtB,MAAMgH,GAAWC,EAAAA,EAAAA,IAAUP,GAErBzE,EAAkB4E,EAAaK,UACnCF,EAASG,OACLH,EACA,CACE,CACE9G,MAAO,WACPI,KAAM,UAKVtB,EAAkBwB,EAAoBC,EAAeC,EAAUuB,GAE/DmF,EAnS6B,EACrC3G,EACAC,EACAzB,KAEA,MAAM4C,EAAU7B,EAAa8B,KAAIuF,IAAK,IAAKA,MACrCC,EAAiBzF,EAAQ0F,MAAKF,GAAe,cAAVA,EAAEpH,MAE3C,OAAKqH,EAImB1G,EAAAA,GAAyCH,IAE/D6G,EAAenH,KAAO,oBACf0B,IAGehB,EAAAA,EAAAA,IAAuCH,EAAUzB,KACjD6B,EAAAA,GAAAA,UACtBwG,EAAenH,KAAO,UACf0B,GAGFA,EAfEA,GA0RiB2F,CACtB/G,EACAC,EACAuB,GAEIJ,EAAUL,KAAKiG,eAAeL,GAE9BM,EAAezF,EAAgB0F,WAErC,OACE,QAAC,IAAD,CACE1I,UAAWgD,EACXmC,QAAS9B,EAAa+B,KACtBjF,SAAUA,EACVJ,gBAAiBA,EACjB4I,MAAO,EACPhB,OAAQA,EANV,SAQG,IAAuC,IAAtC,UAACiB,EAAD,UAAYC,EAAZ,UAAuBC,GAAe,EACtC,OACE,QAAC,EAAAC,SAAD,YACE,QAAC,IAAD,CAAa9D,OAAO,eAApB,UACE,QAAC+D,EAAD,CACEhE,gBAAiBA,EACjB7E,SAAUA,EACVkD,aAAcA,EACdyF,UAAWA,OAGf,QAAC,KAAD,CACEF,UAAWA,EACXK,KAAMJ,GAAaA,EAAUI,KAAOJ,EAAUI,KAAO,GACrDC,YAAatG,EACb6F,aAAcA,EACdU,KAAM,CACJhG,eAAgBZ,KAAK6G,uBACnBpG,GACA6F,MAAAA,OAAA,EAAAA,EAAWQ,OAAQ,GACnBlB,GAEF3B,eAAgBjE,KAAK+G,uBAAuB/G,KAAK1D,OACjD0K,eAAgBhH,KAAKiH,oBAEvBrJ,SAAUA,WAiB1B,SAAS6I,EAAWnK,GAClB,MAAM,UAACiK,EAAD,aAAYzF,EAAZ,SAA0BlD,EAA1B,gBAAoC6E,GAAmBnG,EAuBvD4K,GAAgBvE,EAAAA,EAAAA,IAAmB,CACvCC,QAAS9B,EAAa+B,KACtBC,YAAaL,EACbM,WAAWzB,EAAAA,EAAAA,IAAa1D,EAAS2D,MAAMyB,SACvCzB,MAAO,IAAI3D,EAAS2D,SAGtB,OACE,QAAC4F,EAAD,YACE,yBACE,QAAC,KAAD,WAAiBrD,EAAAA,EAAAA,GAAE,qBAErB,QAAC,KAAD,CACEX,QArByB,MAC7BpC,EAAAA,EAAAA,IAAoB,CAClBC,SAAU,qDACVC,UAAW,8CACXC,gBAAiBC,SAASL,EAAaM,GAAI,OAkBzC8B,GAAIgE,EACJE,KAAK,KACL,eAAa,0BAJf,UAMGtD,EAAAA,EAAAA,GAAE,oBAEL,QAACuD,EAAD,CAAkBd,UAAWA,EAAWe,SAzCR,CAAClC,EAAQvD,EAAUN,MACrDR,EAAAA,EAAAA,IAAoB,CAClBC,SAAU,qDACVC,UAAW,8CACXC,gBAAiBC,SAASL,EAAaM,GAAI,MAG7CQ,EAAAA,eAAAA,KAAoB,CAClBC,SAAAA,EACAN,MAAO,IAAIA,EAAO,CAAChD,GAAmB6G,MAgC0BgC,KAAK,UA5V9DzH,EAAAA,YAAAA,cAgTJ8G,EAAAA,YAAAA,aAiDT,MAAMjD,GAAa,OAAO,MAAP,qBAAH,wFAMV2D,GAAS,OAAO,MAAP,qBAAH,mEAGOI,EAAAA,EAAAA,GAAM,GAHb,wBAONF,GAAmB,OAAOG,EAAAA,EAAP,qBAAH,iBACJD,EAAAA,EAAAA,GAAM,GADF","sources":["webpack:///./app/components/charts/loadingPanel.tsx","webpack:///./app/components/loadingMask.tsx","webpack:///./app/components/performanceDuration.tsx","webpack:///./app/utils/performance/segmentExplorer/segmentExplorerQuery.tsx","webpack:///./app/views/performance/transactionSummary/transactionOverview/tagExplorer.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport LoadingMask from 'sentry/components/loadingMask';\n\ninterface Props extends React.HTMLAttributes<HTMLDivElement> {\n  height?: string;\n}\n\nconst LoadingPanel = styled(({height: _height, ...props}: Props) => (\n  <div {...props}>\n    <LoadingMask />\n  </div>\n))`\n  flex: 1;\n  flex-shrink: 0;\n  overflow: hidden;\n  height: ${p => p.height};\n  position: relative;\n  border-color: transparent;\n  margin-bottom: 0;\n`;\n\nLoadingPanel.defaultProps = {\n  height: '200px',\n};\n\nexport default LoadingPanel;\n","import styled from '@emotion/styled';\n\nexport interface LoadingMaskProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nconst LoadingMask = styled('div')<LoadingMaskProps>`\n  background-color: ${p => p.theme.backgroundSecondary};\n  border-radius: ${p => p.theme.borderRadius};\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n`;\n\nexport default LoadingMask;\n","import Duration from 'sentry/components/duration';\nimport {defined} from 'sentry/utils';\n\ninterface DurationProps {\n  abbreviation?: boolean;\n}\n\ninterface SecondsProps extends DurationProps {\n  seconds: number;\n}\n\ninterface MillisecondsProps extends DurationProps {\n  milliseconds: number;\n}\n\ninterface NanosecondsProps extends DurationProps {\n  nanoseconds: number;\n}\n\ntype PerformanceDurationProps = SecondsProps | MillisecondsProps | NanosecondsProps;\n\nfunction isMilliseconds(props: PerformanceDurationProps): props is MillisecondsProps {\n  return defined((props as MillisecondsProps).milliseconds);\n}\n\nfunction isNanoseconds(props: PerformanceDurationProps): props is NanosecondsProps {\n  return defined((props as NanosecondsProps).nanoseconds);\n}\n\nfunction PerformanceDuration(props: PerformanceDurationProps) {\n  const normalizedSeconds = isNanoseconds(props)\n    ? props.nanoseconds / 1_000_000_000\n    : isMilliseconds(props)\n    ? props.milliseconds / 1000\n    : props.seconds;\n\n  return (\n    <Duration\n      abbreviation={props.abbreviation}\n      seconds={normalizedSeconds}\n      fixedDigits={2}\n    />\n  );\n}\n\nexport default PerformanceDuration;\n","import {EventQuery} from 'sentry/actionCreators/events';\nimport {LocationQuery} from 'sentry/utils/discover/eventView';\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n} from 'sentry/utils/discover/genericDiscoverQuery';\nimport withApi from 'sentry/utils/withApi';\n\n/**\n * An individual row in a Segment explorer result\n */\nexport type TableDataRow = {\n  aggregate: number;\n  comparison: number;\n  count: number;\n  frequency: number;\n  sumdelta: number;\n  tags_key: string;\n  tags_value: string;\n};\n\nexport type TableData = {\n  data: TableDataRow[];\n  meta: {};\n};\n\n/**\n * A Segment Explorer result including rows and metadata.\n */\n\ntype ChildrenProps = Omit<GenericChildrenProps<TableData>, 'tableData'> & {\n  tableData: TableData | null;\n};\n\ntype QueryProps = DiscoverQueryProps & {\n  aggregateColumn: string;\n  children: (props: ChildrenProps) => React.ReactNode;\n  allTagKeys?: boolean;\n  sort?: string | string[];\n  tagKey?: string;\n};\n\ntype FacetQuery = LocationQuery &\n  EventQuery & {\n    aggregateColumn?: string;\n    allTagKeys?: boolean;\n    sort?: string | string[];\n    tagKey?: string;\n  };\n\nexport function getRequestFunction(_props: QueryProps) {\n  const {aggregateColumn} = _props;\n  function getTagExplorerRequestPayload(props: DiscoverQueryProps) {\n    const {eventView} = props;\n    const apiPayload: FacetQuery = eventView.getEventsAPIPayload(props.location);\n    apiPayload.aggregateColumn = aggregateColumn;\n    apiPayload.sort = _props.sort ? _props.sort : apiPayload.sort;\n    if (_props.allTagKeys) {\n      apiPayload.allTagKeys = _props.allTagKeys;\n    }\n    if (_props.tagKey) {\n      apiPayload.tagKey = _props.tagKey;\n    }\n    return apiPayload;\n  }\n  return getTagExplorerRequestPayload;\n}\n\nfunction shouldRefetchData(prevProps: QueryProps, nextProps: QueryProps) {\n  return (\n    prevProps.aggregateColumn !== nextProps.aggregateColumn ||\n    prevProps.sort !== nextProps.sort ||\n    prevProps.allTagKeys !== nextProps.allTagKeys ||\n    prevProps.tagKey !== nextProps.tagKey\n  );\n}\n\nfunction SegmentExplorerQuery(props: QueryProps) {\n  return (\n    <GenericDiscoverQuery<TableData, QueryProps>\n      route=\"events-facets-performance\"\n      getRequestPayload={getRequestFunction(props)}\n      shouldRefetchData={shouldRefetchData}\n      {...props}\n    />\n  );\n}\n\nexport default withApi(SegmentExplorerQuery);\n","import {Component, Fragment} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location, LocationDescriptorObject} from 'history';\n\nimport GuideAnchor from 'sentry/components/assistant/guideAnchor';\nimport Button from 'sentry/components/button';\nimport {SectionHeading} from 'sentry/components/charts/styles';\nimport GridEditable, {\n  COL_WIDTH_UNDEFINED,\n  GridColumn,\n  GridColumnOrder,\n} from 'sentry/components/gridEditable';\nimport SortLink from 'sentry/components/gridEditable/sortLink';\nimport Link from 'sentry/components/links/link';\nimport Pagination, {CursorHandler} from 'sentry/components/pagination';\nimport PerformanceDuration from 'sentry/components/performanceDuration';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport EventView, {fromSorts, isFieldSortable} from 'sentry/utils/discover/eventView';\nimport {fieldAlignment} from 'sentry/utils/discover/fields';\nimport {formatPercentage} from 'sentry/utils/formatters';\nimport SegmentExplorerQuery, {\n  TableData,\n  TableDataRow,\n} from 'sentry/utils/performance/segmentExplorer/segmentExplorerQuery';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport CellAction, {Actions, updateQuery} from 'sentry/views/eventsV2/table/cellAction';\nimport {TableColumn} from 'sentry/views/eventsV2/table/types';\n\nimport {\n  platformAndConditionsToPerformanceType,\n  PROJECT_PERFORMANCE_TYPE,\n} from '../../utils';\nimport {\n  SPAN_OPERATION_BREAKDOWN_FILTER_TO_FIELD,\n  SpanOperationBreakdownFilter,\n} from '../filter';\nimport {tagsRouteWithQuery} from '../transactionTags/utils';\nimport {normalizeSearchConditions} from '../utils';\n\nconst TAGS_CURSOR_NAME = 'tags_cursor';\n\ntype ColumnKeys =\n  | 'key'\n  | 'tagValue'\n  | 'aggregate'\n  | 'frequency'\n  | 'comparison'\n  | 'sumdelta';\ntype TagColumn = GridColumnOrder<ColumnKeys> & {\n  column: {\n    kind: string;\n  };\n  field: string;\n  canSort?: boolean;\n};\nconst COLUMN_ORDER: TagColumn[] = [\n  {\n    key: 'key',\n    field: 'key',\n    name: 'Tag Key',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n  },\n  {\n    key: 'tagValue',\n    field: 'tagValue',\n    name: 'Tag Values',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n  },\n  {\n    key: 'aggregate',\n    field: 'aggregate',\n    name: 'Avg Duration',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n    canSort: true,\n  },\n  {\n    key: 'frequency',\n    field: 'frequency',\n    name: 'Frequency',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n    canSort: true,\n  },\n  {\n    key: 'comparison',\n    field: 'comparison',\n    name: 'Compared To Avg',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n    canSort: true,\n  },\n  {\n    key: 'sumdelta',\n    field: 'sumdelta',\n    name: 'Total Time Lost',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n    canSort: true,\n  },\n];\n\nexport const getTransactionField = (\n  currentFilter: SpanOperationBreakdownFilter,\n  projects: Project[],\n  eventView: EventView\n) => {\n  const fieldFromFilter = SPAN_OPERATION_BREAKDOWN_FILTER_TO_FIELD[currentFilter];\n  if (fieldFromFilter) {\n    return fieldFromFilter;\n  }\n\n  const performanceType = platformAndConditionsToPerformanceType(projects, eventView);\n  if (performanceType === PROJECT_PERFORMANCE_TYPE.FRONTEND) {\n    return 'measurements.lcp';\n  }\n\n  return 'transaction.duration';\n};\n\nconst getColumnsWithReplacedDuration = (\n  currentFilter: SpanOperationBreakdownFilter,\n  projects: Project[],\n  eventView: EventView\n) => {\n  const columns = COLUMN_ORDER.map(c => ({...c}));\n  const durationColumn = columns.find(c => c.key === 'aggregate');\n\n  if (!durationColumn) {\n    return columns;\n  }\n\n  const fieldFromFilter = SPAN_OPERATION_BREAKDOWN_FILTER_TO_FIELD[currentFilter];\n  if (fieldFromFilter) {\n    durationColumn.name = 'Avg Span Duration';\n    return columns;\n  }\n\n  const performanceType = platformAndConditionsToPerformanceType(projects, eventView);\n  if (performanceType === PROJECT_PERFORMANCE_TYPE.FRONTEND) {\n    durationColumn.name = 'Avg LCP';\n    return columns;\n  }\n\n  return columns;\n};\n\ntype TagValueProps = {\n  row: TableDataRow;\n};\n\nexport function TagValue(props: TagValueProps) {\n  return <div className=\"truncate\">{props.row.tags_value}</div>;\n}\n\ntype Props = {\n  currentFilter: SpanOperationBreakdownFilter;\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n  transactionName: string;\n};\n\ntype State = {\n  widths: number[];\n};\nexport class TagExplorer extends Component<Props> {\n  state: State = {\n    widths: [],\n  };\n\n  handleResizeColumn = (columnIndex: number, nextColumn: GridColumn) => {\n    const widths: number[] = [...this.state.widths];\n    widths[columnIndex] = nextColumn.width\n      ? Number(nextColumn.width)\n      : COL_WIDTH_UNDEFINED;\n    this.setState({widths});\n  };\n\n  getColumnOrder = (columns: GridColumnOrder[]) => {\n    const {widths} = this.state;\n    return columns.map((col: GridColumnOrder, i: number) => {\n      if (typeof widths[i] === 'number') {\n        return {...col, width: widths[i]};\n      }\n      return col;\n    });\n  };\n\n  onSortClick(currentSortKind?: string, currentSortField?: string) {\n    const {organization} = this.props;\n    trackAnalyticsEvent({\n      eventKey: 'performance_views.summary.tag_explorer.sort',\n      eventName: 'Performance Views: Tag Explorer Sorted',\n      organization_id: parseInt(organization.id, 10),\n      field: currentSortField,\n      direction: currentSortKind,\n    });\n  }\n\n  renderHeadCell(\n    sortedEventView: EventView,\n    tableMeta: TableData['meta'],\n    column: TableColumn<ColumnKeys>,\n    columnInfo: TagColumn\n  ): React.ReactNode {\n    const {location} = this.props;\n    const align = fieldAlignment(column.key, column.type, tableMeta);\n    const field = {field: column.key, width: column.width};\n\n    function generateSortLink(): LocationDescriptorObject | undefined {\n      if (!tableMeta) {\n        return undefined;\n      }\n\n      const nextEventView = sortedEventView.sortOnField(field, tableMeta);\n      const {sort} = nextEventView.generateQueryStringObject();\n\n      return {\n        ...location,\n        query: {...location.query, [TAGS_CURSOR_NAME]: undefined, tagSort: sort},\n      };\n    }\n    const currentSort = sortedEventView.sortForField(field, tableMeta);\n    const canSort = isFieldSortable(field, tableMeta);\n\n    const currentSortKind = currentSort ? currentSort.kind : undefined;\n    const currentSortField = currentSort ? currentSort.field : undefined;\n\n    return (\n      <SortLink\n        align={align}\n        title={columnInfo.name}\n        direction={currentSortKind}\n        canSort={canSort}\n        generateSortLink={generateSortLink}\n        onClick={() => this.onSortClick(currentSortKind, currentSortField)}\n      />\n    );\n  }\n\n  renderHeadCellWithMeta = (\n    sortedEventView: EventView,\n    tableMeta: TableData['meta'],\n    columns: TagColumn[]\n  ) => {\n    return (column: TableColumn<ColumnKeys>, index: number): React.ReactNode =>\n      this.renderHeadCell(sortedEventView, tableMeta, column, columns[index]);\n  };\n\n  handleTagValueClick = (location: Location, tagKey: string, tagValue: string) => {\n    const {organization} = this.props;\n    trackAnalyticsEvent({\n      eventKey: 'performance_views.summary.tag_explorer.tag_value',\n      eventName: 'Performance Views: Tag Explorer Value Clicked',\n      organization_id: parseInt(organization.id, 10),\n    });\n\n    const queryString = decodeScalar(location.query.query);\n    const conditions = new MutableSearch(queryString ?? '');\n\n    conditions.addFilterValues(tagKey, [tagValue]);\n\n    const query = conditions.formatString();\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...location.query,\n        query: String(query).trim(),\n      },\n    });\n  };\n\n  handleCellAction = (\n    column: TableColumn<ColumnKeys>,\n    tagValue: React.ReactText,\n    actionRow: any\n  ) => {\n    return (action: Actions) => {\n      const {eventView, location, organization} = this.props;\n      trackAnalyticsEvent({\n        eventKey: 'performance_views.summary.tag_explorer.cell_action',\n        eventName: 'Performance Views: Tag Explorer Cell Action Clicked',\n        organization_id: parseInt(organization.id, 10),\n      });\n\n      const searchConditions = normalizeSearchConditions(eventView.query);\n\n      updateQuery(searchConditions, action, {...column, name: actionRow.id}, tagValue);\n\n      browserHistory.push({\n        pathname: location.pathname,\n        query: {\n          ...location.query,\n          [TAGS_CURSOR_NAME]: undefined,\n          query: searchConditions.formatString(),\n        },\n      });\n    };\n  };\n\n  onTagKeyClick() {\n    const {organization} = this.props;\n    trackAnalyticsEvent({\n      eventKey: 'performance_views.summary.tag_explorer.visit_tag_key',\n      eventName: 'Performance Views: Tag Explorer - Visit Tag Key',\n      organization_id: parseInt(organization.id, 10),\n    });\n  }\n\n  renderBodyCell = (\n    parentProps: Props,\n    column: TableColumn<ColumnKeys>,\n    dataRow: TableDataRow\n  ): React.ReactNode => {\n    const value = dataRow[column.key];\n    const {location, organization, transactionName} = parentProps;\n\n    if (column.key === 'key') {\n      const target = tagsRouteWithQuery({\n        orgSlug: organization.slug,\n        transaction: transactionName,\n        projectID: decodeScalar(location.query.project),\n        query: {...location.query, tagKey: dataRow.tags_key},\n      });\n      return (\n        <Link to={target} onClick={() => this.onTagKeyClick()}>\n          {dataRow.tags_key}\n        </Link>\n      );\n    }\n\n    const allowActions = [Actions.ADD, Actions.EXCLUDE];\n\n    if (column.key === 'tagValue') {\n      const actionRow = {...dataRow, id: dataRow.tags_key};\n      return (\n        <CellAction\n          column={column}\n          dataRow={actionRow}\n          handleCellAction={this.handleCellAction(column, dataRow.tags_value, actionRow)}\n          allowActions={allowActions}\n        >\n          <div className=\"truncate\">{dataRow.tags_value}</div>\n        </CellAction>\n      );\n    }\n\n    if (column.key === 'frequency') {\n      return <AlignRight>{formatPercentage(dataRow.frequency, 0)}</AlignRight>;\n    }\n\n    if (column.key === 'comparison') {\n      const localValue = dataRow.comparison;\n      const pct = formatPercentage(localValue - 1, 0);\n      return (\n        <AlignRight>\n          {localValue > 1 ? t('+%s slower', pct) : t('%s faster', pct)}\n        </AlignRight>\n      );\n    }\n\n    if (column.key === 'aggregate') {\n      return (\n        <AlignRight>\n          <PerformanceDuration abbreviation milliseconds={dataRow.aggregate} />\n        </AlignRight>\n      );\n    }\n\n    if (column.key === 'sumdelta') {\n      return (\n        <AlignRight>\n          <PerformanceDuration abbreviation milliseconds={dataRow.sumdelta} />\n        </AlignRight>\n      );\n    }\n    return value;\n  };\n\n  renderBodyCellWithData = (parentProps: Props) => {\n    return (column: TableColumn<ColumnKeys>, dataRow: TableDataRow): React.ReactNode =>\n      this.renderBodyCell(parentProps, column, dataRow);\n  };\n\n  render() {\n    const {eventView, organization, location, currentFilter, projects, transactionName} =\n      this.props;\n\n    const tagSort = decodeScalar(location.query?.tagSort);\n    const cursor = decodeScalar(location.query?.[TAGS_CURSOR_NAME]);\n\n    const tagEventView = eventView.clone();\n    tagEventView.fields = COLUMN_ORDER;\n\n    const tagSorts = fromSorts(tagSort);\n\n    const sortedEventView = tagEventView.withSorts(\n      tagSorts.length\n        ? tagSorts\n        : [\n            {\n              field: 'sumdelta',\n              kind: 'desc',\n            },\n          ]\n    );\n\n    const aggregateColumn = getTransactionField(currentFilter, projects, sortedEventView);\n\n    const adjustedColumns = getColumnsWithReplacedDuration(\n      currentFilter,\n      projects,\n      sortedEventView\n    );\n    const columns = this.getColumnOrder(adjustedColumns);\n\n    const columnSortBy = sortedEventView.getSorts();\n\n    return (\n      <SegmentExplorerQuery\n        eventView={sortedEventView}\n        orgSlug={organization.slug}\n        location={location}\n        aggregateColumn={aggregateColumn}\n        limit={5}\n        cursor={cursor}\n      >\n        {({isLoading, tableData, pageLinks}) => {\n          return (\n            <Fragment>\n              <GuideAnchor target=\"tag_explorer\">\n                <TagsHeader\n                  transactionName={transactionName}\n                  location={location}\n                  organization={organization}\n                  pageLinks={pageLinks}\n                />\n              </GuideAnchor>\n              <GridEditable\n                isLoading={isLoading}\n                data={tableData && tableData.data ? tableData.data : []}\n                columnOrder={columns}\n                columnSortBy={columnSortBy}\n                grid={{\n                  renderHeadCell: this.renderHeadCellWithMeta(\n                    sortedEventView,\n                    tableData?.meta || {},\n                    adjustedColumns\n                  ) as any,\n                  renderBodyCell: this.renderBodyCellWithData(this.props) as any,\n                  onResizeColumn: this.handleResizeColumn as any,\n                }}\n                location={location}\n              />\n            </Fragment>\n          );\n        }}\n      </SegmentExplorerQuery>\n    );\n  }\n}\n\ntype HeaderProps = {\n  location: Location;\n  organization: Organization;\n  pageLinks: string | null;\n  transactionName: string;\n};\n\nfunction TagsHeader(props: HeaderProps) {\n  const {pageLinks, organization, location, transactionName} = props;\n\n  const handleCursor: CursorHandler = (cursor, pathname, query) => {\n    trackAnalyticsEvent({\n      eventKey: 'performance_views.summary.tag_explorer.change_page',\n      eventName: 'Performance Views: Tag Explorer Change Page',\n      organization_id: parseInt(organization.id, 10),\n    });\n\n    browserHistory.push({\n      pathname,\n      query: {...query, [TAGS_CURSOR_NAME]: cursor},\n    });\n  };\n\n  const handleViewAllTagsClick = () => {\n    trackAnalyticsEvent({\n      eventKey: 'performance_views.summary.tag_explorer.change_page',\n      eventName: 'Performance Views: Tag Explorer Change Page',\n      organization_id: parseInt(organization.id, 10),\n    });\n  };\n\n  const viewAllTarget = tagsRouteWithQuery({\n    orgSlug: organization.slug,\n    transaction: transactionName,\n    projectID: decodeScalar(location.query.project),\n    query: {...location.query},\n  });\n\n  return (\n    <Header>\n      <div>\n        <SectionHeading>{t('Suspect Tags')}</SectionHeading>\n      </div>\n      <Button\n        onClick={handleViewAllTagsClick}\n        to={viewAllTarget}\n        size=\"xs\"\n        data-test-id=\"tags-explorer-open-tags\"\n      >\n        {t('View All Tags')}\n      </Button>\n      <StyledPagination pageLinks={pageLinks} onCursor={handleCursor} size=\"xs\" />\n    </Header>\n  );\n}\n\nconst AlignRight = styled('div')`\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n  width: 100%;\n`;\n\nconst Header = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr auto auto;\n  margin-bottom: ${space(1)};\n  align-items: center;\n`;\n\nconst StyledPagination = styled(Pagination)`\n  margin: 0 0 0 ${space(1)};\n`;\n"],"names":["LoadingPanel","height","_height","props","p","defaultProps","theme","backgroundSecondary","borderRadius","PerformanceDuration","normalizedSeconds","defined","nanoseconds","isNanoseconds","milliseconds","isMilliseconds","seconds","abbreviation","fixedDigits","getRequestFunction","_props","aggregateColumn","eventView","apiPayload","getEventsAPIPayload","location","sort","allTagKeys","tagKey","shouldRefetchData","prevProps","nextProps","SegmentExplorerQuery","route","getRequestPayload","withApi","TAGS_CURSOR_NAME","COLUMN_ORDER","key","field","name","width","column","kind","canSort","getTransactionField","currentFilter","projects","fieldFromFilter","SPAN_OPERATION_BREAKDOWN_FILTER_TO_FIELD","platformAndConditionsToPerformanceType","PROJECT_PERFORMANCE_TYPE","TagValue","className","row","tags_value","TagExplorer","Component","widths","columnIndex","nextColumn","this","state","Number","COL_WIDTH_UNDEFINED","setState","columns","map","col","i","sortedEventView","tableMeta","index","renderHeadCell","tagValue","organization","trackAnalyticsEvent","eventKey","eventName","organization_id","parseInt","id","queryString","decodeScalar","query","conditions","MutableSearch","addFilterValues","formatString","browserHistory","pathname","String","trim","actionRow","action","searchConditions","normalizeSearchConditions","updateQuery","undefined","parentProps","dataRow","value","transactionName","target","tagsRouteWithQuery","orgSlug","slug","transaction","projectID","project","tags_key","to","onClick","onTagKeyClick","allowActions","Actions","handleCellAction","AlignRight","formatPercentage","frequency","localValue","comparison","pct","t","aggregate","sumdelta","renderBodyCell","onSortClick","currentSortKind","currentSortField","direction","columnInfo","align","fieldAlignment","type","currentSort","sortForField","isFieldSortable","title","generateSortLink","nextEventView","sortOnField","generateQueryStringObject","tagSort","render","cursor","tagEventView","clone","fields","tagSorts","fromSorts","withSorts","length","adjustedColumns","c","durationColumn","find","getColumnsWithReplacedDuration","getColumnOrder","columnSortBy","getSorts","limit","isLoading","tableData","pageLinks","Fragment","TagsHeader","data","columnOrder","grid","renderHeadCellWithMeta","meta","renderBodyCellWithData","onResizeColumn","handleResizeColumn","viewAllTarget","Header","size","StyledPagination","onCursor","space","Pagination"],"sourceRoot":""}