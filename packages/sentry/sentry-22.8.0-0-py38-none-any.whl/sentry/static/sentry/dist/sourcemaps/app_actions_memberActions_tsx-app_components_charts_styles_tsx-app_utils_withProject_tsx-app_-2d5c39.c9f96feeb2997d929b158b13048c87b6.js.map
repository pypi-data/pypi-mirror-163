{"version":3,"file":"chunks/app_actions_memberActions_tsx-app_components_charts_styles_tsx-app_utils_withProject_tsx-app_-2d5c39.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actions/memberActions.tsx","webpack:///./app/components/charts/styles.tsx","webpack:///./app/utils/withProject.tsx","webpack:///./app/views/dashboardsV2/dashboard.tsx"],"sourcesContent":["import {createActions} from 'reflux';\n\nconst MemberActions = createActions([\n  'createSuccess',\n  'update',\n  'updateError',\n  'updateSuccess',\n  'resendMemberInvite',\n  'resendMemberInviteSuccess',\n  'resendMemberInviteError',\n]);\n\nexport default MemberActions;\n","import styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\n\nexport const SubHeading = styled('h3')`\n  font-size: ${p => p.theme.fontSizeLarge};\n  font-weight: normal;\n  color: ${p => p.theme.textColor};\n  margin: 0;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\nexport const SectionHeading = styled('h4')`\n  display: inline-grid;\n  grid-auto-flow: column;\n  gap: ${space(1)};\n  align-items: center;\n  color: ${p => p.theme.subText};\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin: ${space(1)} 0;\n`;\n\nexport const SectionValue = styled('span')`\n  color: ${p => p.theme.subText};\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin-right: ${space(1)};\n`;\n\nexport const InlineContainer = styled('div')`\n  display: grid;\n  align-items: center;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-auto-flow: column;\n    grid-column-gap: ${space(1)};\n  }\n`;\n\nexport const ChartControls = styled('div')`\n  padding: ${space(1)} ${space(1)} ${space(1)} ${space(3)};\n  border-top: 1px solid ${p => p.theme.border};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    display: flex;\n    justify-content: space-between;\n    flex-wrap: wrap;\n  }\n`;\n\n// Header element for charts within panels.\nexport const HeaderTitle = styled('div')`\n  display: inline-grid;\n  grid-auto-flow: column;\n  gap: ${space(1)};\n  ${p => p.theme.text.cardTitle};\n  color: ${p => p.theme.headingColor};\n  align-items: center;\n`;\n\n// Header element for charts within panels\n// This header can be rendered while the chart is still loading\nexport const HeaderTitleLegend = styled(HeaderTitle)`\n  background-color: ${p => p.theme.background};\n  border-bottom-right-radius: ${p => p.theme.borderRadius};\n  position: absolute;\n  z-index: 1;\n`;\n\n// Used for rendering total value of a chart right below the HeaderTitleLegend\nexport const HeaderValue = styled('div')`\n  display: inline-grid;\n  grid-auto-flow: column;\n  gap: ${space(1)};\n  align-items: baseline;\n  background-color: ${p => p.theme.background};\n  position: absolute;\n  top: 40px;\n  z-index: 1;\n  font-size: ${p => p.theme.headerFontSize};\n`;\n\nexport const ChartContainer = styled('div')`\n  padding: ${space(2)} ${space(3)};\n`;\n","import {Component} from 'react';\n\nimport SentryTypes from 'sentry/sentryTypes';\nimport {Project} from 'sentry/types';\nimport getDisplayName from 'sentry/utils/getDisplayName';\n\ntype InjectedProjectProps = {\n  project?: Project;\n};\n\n/**\n * Currently wraps component with project from context\n */\nconst withProject = <P extends InjectedProjectProps>(\n  WrappedComponent: React.ComponentType<P>\n) =>\n  class extends Component<\n    Omit<P, keyof InjectedProjectProps> & Partial<InjectedProjectProps>\n  > {\n    static displayName = `withProject(${getDisplayName(WrappedComponent)})`;\n    static contextTypes = {\n      project: SentryTypes.Project,\n    };\n\n    render() {\n      const {project, ...props} = this.props;\n      return (\n        <WrappedComponent\n          {...({project: project ?? this.context.project, ...props} as P)}\n        />\n      );\n    }\n  };\n\nexport default withProject;\n","import 'react-grid-layout/css/styles.css';\nimport 'react-resizable/css/styles.css';\n\nimport {Component} from 'react';\nimport {Layouts, Responsive, WidthProvider} from 'react-grid-layout';\nimport {forceCheck} from 'react-lazyload';\nimport {InjectedRouter} from 'react-router';\nimport {closestCenter, DndContext} from '@dnd-kit/core';\nimport {arrayMove, rectSortingStrategy, SortableContext} from '@dnd-kit/sortable';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\nimport cloneDeep from 'lodash/cloneDeep';\nimport debounce from 'lodash/debounce';\nimport isEqual from 'lodash/isEqual';\n\nimport {validateWidget} from 'sentry/actionCreators/dashboards';\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {fetchOrgMembers} from 'sentry/actionCreators/members';\nimport {openAddDashboardWidgetModal} from 'sentry/actionCreators/modal';\nimport {loadOrganizationTags} from 'sentry/actionCreators/tags';\nimport {Client} from 'sentry/api';\nimport Button from 'sentry/components/button';\nimport {IconResize} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, PageFilters} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport theme from 'sentry/utils/theme';\nimport withApi from 'sentry/utils/withApi';\nimport withPageFilters from 'sentry/utils/withPageFilters';\n\nimport AddWidget, {ADD_WIDGET_BUTTON_DRAG_ID} from './addWidget';\nimport {\n  assignDefaultLayout,\n  assignTempId,\n  calculateColumnDepths,\n  constructGridItemKey,\n  DEFAULT_WIDGET_WIDTH,\n  enforceWidgetHeightValues,\n  generateWidgetId,\n  generateWidgetsAfterCompaction,\n  getDashboardLayout,\n  getDefaultWidgetHeight,\n  getMobileLayout,\n  getNextAvailablePosition,\n  pickDefinedStoreKeys,\n  Position,\n} from './layoutUtils';\nimport SortableWidget from './sortableWidget';\nimport {DashboardDetails, DashboardWidgetSource, Widget, WidgetType} from './types';\nimport {getDashboardFiltersFromURL} from './utils';\n\nexport const DRAG_HANDLE_CLASS = 'widget-drag';\nconst DRAG_RESIZE_CLASS = 'widget-resize';\nconst DESKTOP = 'desktop';\nconst MOBILE = 'mobile';\nexport const NUM_DESKTOP_COLS = 6;\nconst NUM_MOBILE_COLS = 2;\nconst ROW_HEIGHT = 120;\nconst WIDGET_MARGINS: [number, number] = [16, 16];\nconst BOTTOM_MOBILE_VIEW_POSITION = {\n  x: 0,\n  y: Number.MAX_SAFE_INTEGER,\n};\nconst MOBILE_BREAKPOINT = parseInt(theme.breakpoints.small, 10);\nconst BREAKPOINTS = {[MOBILE]: 0, [DESKTOP]: MOBILE_BREAKPOINT};\nconst COLUMNS = {[MOBILE]: NUM_MOBILE_COLS, [DESKTOP]: NUM_DESKTOP_COLS};\n\ntype Props = {\n  api: Client;\n  dashboard: DashboardDetails;\n  handleAddCustomWidget: (widget: Widget) => void;\n  handleUpdateWidgetList: (widgets: Widget[]) => void;\n  isEditing: boolean;\n  location: Location;\n  /**\n   * Fired when widgets are added/removed/sorted.\n   */\n  onUpdate: (widgets: Widget[]) => void;\n  organization: Organization;\n  router: InjectedRouter;\n  selection: PageFilters;\n  widgetLimitReached: boolean;\n  isPreview?: boolean;\n  newWidget?: Widget;\n  onSetNewWidget?: () => void;\n  paramDashboardId?: string;\n  paramTemplateId?: string;\n};\n\ntype State = {\n  isMobile: boolean;\n  layouts: Layouts;\n  windowWidth: number;\n};\n\nclass Dashboard extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    const {dashboard, organization} = props;\n    const isUsingGrid = organization.features.includes('dashboard-grid-layout');\n    const desktopLayout = getDashboardLayout(dashboard.widgets);\n    this.state = {\n      isMobile: false,\n      layouts: {\n        [DESKTOP]: isUsingGrid ? desktopLayout : [],\n        [MOBILE]: isUsingGrid ? getMobileLayout(desktopLayout, dashboard.widgets) : [],\n      },\n      windowWidth: window.innerWidth,\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.organization.features.includes('dashboard-grid-layout')) {\n      if (state.isMobile) {\n        // Don't need to recalculate any layout state from props in the mobile view\n        // because we want to force different positions (i.e. new widgets added\n        // at the bottom)\n        return null;\n      }\n\n      // If the user clicks \"Cancel\" and the dashboard resets,\n      // recalculate the layout to revert to the unmodified state\n      const dashboardLayout = getDashboardLayout(props.dashboard.widgets);\n      if (\n        !isEqual(\n          dashboardLayout.map(pickDefinedStoreKeys),\n          state.layouts[DESKTOP].map(pickDefinedStoreKeys)\n        )\n      ) {\n        return {\n          ...state,\n          layouts: {\n            [DESKTOP]: dashboardLayout,\n            [MOBILE]: getMobileLayout(dashboardLayout, props.dashboard.widgets),\n          },\n        };\n      }\n    }\n    return null;\n  }\n\n  componentDidMount() {\n    const {organization, newWidget} = this.props;\n    if (organization.features.includes('dashboard-grid-layout')) {\n      window.addEventListener('resize', this.debouncedHandleResize);\n    }\n\n    // Always load organization tags on dashboards\n    this.fetchTags();\n\n    if (newWidget) {\n      this.addNewWidget();\n    }\n\n    // Get member list data for issue widgets\n    this.fetchMemberList();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {selection, newWidget} = this.props;\n\n    if (newWidget && newWidget !== prevProps.newWidget) {\n      this.addNewWidget();\n    }\n    if (!isEqual(prevProps.selection.projects, selection.projects)) {\n      this.fetchMemberList();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.props.organization.features.includes('dashboard-grid-layout')) {\n      window.removeEventListener('resize', this.debouncedHandleResize);\n    }\n\n    window.clearTimeout(this.forceCheckTimeout);\n  }\n\n  forceCheckTimeout: number | undefined = undefined;\n\n  debouncedHandleResize = debounce(() => {\n    this.setState({\n      windowWidth: window.innerWidth,\n    });\n  }, 250);\n\n  fetchMemberList() {\n    const {api, selection} = this.props;\n    // Stores MemberList in MemberListStore for use in modals and sets state for use is child components\n    fetchOrgMembers(\n      api,\n      this.props.organization.slug,\n      selection.projects?.map(projectId => String(projectId))\n    );\n  }\n\n  async addNewWidget() {\n    const {api, organization, newWidget, handleAddCustomWidget, onSetNewWidget} =\n      this.props;\n    if (newWidget) {\n      try {\n        await validateWidget(api, organization.slug, newWidget);\n        handleAddCustomWidget(newWidget);\n        onSetNewWidget?.();\n      } catch (error) {\n        // Don't do anything, widget isn't valid\n        addErrorMessage(error);\n      }\n    }\n  }\n\n  fetchTags() {\n    const {api, organization, selection} = this.props;\n    loadOrganizationTags(api, organization.slug, selection);\n  }\n\n  handleStartAdd = () => {\n    const {\n      organization,\n      dashboard,\n      selection,\n      handleUpdateWidgetList,\n      handleAddCustomWidget,\n      router,\n      location,\n      paramDashboardId,\n    } = this.props;\n\n    if (organization.features.includes('new-widget-builder-experience-design')) {\n      if (paramDashboardId) {\n        router.push({\n          pathname: `/organizations/${organization.slug}/dashboard/${paramDashboardId}/widget/new/`,\n          query: {\n            ...location.query,\n            source: DashboardWidgetSource.DASHBOARDS,\n          },\n        });\n        return;\n      }\n\n      router.push({\n        pathname: `/organizations/${organization.slug}/dashboards/new/widget/new/`,\n        query: {\n          ...location.query,\n          source: DashboardWidgetSource.DASHBOARDS,\n        },\n      });\n\n      return;\n    }\n\n    trackAdvancedAnalyticsEvent('dashboards_views.add_widget_modal.opened', {\n      organization,\n    });\n\n    trackAdvancedAnalyticsEvent('dashboards_views.widget_library.opened', {\n      organization,\n    });\n    openAddDashboardWidgetModal({\n      organization,\n      dashboard,\n      selection,\n      onAddWidget: handleAddCustomWidget,\n      onAddLibraryWidget: (widgets: Widget[]) => handleUpdateWidgetList(widgets),\n      source: DashboardWidgetSource.LIBRARY,\n    });\n  };\n\n  handleUpdateComplete = (prevWidget: Widget) => (nextWidget: Widget) => {\n    const {isEditing, onUpdate, handleUpdateWidgetList} = this.props;\n\n    let nextList = [...this.props.dashboard.widgets];\n    const updateIndex = nextList.indexOf(prevWidget);\n    const nextWidgetData = {\n      ...nextWidget,\n      tempId: prevWidget.tempId,\n    };\n\n    // Only modify and re-compact if the default height has changed\n    if (\n      getDefaultWidgetHeight(prevWidget.displayType) !==\n      getDefaultWidgetHeight(nextWidget.displayType)\n    ) {\n      nextList[updateIndex] = enforceWidgetHeightValues(nextWidgetData);\n      nextList = generateWidgetsAfterCompaction(nextList);\n    } else {\n      nextList[updateIndex] = nextWidgetData;\n    }\n\n    onUpdate(nextList);\n    if (!!!isEditing) {\n      handleUpdateWidgetList(nextList);\n    }\n  };\n\n  handleDeleteWidget = (widgetToDelete: Widget) => () => {\n    const {dashboard, onUpdate, isEditing, handleUpdateWidgetList} = this.props;\n\n    let nextList = dashboard.widgets.filter(widget => widget !== widgetToDelete);\n    nextList = generateWidgetsAfterCompaction(nextList);\n\n    onUpdate(nextList);\n\n    if (!!!isEditing) {\n      handleUpdateWidgetList(nextList);\n    }\n  };\n\n  handleDuplicateWidget = (widget: Widget, index: number) => () => {\n    const {dashboard, onUpdate, isEditing, handleUpdateWidgetList} = this.props;\n\n    const widgetCopy = cloneDeep(\n      assignTempId({...widget, id: undefined, tempId: undefined})\n    );\n\n    let nextList = [...dashboard.widgets];\n    nextList.splice(index, 0, widgetCopy);\n    nextList = generateWidgetsAfterCompaction(nextList);\n\n    onUpdate(nextList);\n    if (!!!isEditing) {\n      handleUpdateWidgetList(nextList);\n    }\n  };\n\n  handleEditWidget = (widget: Widget, index: number) => () => {\n    const {\n      organization,\n      dashboard,\n      selection,\n      router,\n      location,\n      paramDashboardId,\n      handleAddCustomWidget,\n      isEditing,\n    } = this.props;\n\n    if (\n      organization.features.includes('new-widget-builder-experience-design') &&\n      (!organization.features.includes('new-widget-builder-experience-modal-access') ||\n        isEditing)\n    ) {\n      if (paramDashboardId) {\n        router.push({\n          pathname: `/organizations/${organization.slug}/dashboard/${paramDashboardId}/widget/${index}/edit/`,\n          query: {\n            ...location.query,\n            source: DashboardWidgetSource.DASHBOARDS,\n          },\n        });\n        return;\n      }\n\n      router.push({\n        pathname: `/organizations/${organization.slug}/dashboards/new/widget/${index}/edit/`,\n        query: {\n          ...location.query,\n          source: DashboardWidgetSource.DASHBOARDS,\n        },\n      });\n\n      return;\n    }\n\n    trackAdvancedAnalyticsEvent('dashboards_views.edit_widget_modal.opened', {\n      organization,\n    });\n    const modalProps = {\n      organization,\n      widget,\n      selection,\n      onAddWidget: handleAddCustomWidget,\n      onUpdateWidget: this.handleUpdateComplete(widget),\n    };\n    openAddDashboardWidgetModal({\n      ...modalProps,\n      dashboard,\n      source: DashboardWidgetSource.DASHBOARDS,\n    });\n  };\n\n  getWidgetIds() {\n    return [\n      ...this.props.dashboard.widgets.map((widget, index): string => {\n        return generateWidgetId(widget, index);\n      }),\n      ADD_WIDGET_BUTTON_DRAG_ID,\n    ];\n  }\n\n  renderWidget(widget: Widget, index: number) {\n    const {isMobile, windowWidth} = this.state;\n    const {isEditing, organization, widgetLimitReached, isPreview, dashboard, location} =\n      this.props;\n\n    const widgetProps = {\n      widget,\n      isEditing,\n      widgetLimitReached,\n      onDelete: this.handleDeleteWidget(widget),\n      onEdit: this.handleEditWidget(widget, index),\n      onDuplicate: this.handleDuplicateWidget(widget, index),\n      isPreview,\n      dashboardFilters: getDashboardFiltersFromURL(location) ?? dashboard.filters,\n    };\n\n    if (organization.features.includes('dashboard-grid-layout')) {\n      const key = constructGridItemKey(widget);\n      const dragId = key;\n      return (\n        <div key={key} data-grid={widget.layout}>\n          <SortableWidget\n            {...widgetProps}\n            dragId={dragId}\n            isMobile={isMobile}\n            windowWidth={windowWidth}\n            index={String(index)}\n          />\n        </div>\n      );\n    }\n\n    const key = generateWidgetId(widget, index);\n    const dragId = key;\n    return (\n      <SortableWidget {...widgetProps} key={key} dragId={dragId} index={String(index)} />\n    );\n  }\n\n  handleLayoutChange = (_, allLayouts: Layouts) => {\n    const {isMobile} = this.state;\n    const {dashboard, onUpdate} = this.props;\n    const isNotAddButton = ({i}) => i !== ADD_WIDGET_BUTTON_DRAG_ID;\n    const newLayouts = {\n      [DESKTOP]: allLayouts[DESKTOP].filter(isNotAddButton),\n      [MOBILE]: allLayouts[MOBILE].filter(isNotAddButton),\n    };\n\n    // Generate a new list of widgets where the layouts are associated\n    let columnDepths = calculateColumnDepths(newLayouts[DESKTOP]);\n    const newWidgets = dashboard.widgets.map(widget => {\n      const gridKey = constructGridItemKey(widget);\n      let matchingLayout = newLayouts[DESKTOP].find(({i}) => i === gridKey);\n      if (!matchingLayout) {\n        const height = getDefaultWidgetHeight(widget.displayType);\n        const defaultWidgetParams = {\n          w: DEFAULT_WIDGET_WIDTH,\n          h: height,\n          minH: height,\n          i: gridKey,\n        };\n\n        // Calculate the available position\n        const [nextPosition, nextColumnDepths] = getNextAvailablePosition(\n          columnDepths,\n          height\n        );\n        columnDepths = nextColumnDepths;\n\n        // Set the position for the desktop layout\n        matchingLayout = {\n          ...defaultWidgetParams,\n          ...nextPosition,\n        };\n\n        if (isMobile) {\n          // This is a new widget and it's on the mobile page so we keep it at the bottom\n          const mobileLayout = newLayouts[MOBILE].filter(({i}) => i !== gridKey);\n          mobileLayout.push({\n            ...defaultWidgetParams,\n            ...BOTTOM_MOBILE_VIEW_POSITION,\n          });\n          newLayouts[MOBILE] = mobileLayout;\n        }\n      }\n      return {\n        ...widget,\n        layout: pickDefinedStoreKeys(matchingLayout),\n      };\n    });\n\n    this.setState({\n      layouts: newLayouts,\n    });\n    onUpdate(newWidgets);\n\n    // Force check lazyLoad elements that might have shifted into view after (re)moving an upper widget\n    // Unfortunately need to use window.setTimeout since React Grid Layout animates widgets into view when layout changes\n    // RGL doesn't provide a handler for post animation layout change\n    window.clearTimeout(this.forceCheckTimeout);\n    this.forceCheckTimeout = window.setTimeout(forceCheck, 400);\n  };\n\n  handleBreakpointChange = (newBreakpoint: string) => {\n    const {layouts} = this.state;\n    const {\n      dashboard: {widgets},\n    } = this.props;\n\n    if (newBreakpoint === MOBILE) {\n      this.setState({\n        isMobile: true,\n        layouts: {\n          ...layouts,\n          [MOBILE]: getMobileLayout(layouts[DESKTOP], widgets),\n        },\n      });\n      return;\n    }\n    this.setState({isMobile: false});\n  };\n\n  get addWidgetLayout() {\n    const {isMobile, layouts} = this.state;\n    let position: Position = BOTTOM_MOBILE_VIEW_POSITION;\n    if (!isMobile) {\n      const columnDepths = calculateColumnDepths(layouts[DESKTOP]);\n      const [nextPosition] = getNextAvailablePosition(columnDepths, 1);\n      position = nextPosition;\n    }\n\n    return {\n      ...position,\n      w: DEFAULT_WIDGET_WIDTH,\n      h: 1,\n      isResizable: false,\n    };\n  }\n\n  renderGridDashboard() {\n    const {layouts, isMobile} = this.state;\n    const {isEditing, dashboard, organization, widgetLimitReached} = this.props;\n    let {widgets} = dashboard;\n    // Filter out any issue/release widgets if the user does not have the feature flag\n    widgets = widgets.filter(({widgetType}) => {\n      if (widgetType === WidgetType.RELEASE) {\n        return organization.features.includes('dashboards-releases');\n      }\n      return true;\n    });\n\n    const columnDepths = calculateColumnDepths(layouts[DESKTOP]);\n    const widgetsWithLayout = assignDefaultLayout(widgets, columnDepths);\n\n    const canModifyLayout = !isMobile && isEditing;\n\n    return (\n      <GridLayout\n        breakpoints={BREAKPOINTS}\n        cols={COLUMNS}\n        rowHeight={ROW_HEIGHT}\n        margin={WIDGET_MARGINS}\n        draggableHandle={`.${DRAG_HANDLE_CLASS}`}\n        draggableCancel={`.${DRAG_RESIZE_CLASS}`}\n        layouts={layouts}\n        onLayoutChange={this.handleLayoutChange}\n        onBreakpointChange={this.handleBreakpointChange}\n        isDraggable={canModifyLayout}\n        isResizable={canModifyLayout}\n        resizeHandle={\n          <ResizeHandle\n            aria-label={t('Resize Widget')}\n            data-test-id=\"custom-resize-handle\"\n            className={DRAG_RESIZE_CLASS}\n            size=\"xs\"\n            borderless\n            icon={<IconResize size=\"xs\" />}\n          />\n        }\n        useCSSTransforms={false}\n        isBounded\n      >\n        {widgetsWithLayout.map((widget, index) => this.renderWidget(widget, index))}\n        {isEditing && !!!widgetLimitReached && (\n          <AddWidgetWrapper\n            key={ADD_WIDGET_BUTTON_DRAG_ID}\n            data-grid={this.addWidgetLayout}\n          >\n            <AddWidget onAddWidget={this.handleStartAdd} />\n          </AddWidgetWrapper>\n        )}\n      </GridLayout>\n    );\n  }\n\n  renderDndDashboard = () => {\n    const {isEditing, onUpdate, dashboard, organization, widgetLimitReached} = this.props;\n    let {widgets} = dashboard;\n    // Filter out any issue/release widgets if the user does not have the feature flag\n    widgets = widgets.filter(({widgetType}) => {\n      if (widgetType === WidgetType.RELEASE) {\n        return organization.features.includes('dashboards-releases');\n      }\n      return true;\n    });\n\n    const items = this.getWidgetIds();\n\n    return (\n      <DndContext\n        collisionDetection={closestCenter}\n        onDragEnd={({over, active}) => {\n          const activeDragId = active.id;\n          const getIndex = items.indexOf.bind(items);\n\n          const activeIndex = activeDragId ? getIndex(activeDragId) : -1;\n\n          if (over && over.id !== ADD_WIDGET_BUTTON_DRAG_ID) {\n            const overIndex = getIndex(over.id);\n            if (activeIndex !== overIndex) {\n              onUpdate(arrayMove(widgets, activeIndex, overIndex));\n            }\n          }\n        }}\n      >\n        <WidgetContainer>\n          <SortableContext items={items} strategy={rectSortingStrategy}>\n            {widgets.map((widget, index) => this.renderWidget(widget, index))}\n            {isEditing && !!!widgetLimitReached && (\n              <AddWidget onAddWidget={this.handleStartAdd} />\n            )}\n          </SortableContext>\n        </WidgetContainer>\n      </DndContext>\n    );\n  };\n\n  render() {\n    const {organization} = this.props;\n    if (organization.features.includes('dashboard-grid-layout')) {\n      return this.renderGridDashboard();\n    }\n\n    return this.renderDndDashboard();\n  }\n}\n\nexport default withApi(withPageFilters(Dashboard));\n\nconst WidgetContainer = styled('div')`\n  display: grid;\n  grid-template-columns: repeat(2, minmax(0, 1fr));\n  grid-auto-flow: row dense;\n  gap: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    grid-template-columns: repeat(4, minmax(0, 1fr));\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.xlarge}) {\n    grid-template-columns: repeat(6, minmax(0, 1fr));\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.xxlarge}) {\n    grid-template-columns: repeat(8, minmax(0, 1fr));\n  }\n`;\n\n// A widget being dragged has a z-index of 3\n// Allow the Add Widget tile to show above widgets when moved\nconst AddWidgetWrapper = styled('div')`\n  z-index: 5;\n  background-color: ${p => p.theme.background};\n`;\n\nconst GridLayout = styled(WidthProvider(Responsive))`\n  margin: -${space(2)};\n\n  .react-grid-item.react-grid-placeholder {\n    background: ${p => p.theme.purple200};\n    border-radius: ${p => p.theme.borderRadius};\n  }\n`;\n\nconst ResizeHandle = styled(Button)`\n  position: absolute;\n  z-index: 2;\n  bottom: ${space(0.5)};\n  right: ${space(0.5)};\n  color: ${p => p.theme.subText};\n  cursor: nwse-resize;\n\n  .react-resizable-hide & {\n    display: none;\n  }\n`;\n"],"names":["MemberActions","createActions","SectionHeading","space","p","theme","subText","fontSizeMedium","SectionValue","InlineContainer","breakpoints","small","ChartControls","border","HeaderTitle","text","cardTitle","headingColor","HeaderTitleLegend","background","borderRadius","HeaderValue","headerFontSize","ChartContainer","WrappedComponent","Component","render","project","props","this","context","getDisplayName","SentryTypes","DRAG_HANDLE_CLASS","DESKTOP","MOBILE","NUM_DESKTOP_COLS","WIDGET_MARGINS","BOTTOM_MOBILE_VIEW_POSITION","x","y","Number","MAX_SAFE_INTEGER","MOBILE_BREAKPOINT","parseInt","BREAKPOINTS","COLUMNS","Dashboard","constructor","super","undefined","debounce","setState","windowWidth","window","innerWidth","organization","dashboard","selection","handleUpdateWidgetList","handleAddCustomWidget","router","location","paramDashboardId","features","includes","push","pathname","slug","query","source","DashboardWidgetSource","trackAdvancedAnalyticsEvent","openAddDashboardWidgetModal","onAddWidget","onAddLibraryWidget","widgets","prevWidget","nextWidget","isEditing","onUpdate","nextList","updateIndex","indexOf","nextWidgetData","tempId","getDefaultWidgetHeight","displayType","enforceWidgetHeightValues","generateWidgetsAfterCompaction","widgetToDelete","filter","widget","index","widgetCopy","cloneDeep","assignTempId","id","splice","modalProps","onUpdateWidget","handleUpdateComplete","_","allLayouts","isMobile","state","isNotAddButton","i","ADD_WIDGET_BUTTON_DRAG_ID","newLayouts","columnDepths","calculateColumnDepths","newWidgets","map","gridKey","constructGridItemKey","matchingLayout","find","height","defaultWidgetParams","w","DEFAULT_WIDGET_WIDTH","h","minH","nextPosition","nextColumnDepths","getNextAvailablePosition","mobileLayout","layout","pickDefinedStoreKeys","layouts","clearTimeout","forceCheckTimeout","setTimeout","forceCheck","newBreakpoint","getMobileLayout","widgetLimitReached","widgetType","WidgetType","items","getWidgetIds","collisionDetection","closestCenter","onDragEnd","over","active","activeDragId","getIndex","bind","activeIndex","overIndex","arrayMove","WidgetContainer","strategy","rectSortingStrategy","renderWidget","handleStartAdd","isUsingGrid","desktopLayout","getDashboardLayout","dashboardLayout","isEqual","componentDidMount","newWidget","addEventListener","debouncedHandleResize","fetchTags","addNewWidget","fetchMemberList","componentDidUpdate","prevProps","projects","componentWillUnmount","removeEventListener","api","fetchOrgMembers","projectId","String","onSetNewWidget","validateWidget","error","addErrorMessage","loadOrganizationTags","generateWidgetId","isPreview","widgetProps","onDelete","handleDeleteWidget","onEdit","handleEditWidget","onDuplicate","handleDuplicateWidget","dashboardFilters","getDashboardFiltersFromURL","filters","key","dragId","addWidgetLayout","position","isResizable","renderGridDashboard","widgetsWithLayout","assignDefaultLayout","canModifyLayout","GridLayout","cols","rowHeight","margin","draggableHandle","draggableCancel","onLayoutChange","handleLayoutChange","onBreakpointChange","handleBreakpointChange","isDraggable","resizeHandle","ResizeHandle","t","className","size","borderless","icon","useCSSTransforms","isBounded","AddWidgetWrapper","renderDndDashboard","withApi","withPageFilters","medium","xlarge","xxlarge","WidthProvider","Responsive","purple200","Button"],"sourceRoot":""}