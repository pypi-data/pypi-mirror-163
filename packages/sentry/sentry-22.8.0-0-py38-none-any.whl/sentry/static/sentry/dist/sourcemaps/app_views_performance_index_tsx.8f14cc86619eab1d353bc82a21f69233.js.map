{"version":3,"file":"chunks/app_views_performance_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/performance/contexts/metricsEnhancedSetting.tsx","webpack:///./app/utils/performance/contexts/utils.tsx","webpack:///./app/views/performance/index.tsx"],"sourcesContent":["import {Dispatch, ReactNode, useCallback, useReducer} from 'react';\nimport {browserHistory} from 'react-router';\nimport {Location} from 'history';\n\nimport {Organization} from 'sentry/types';\nimport localStorage from 'sentry/utils/localStorage';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport useOrganization from 'sentry/utils/useOrganization';\n\nimport {createDefinedContext} from './utils';\n\nexport interface MetricsEnhancedSettingContext {\n  autoSampleState: AutoSampleState;\n  memoizationKey: string;\n  metricSettingState: MEPState | null;\n  setAutoSampleState: Dispatch<AutoSampleState>;\n  setMetricSettingState: Dispatch<MEPState>;\n  shouldQueryProvideMEPAutoParams: boolean;\n  shouldQueryProvideMEPMetricParams: boolean;\n  shouldQueryProvideMEPTransactionParams: boolean;\n}\n\nconst [_MEPSettingProvider, _useMEPSettingContext, _MEPSettingContext] =\n  createDefinedContext<MetricsEnhancedSettingContext>({\n    name: 'MetricsEnhancedSettingContext',\n  });\n\nexport const MEPConsumer = _MEPSettingContext.Consumer;\n\n/**\n * These will be called something else in the copy, but functionally the data is coming from metrics / transactions.\n * \"Unset\" should be the initial state before any queries return for the first time.\n */\nexport enum AutoSampleState {\n  unset = 'unset',\n  metrics = 'metrics',\n  transactions = 'transactions',\n}\n\n/**\n * Metrics/transactions will be called something else in the copy, but functionally the data is coming from metrics / transactions.\n */\nexport enum MEPState {\n  auto = 'auto',\n  metricsOnly = 'metricsOnly',\n  transactionsOnly = 'transactionsOnly',\n}\n\nexport const METRIC_SETTING_PARAM = 'metricSetting';\nexport const METRIC_SEARCH_SETTING_PARAM = 'metricSearchSetting'; // TODO: Clean this up since we don't need multiple params in practice.\n\nconst storageKey = 'performance.metrics-enhanced-setting';\nexport class MEPSetting {\n  static get(): MEPState | null {\n    const value = localStorage.getItem(storageKey);\n    if (value) {\n      if (!(value in MEPState)) {\n        localStorage.removeItem(storageKey);\n        return null;\n      }\n      return MEPState[value];\n    }\n    return null;\n  }\n\n  static set(value: MEPState) {\n    localStorage.setItem(storageKey, value);\n  }\n}\n\nexport function canUseMetricsDevUI(organization: Organization) {\n  return organization.features.includes('performance-use-metrics');\n}\n\nexport function canUseMetricsData(organization: Organization) {\n  const isDevFlagOn = canUseMetricsDevUI(organization); // Forces metrics data on as well.\n  const isInternalViewOn = organization.features.includes(\n    'performance-transaction-name-only-search'\n  ); // TODO: Swap this flag out.\n\n  const samplingRolloutFlag = organization.features.includes('server-side-sampling');\n  const isRollingOut =\n    samplingRolloutFlag && organization.features.includes('mep-rollout-flag');\n\n  return isDevFlagOn || isInternalViewOn || isRollingOut;\n}\n\nexport const MEPSettingProvider = ({\n  children,\n  location,\n  _hasMEPState,\n  forceTransactions,\n}: {\n  children: ReactNode;\n  _hasMEPState?: MEPState;\n  forceTransactions?: boolean;\n  location?: Location;\n}) => {\n  const organization = useOrganization();\n\n  const canUseMEP = canUseMetricsData(organization);\n\n  const allowedStates = [MEPState.metricsOnly, MEPState.transactionsOnly];\n  const _metricSettingFromParam = location\n    ? decodeScalar(location.query[METRIC_SETTING_PARAM])\n    : MEPState.metricsOnly;\n  let defaultMetricsState = MEPState.metricsOnly;\n\n  if (forceTransactions) {\n    defaultMetricsState = MEPState.transactionsOnly;\n  }\n\n  const metricSettingFromParam =\n    allowedStates.find(s => s === _metricSettingFromParam) ?? defaultMetricsState;\n\n  const isControlledMEP = typeof _hasMEPState !== 'undefined';\n\n  const [_metricSettingState, _setMetricSettingState] = useReducer(\n    (_: MEPState, next: MEPState) => next,\n    metricSettingFromParam\n  );\n\n  const setMetricSettingState = useCallback(\n    (settingState: MEPState) => {\n      if (!location) {\n        return;\n      }\n      browserHistory.replace({\n        ...location,\n        query: {\n          ...location.query,\n          [METRIC_SETTING_PARAM]: settingState,\n        },\n      });\n      _setMetricSettingState(settingState);\n    },\n    [location, _setMetricSettingState]\n  );\n\n  const [autoSampleState, setAutoSampleState] = useReducer(\n    (_: AutoSampleState, next: AutoSampleState) => next,\n    AutoSampleState.unset\n  );\n\n  const metricSettingState = isControlledMEP ? _hasMEPState : _metricSettingState;\n\n  const shouldQueryProvideMEPAutoParams =\n    canUseMEP && metricSettingState === MEPState.auto;\n  const shouldQueryProvideMEPMetricParams =\n    canUseMEP && metricSettingState === MEPState.metricsOnly;\n  const shouldQueryProvideMEPTransactionParams =\n    canUseMEP && metricSettingState === MEPState.transactionsOnly;\n\n  const memoizationKey = `${metricSettingState}`;\n\n  return (\n    <_MEPSettingProvider\n      value={{\n        autoSampleState,\n        metricSettingState,\n        shouldQueryProvideMEPAutoParams,\n        shouldQueryProvideMEPMetricParams,\n        shouldQueryProvideMEPTransactionParams,\n        memoizationKey,\n        setMetricSettingState,\n        setAutoSampleState,\n      }}\n    >\n      {children}\n    </_MEPSettingProvider>\n  );\n};\n\nexport const useMEPSettingContext = _useMEPSettingContext;\n","import {createContext, useContext} from 'react';\n\ntype CreateContextReturn<T> = [React.Provider<T>, () => T, React.Context<T>];\n/*\n * Creates provider, context and useContext hook, guarding against calling useContext without a provider.\n * [0]: https://github.com/chakra-ui/chakra-ui/blob/c0f9c287df0397e2aa9bd90eb3d5c2f2c08aa0b1/packages/utils/src/react-helpers.ts#L27\n *\n * Renamed to createDefinedContext to not conflate with React context.\n */\nexport function createDefinedContext<ContextType>(options: {\n  name: string;\n  errorMessage?: string;\n  strict?: boolean;\n}) {\n  const {\n    strict = true,\n    errorMessage = `useContext for \"${options.name}\" must be inside a Provider with a value`,\n    name,\n  } = options;\n\n  const Context = createContext<ContextType | undefined>(undefined);\n\n  Context.displayName = name;\n\n  function useDefinedContext() {\n    const context = useContext(Context);\n    if (!context && strict) {\n      throw new Error(errorMessage);\n    }\n    return context;\n  }\n\n  return [\n    Context.Provider,\n    useDefinedContext,\n    Context,\n  ] as CreateContextReturn<ContextType>;\n}\n","import Feature from 'sentry/components/acl/feature';\nimport Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {PageContent} from 'sentry/styles/organization';\nimport {Organization} from 'sentry/types';\nimport {MEPSettingProvider} from 'sentry/utils/performance/contexts/metricsEnhancedSetting';\nimport withOrganization from 'sentry/utils/withOrganization';\n\ntype Props = {\n  children: React.ReactChildren;\n  organization: Organization;\n};\n\nfunction PerformanceContainer({organization, children}: Props) {\n  function renderNoAccess() {\n    return (\n      <PageContent>\n        <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n      </PageContent>\n    );\n  }\n\n  return (\n    <Feature\n      hookName=\"feature-disabled:performance-page\"\n      features={['performance-view']}\n      organization={organization}\n      renderDisabled={renderNoAccess}\n    >\n      <MEPSettingProvider>{children}</MEPSettingProvider>\n    </Feature>\n  );\n}\n\nexport default withOrganization(PerformanceContainer);\n"],"names":["_MEPSettingProvider","_useMEPSettingContext","_MEPSettingContext","createDefinedContext","name","MEPConsumer","Consumer","AutoSampleState","MEPState","METRIC_SETTING_PARAM","METRIC_SEARCH_SETTING_PARAM","canUseMetricsData","organization","isDevFlagOn","features","includes","canUseMetricsDevUI","isInternalViewOn","isRollingOut","MEPSettingProvider","children","location","_hasMEPState","forceTransactions","canUseMEP","useOrganization","allowedStates","metricsOnly","transactionsOnly","_metricSettingFromParam","decodeScalar","query","defaultMetricsState","metricSettingFromParam","find","s","isControlledMEP","_metricSettingState","_setMetricSettingState","useReducer","_","next","setMetricSettingState","useCallback","settingState","browserHistory","autoSampleState","setAutoSampleState","unset","metricSettingState","shouldQueryProvideMEPAutoParams","auto","shouldQueryProvideMEPMetricParams","shouldQueryProvideMEPTransactionParams","memoizationKey","value","useMEPSettingContext","options","strict","errorMessage","Context","createContext","undefined","displayName","Provider","context","useContext","Error","PerformanceContainer","hookName","renderDisabled","type","t","withOrganization"],"sourceRoot":""}