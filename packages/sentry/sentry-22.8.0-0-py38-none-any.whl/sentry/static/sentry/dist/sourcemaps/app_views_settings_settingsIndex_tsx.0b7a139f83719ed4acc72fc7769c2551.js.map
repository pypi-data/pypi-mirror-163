{"version":3,"file":"chunks/app_views_settings_settingsIndex_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"+lCAuBA,MAAMA,EAMC,yBAaP,SAASC,EAAT,GAAqE,IAA9C,aAACC,KAAiBC,GAA4B,GACnEC,EAAAA,EAAAA,YAAU,KAIJF,QAA+C,IAAxBA,EAAaG,SACtCC,EAAAA,EAAAA,IAAyBJ,EAAaK,KAAM,CAC1CC,WAAW,EACXC,cAAc,MAGjB,CAACP,IAEJ,MAAMQ,EAAOC,EAAAA,EAAAA,IAAgB,QACvBC,EAAeD,EAAAA,EAAAA,IAAgB,gBAE/BE,EACHX,GAAiB,aAAYA,EAAaK,SAAY,GAEnDO,EAAmB,CACvBF,aAAAA,EACAC,wBAAAA,GAGIE,GACJ,QAACC,EAAD,YACE,QAACC,EAAD,WACE,QAACC,EAAD,CAAcC,GAAG,qBAAjB,WACE,QAAC,IAAD,CAAYT,KAAMA,EAAMU,KAlCX,MAmCZC,EAAAA,EAAAA,GAAE,oBAIP,QAACC,EAAD,YACE,yBAAKD,EAAAA,EAAAA,GAAE,eAAP,QACA,yBACE,wBACE,QAACE,EAAD,CAAUJ,GAAG,8BAAb,UACGE,EAAAA,EAAAA,GAAE,2BAGP,wBACE,QAACE,EAAD,CAAUJ,GAAG,mCAAb,UACGE,EAAAA,EAAAA,GAAE,iCAGP,wBACE,QAACE,EAAD,CAAUJ,GAAG,qBAAb,UAAmCE,EAAAA,EAAAA,GAAE,iCAOzCG,GACJ,QAACR,EAAD,YACId,IAAgB,QAAC,IAAD,CAAkBuB,SAAO,EAACC,aAAW,KACvD,QAACT,EAAD,WACE,QAACC,EAAD,CAAcC,GAAIN,EAAlB,UACGX,GACC,QAAC,IAAD,CAAoBA,aAAcA,EAAckB,KAlErC,MAoEX,QAACO,EAAD,CAAmBC,MAAM,WAAzB,UACE,QAAC,KAAD,CAAWR,KAAK,UAGpB,QAACS,EAAD,UACG3B,EAAeA,EAAaK,MAAOc,EAAAA,EAAAA,GAAE,2BAK5C,QAACC,EAAD,YACE,yBAAKD,EAAAA,EAAAA,GAAE,eAAP,QACA,yBACE,wBACE,QAACE,EAAD,CAAUJ,GAAK,GAAEN,aAAjB,UACGQ,EAAAA,EAAAA,GAAE,iBAGP,wBACE,QAACE,EAAD,CAAUJ,GAAK,GAAEN,UAAjB,UAAmDQ,EAAAA,EAAAA,GAAE,cAEvD,wBACE,QAACE,EAAD,CAAUJ,GAAK,GAAEN,YAAjB,UAAqDQ,EAAAA,EAAAA,GAAE,wBAO3DS,GACJ,QAACd,EAAD,YACE,QAACC,EAAD,WACE,QAACc,EAAD,CAAsBC,KAhHb,0BAgHT,WACE,QAACL,EAAD,CAAmBC,MAAM,UAAzB,UACE,QAAC,KAAD,CAAUR,KAAK,UAEhBC,EAAAA,EAAAA,GAAE,uBAIP,QAACC,EAAD,YACE,yBAAKD,EAAAA,EAAAA,GAAE,eAAP,QACA,yBACE,wBACE,QAACY,EAAD,CAAkBD,KA1HF,mDA0HhB,UACGX,EAAAA,EAAAA,GAAE,yBAGP,wBACE,QAACY,EAAD,CAAkBD,KAhIH,kCAgIf,UACGX,EAAAA,EAAAA,GAAE,+BAGP,wBACE,QAACY,EAAD,CAAkBD,KAnIT,sCAmIT,UACGX,EAAAA,EAAAA,GAAE,2BAQTa,GACJ,QAAClB,EAAD,YACE,QAACC,EAAD,WACE,QAACkB,EAAD,CAAaC,MAAI,KAAKtB,EAAtB,WACE,QAACa,EAAD,CAAmBC,MAAM,YAAzB,UACE,QAAC,KAAD,CAAaR,KAAK,UAEnBC,EAAAA,EAAAA,GAAE,iBAIP,QAACC,EAAD,YACE,yBAAKD,EAAAA,EAAAA,GAAE,eAAP,QACA,yBACE,wBACE,QAACc,EAAD,IAAiBrB,EAAjB,SACGF,GAAeS,EAAAA,EAAAA,GAAE,qBAAsBA,EAAAA,EAAAA,GAAE,wBAG9C,wBACE,QAACY,EAAD,CAAkBD,KA3Jb,6CA2JL,UACGX,EAAAA,EAAAA,GAAE,yBAGP,wBACE,QAACY,EAAD,CAAkBD,KA/JZ,4BA+JN,UACGX,EAAAA,EAAAA,GAAE,+BAQTgB,GACJ,QAACrB,EAAD,YACE,QAACC,EAAD,WACE,QAACC,EAAD,CAAcC,GAAInB,EAAlB,WACE,QAAC2B,EAAD,WACE,QAAC,KAAD,CAAUP,KAAK,KAAKkB,SAAO,OAE5BjB,EAAAA,EAAAA,GAAE,kBAIP,QAACC,EAAD,YACE,yBAAKD,EAAAA,EAAAA,GAAE,eAAP,QACA,yBACE,wBACE,QAACE,EAAD,CAAUJ,GAAInB,EAAd,UAA0BqB,EAAAA,EAAAA,GAAE,oBAE9B,wBACE,QAACE,EAAD,CAAUJ,GAAK,GAAEN,uBAAjB,UACGQ,EAAAA,EAAAA,GAAE,0BAGP,wBACE,QAACY,EAAD,CAAkBD,KApMT,8BAoMT,UACGX,EAAAA,EAAAA,GAAE,8BAQf,OACE,QAAC,IAAD,CACEkB,MAAOrC,EAAgB,GAAEA,EAAaK,gBAAkB,WAD1D,UAGE,QAAC,IAAD,IAAoBJ,EAApB,UACE,QAACqC,EAAD,YACE,QAAC,IAAD,UAAezB,IACdS,EACAM,EACAI,GACD,QAAC,IAAD,WAAeG,EAAf,cAzMDpC,EAAAA,YAAAA,gBAgNT,SAAewC,EAAAA,EAAAA,GAAkBxC,GAE3BuC,GAAa,OAAO,MAAP,qBAAH,uDAGPE,EAAAA,EAAAA,GAAM,GAHC,KAMV1B,GAAY,OAAO2B,EAAAA,GAAP,qBAAH,2CAIT1B,GAAkB,OAAO2B,EAAAA,GAAP,qBAAH,eACLC,GAAKA,EAAEC,MAAMC,YADR,eAENF,GAAKA,EAAEC,MAAME,oBAFP,qDAKRN,EAAAA,EAAAA,GAAM,GALE,KAQfpB,GAAgB,OAAO2B,EAAAA,EAAP,qBAAH,yEAYJJ,GAAKA,EAAEC,MAAMI,SAZT,OAiBbvB,GAAoB,OAAO,MAAP,qBAAH,eACPkB,GAAKA,EAAEC,MAAMD,EAAEjB,OAAS,YADjB,WAEZiB,GAAKA,EAAEC,MAAMK,OAFD,UA3PA,GA2PA,aA3PA,GA2PA,oBA3PA,GA2PA,8DAWjBC,EAAU,QAAC,MAACN,GAAF,SAA6BO,EAAAA,EAAAA,IAA5B,SACNP,EAAMQ,UADD,kBAIHR,EAAMQ,UAJH,UAQVC,GAAcF,EAAAA,EAAAA,IAAH,2FAKRX,EAAAA,EAAAA,GAAM,KALE,uEAWXnB,GAAW,OAAOiC,EAAAA,EAAP,qBACbJ,EADU,KAIRnB,GAAmB,OAAOwB,EAAAA,EAAP,qBACrBL,EADkB,KAIhBlC,GAAe,OAAOK,EAAP,qBACjBgC,EADc,KAIZxB,GAAuB,OAAO0B,EAAAA,EAAP,qBACzBF,EADsB,KAU1B,SAASpB,EAAT,GAKqB,IALA,aACnBvB,EADmB,KAEnBwB,EAFmB,wBAGnBvB,KACGV,GACgB,EACnB,GAAIS,EAAc,CAChB,MAAM8C,EAAiBtB,EAAOL,EAAuBE,EACrD,OAAO,QAACyB,EAAD,CAAgB1B,KA5TlB,8BA4TyC7B,IAGhD,MAAMuD,EAAiBtB,EAAOlB,EAAeK,EAC7C,OAAO,QAACmC,EAAD,CAAgBvC,GAAK,GAAEN,cAAsCV,IAZ7DgC,EAAAA,YAAAA,cAeT,MAAMN,GAAmB,OAAO,MAAP,qBAAH,sBAGlBgB,GAAKA,EAAEC,MAAMa,kBAHK","sources":["webpack:///./app/views/settings/settingsIndex.tsx"],"sourcesContent":["import {useEffect} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {fetchOrganizationDetails} from 'sentry/actionCreators/organizations';\nimport DemoModeGate from 'sentry/components/acl/demoModeGate';\nimport OrganizationAvatar from 'sentry/components/avatar/organizationAvatar';\nimport UserAvatar from 'sentry/components/avatar/userAvatar';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport Link, {LinkProps} from 'sentry/components/links/link';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {IconDocs, IconLock, IconStack, IconSupport} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport ConfigStore from 'sentry/stores/configStore';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {Theme} from 'sentry/utils/theme';\nimport withLatestContext from 'sentry/utils/withLatestContext';\nimport SettingsLayout from 'sentry/views/settings/components/settingsLayout';\n\nconst LINKS = {\n  DOCUMENTATION: 'https://docs.sentry.io/',\n  DOCUMENTATION_PLATFORMS: 'https://docs.sentry.io/clients/',\n  DOCUMENTATION_QUICKSTART: 'https://docs.sentry.io/platform-redirect/?next=/',\n  DOCUMENTATION_CLI: 'https://docs.sentry.io/product/cli/',\n  DOCUMENTATION_API: 'https://docs.sentry.io/api/',\n  API: '/settings/account/api/',\n  MANAGE: '/manage/',\n  FORUM: 'https://forum.sentry.io/',\n  GITHUB_ISSUES: 'https://github.com/getsentry/sentry/issues',\n  SERVICE_STATUS: 'https://status.sentry.io/',\n};\n\nconst HOME_ICON_SIZE = 56;\n\ninterface SettingsIndexProps extends RouteComponentProps<{}, {}> {\n  organization: Organization;\n}\n\nfunction SettingsIndex({organization, ...props}: SettingsIndexProps) {\n  useEffect(() => {\n    // if there is no org in context, SidebarDropdown uses an org from `withLatestContext`\n    // (which queries the org index endpoint instead of org details)\n    // and does not have `access` info\n    if (organization && typeof organization.access === 'undefined') {\n      fetchOrganizationDetails(organization.slug, {\n        setActive: true,\n        loadProjects: true,\n      });\n    }\n  }, [organization]);\n\n  const user = ConfigStore.get('user');\n  const isSelfHosted = ConfigStore.get('isSelfHosted');\n\n  const organizationSettingsUrl =\n    (organization && `/settings/${organization.slug}/`) || '';\n\n  const supportLinkProps = {\n    isSelfHosted,\n    organizationSettingsUrl,\n  };\n\n  const myAccount = (\n    <GridPanel>\n      <HomePanelHeader>\n        <HomeLinkIcon to=\"/settings/account/\">\n          <UserAvatar user={user} size={HOME_ICON_SIZE} />\n          {t('My Account')}\n        </HomeLinkIcon>\n      </HomePanelHeader>\n\n      <HomePanelBody>\n        <h3>{t('Quick links')}:</h3>\n        <ul>\n          <li>\n            <HomeLink to=\"/settings/account/security/\">\n              {t('Change my password')}\n            </HomeLink>\n          </li>\n          <li>\n            <HomeLink to=\"/settings/account/notifications/\">\n              {t('Notification Preferences')}\n            </HomeLink>\n          </li>\n          <li>\n            <HomeLink to=\"/settings/account/\">{t('Change my avatar')}</HomeLink>\n          </li>\n        </ul>\n      </HomePanelBody>\n    </GridPanel>\n  );\n\n  const orgSettings = (\n    <GridPanel>\n      {!organization && <LoadingIndicator overlay hideSpinner />}\n      <HomePanelHeader>\n        <HomeLinkIcon to={organizationSettingsUrl}>\n          {organization ? (\n            <OrganizationAvatar organization={organization} size={HOME_ICON_SIZE} />\n          ) : (\n            <HomeIconContainer color=\"green300\">\n              <IconStack size=\"lg\" />\n            </HomeIconContainer>\n          )}\n          <OrganizationName>\n            {organization ? organization.slug : t('No Organization')}\n          </OrganizationName>\n        </HomeLinkIcon>\n      </HomePanelHeader>\n\n      <HomePanelBody>\n        <h3>{t('Quick links')}:</h3>\n        <ul>\n          <li>\n            <HomeLink to={`${organizationSettingsUrl}projects/`}>\n              {t('Projects')}\n            </HomeLink>\n          </li>\n          <li>\n            <HomeLink to={`${organizationSettingsUrl}teams/`}>{t('Teams')}</HomeLink>\n          </li>\n          <li>\n            <HomeLink to={`${organizationSettingsUrl}members/`}>{t('Members')}</HomeLink>\n          </li>\n        </ul>\n      </HomePanelBody>\n    </GridPanel>\n  );\n\n  const documentation = (\n    <GridPanel>\n      <HomePanelHeader>\n        <ExternalHomeLinkIcon href={LINKS.DOCUMENTATION}>\n          <HomeIconContainer color=\"pink300\">\n            <IconDocs size=\"lg\" />\n          </HomeIconContainer>\n          {t('Documentation')}\n        </ExternalHomeLinkIcon>\n      </HomePanelHeader>\n\n      <HomePanelBody>\n        <h3>{t('Quick links')}:</h3>\n        <ul>\n          <li>\n            <ExternalHomeLink href={LINKS.DOCUMENTATION_QUICKSTART}>\n              {t('Quickstart Guide')}\n            </ExternalHomeLink>\n          </li>\n          <li>\n            <ExternalHomeLink href={LINKS.DOCUMENTATION_PLATFORMS}>\n              {t('Platforms & Frameworks')}\n            </ExternalHomeLink>\n          </li>\n          <li>\n            <ExternalHomeLink href={LINKS.DOCUMENTATION_CLI}>\n              {t('Sentry CLI')}\n            </ExternalHomeLink>\n          </li>\n        </ul>\n      </HomePanelBody>\n    </GridPanel>\n  );\n\n  const support = (\n    <GridPanel>\n      <HomePanelHeader>\n        <SupportLink icon {...supportLinkProps}>\n          <HomeIconContainer color=\"purple300\">\n            <IconSupport size=\"lg\" />\n          </HomeIconContainer>\n          {t('Support')}\n        </SupportLink>\n      </HomePanelHeader>\n\n      <HomePanelBody>\n        <h3>{t('Quick links')}:</h3>\n        <ul>\n          <li>\n            <SupportLink {...supportLinkProps}>\n              {isSelfHosted ? t('Community Forums') : t('Contact Support')}\n            </SupportLink>\n          </li>\n          <li>\n            <ExternalHomeLink href={LINKS.GITHUB_ISSUES}>\n              {t('Sentry on GitHub')}\n            </ExternalHomeLink>\n          </li>\n          <li>\n            <ExternalHomeLink href={LINKS.SERVICE_STATUS}>\n              {t('Service Status')}\n            </ExternalHomeLink>\n          </li>\n        </ul>\n      </HomePanelBody>\n    </GridPanel>\n  );\n\n  const apiKeys = (\n    <GridPanel>\n      <HomePanelHeader>\n        <HomeLinkIcon to={LINKS.API}>\n          <HomeIconContainer>\n            <IconLock size=\"lg\" isSolid />\n          </HomeIconContainer>\n          {t('API Keys')}\n        </HomeLinkIcon>\n      </HomePanelHeader>\n\n      <HomePanelBody>\n        <h3>{t('Quick links')}:</h3>\n        <ul>\n          <li>\n            <HomeLink to={LINKS.API}>{t('Auth Tokens')}</HomeLink>\n          </li>\n          <li>\n            <HomeLink to={`${organizationSettingsUrl}developer-settings/`}>\n              {t('Your Integrations')}\n            </HomeLink>\n          </li>\n          <li>\n            <ExternalHomeLink href={LINKS.DOCUMENTATION_API}>\n              {t('Documentation')}\n            </ExternalHomeLink>\n          </li>\n        </ul>\n      </HomePanelBody>\n    </GridPanel>\n  );\n\n  return (\n    <SentryDocumentTitle\n      title={organization ? `${organization.slug} Settings` : 'Settings'}\n    >\n      <SettingsLayout {...props}>\n        <GridLayout>\n          <DemoModeGate>{myAccount}</DemoModeGate>\n          {orgSettings}\n          {documentation}\n          {support}\n          <DemoModeGate>{apiKeys} </DemoModeGate>\n        </GridLayout>\n      </SettingsLayout>\n    </SentryDocumentTitle>\n  );\n}\n\nexport default withLatestContext(SettingsIndex);\n\nconst GridLayout = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  gap: ${space(2)};\n`;\n\nconst GridPanel = styled(Panel)`\n  margin-bottom: 0;\n`;\n\nconst HomePanelHeader = styled(PanelHeader)`\n  background: ${p => p.theme.background};\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  align-items: center;\n  text-transform: unset;\n  padding: ${space(4)};\n`;\n\nconst HomePanelBody = styled(PanelBody)`\n  padding: 30px;\n\n  h3 {\n    font-size: 14px;\n  }\n\n  ul {\n    margin: 0;\n    li {\n      line-height: 1.6;\n      /* Bullet color */\n      color: ${p => p.theme.gray200};\n    }\n  }\n`;\n\nconst HomeIconContainer = styled('div')<{color?: string}>`\n  background: ${p => p.theme[p.color || 'gray300']};\n  color: ${p => p.theme.white};\n  width: ${HOME_ICON_SIZE}px;\n  height: ${HOME_ICON_SIZE}px;\n  border-radius: ${HOME_ICON_SIZE}px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst linkCss = ({theme}: {theme: Theme}) => css`\n  color: ${theme.purple300};\n\n  &:hover {\n    color: ${theme.purple300};\n  }\n`;\n\nconst linkIconCss = css`\n  overflow: hidden;\n  width: 100%;\n  display: grid;\n  grid-template-rows: max-content max-content;\n  gap: ${space(1.5)};\n  align-items: center;\n  justify-items: center;\n  justify-content: center;\n`;\n\nconst HomeLink = styled(Link)`\n  ${linkCss}\n`;\n\nconst ExternalHomeLink = styled(ExternalLink)`\n  ${linkCss}\n`;\n\nconst HomeLinkIcon = styled(HomeLink)`\n  ${linkIconCss}\n`;\n\nconst ExternalHomeLinkIcon = styled(ExternalLink)`\n  ${linkIconCss}\n`;\n\ninterface SupportLinkProps extends Omit<LinkProps, 'ref' | 'to'> {\n  isSelfHosted: boolean;\n  organizationSettingsUrl: string;\n  icon?: boolean;\n}\n\nfunction SupportLink({\n  isSelfHosted,\n  icon,\n  organizationSettingsUrl,\n  ...props\n}: SupportLinkProps) {\n  if (isSelfHosted) {\n    const SelfHostedLink = icon ? ExternalHomeLinkIcon : ExternalHomeLink;\n    return <SelfHostedLink href={LINKS.FORUM} {...props} />;\n  }\n\n  const SelfHostedLink = icon ? HomeLinkIcon : HomeLink;\n  return <SelfHostedLink to={`${organizationSettingsUrl}support`} {...props} />;\n}\n\nconst OrganizationName = styled('div')`\n  line-height: 1.1em;\n\n  ${p => p.theme.overflowEllipsis};\n`;\n"],"names":["LINKS","SettingsIndex","organization","props","useEffect","access","fetchOrganizationDetails","slug","setActive","loadProjects","user","ConfigStore","isSelfHosted","organizationSettingsUrl","supportLinkProps","myAccount","GridPanel","HomePanelHeader","HomeLinkIcon","to","size","t","HomePanelBody","HomeLink","orgSettings","overlay","hideSpinner","HomeIconContainer","color","OrganizationName","documentation","ExternalHomeLinkIcon","href","ExternalHomeLink","support","SupportLink","icon","apiKeys","isSolid","title","GridLayout","withLatestContext","space","Panel","PanelHeader","p","theme","background","fontSizeExtraLarge","PanelBody","gray200","white","linkCss","css","purple300","linkIconCss","Link","ExternalLink","SelfHostedLink","overflowEllipsis"],"sourceRoot":""}