{"version":3,"file":"chunks/app_utils_discover_genericDiscoverQuery_tsx-app_views_organizationGroupDetails_groupReplays_i-c05537.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/discover/genericDiscoverQuery.tsx","webpack:///./app/utils/performance/contexts/performanceEventViewContext.tsx","webpack:///./app/utils/performance/contexts/utils.tsx","webpack:///./app/utils/useLocation.tsx","webpack:///./app/utils/useParams.tsx","webpack:///./app/views/organizationGroupDetails/groupReplays/groupReplays.tsx","webpack:///./app/views/organizationGroupDetails/groupReplays/index.tsx"],"sourcesContent":["import {Component, useContext} from 'react';\nimport {Location} from 'history';\n\nimport {EventQuery} from 'sentry/actionCreators/events';\nimport {Client, ResponseMeta} from 'sentry/api';\nimport {t} from 'sentry/locale';\nimport EventView, {\n  ImmutableEventView,\n  isAPIPayloadSimilar,\n  LocationQuery,\n} from 'sentry/utils/discover/eventView';\nimport {QueryBatching} from 'sentry/utils/performance/contexts/genericQueryBatcher';\nimport {PerformanceEventViewContext} from 'sentry/utils/performance/contexts/performanceEventViewContext';\nimport {OrganizationContext} from 'sentry/views/organizationContext';\n\nexport class QueryError {\n  message: string;\n  private originalError: any; // For debugging in case parseError picks a value that doesn't make sense.\n  constructor(errorMessage: string, originalError?: any) {\n    this.message = errorMessage;\n    this.originalError = originalError;\n  }\n\n  getOriginalError() {\n    return this.originalError;\n  }\n}\n\nexport type GenericChildrenProps<T> = {\n  /**\n   * Error, if not null.\n   */\n  error: null | QueryError;\n  /**\n   * Loading state of this query.\n   */\n  isLoading: boolean;\n  /**\n   * Pagelinks, if applicable. Can be provided to the Pagination component.\n   */\n  pageLinks: null | string;\n  /**\n   * Data / result.\n   */\n  tableData: T | null;\n};\n\ntype OptionalContextProps = {\n  eventView?: EventView | ImmutableEventView;\n  orgSlug?: string;\n};\n\ntype BaseDiscoverQueryProps = {\n  api: Client;\n  /**\n   * Used as the default source for cursor values.\n   */\n  location: Location;\n  /**\n   * Explicit cursor value if you aren't using `location.query.cursor` because there are\n   * multiple paginated results on the page.\n   */\n  cursor?: string;\n  /**\n   * Appends a raw string to query to be able to sidestep the tokenizer.\n   * @deprecated\n   */\n  forceAppendRawQueryString?: string;\n  /**\n   * Record limit to get.\n   */\n  limit?: number;\n  /**\n   * Include this whenever pagination won't be used. Limit can still be used when this is\n   * passed, but cursor will be ignored.\n   */\n  noPagination?: boolean;\n  /**\n   * A container for query batching data and functions.\n   */\n  queryBatching?: QueryBatching;\n  /**\n   * Extra query parameters to be added.\n   */\n  queryExtras?: Record<string, string>;\n  /**\n   * Sets referrer parameter in the API Payload. Set of allowed referrers are defined\n   * on the OrganizationEventsV2Endpoint view.\n   */\n  referrer?: string;\n  /**\n   * A callback to set an error so that the error can be rendered in parent components\n   */\n  setError?: (errObject: QueryError | undefined) => void;\n};\n\nexport type DiscoverQueryPropsWithContext = BaseDiscoverQueryProps & OptionalContextProps;\nexport type DiscoverQueryProps = BaseDiscoverQueryProps & {\n  eventView: EventView | ImmutableEventView;\n  orgSlug: string;\n};\n\ntype InnerRequestProps<P> = DiscoverQueryProps & P;\ntype OuterRequestProps<P> = DiscoverQueryPropsWithContext & P;\n\nexport type ReactProps<T> = {\n  children?: (props: GenericChildrenProps<T>) => React.ReactNode;\n};\n\ntype ComponentProps<T, P> = {\n  /**\n   * Route to the endpoint\n   */\n  route: string;\n  /**\n   * A hook to modify data into the correct output after data has been received\n   */\n  afterFetch?: (data: any, props?: Props<T, P>) => T;\n  /**\n   * A hook before fetch that can be used to do things like clearing the api\n   */\n  beforeFetch?: (api: Client) => void;\n  /**\n   * A hook for parent orchestrators to pass down data based on query results, unlike afterFetch it is not meant for specializations as it will not modify data.\n   */\n  didFetch?: (data: T) => void;\n  /**\n   * Allows components to modify the payload before it is set.\n   */\n  getRequestPayload?: (props: Props<T, P>) => any;\n  /**\n   * An external hook to parse errors in case there are differences for a specific api.\n   */\n  parseError?: (error: any) => QueryError | null;\n  /**\n   * An external hook in addition to the event view check to check if data should be refetched\n   */\n  shouldRefetchData?: (prevProps: Props<T, P>, props: Props<T, P>) => boolean;\n};\n\ntype Props<T, P> = InnerRequestProps<P> & ReactProps<T> & ComponentProps<T, P>;\ntype OuterProps<T, P> = OuterRequestProps<P> & ReactProps<T> & ComponentProps<T, P>;\n\ntype State<T> = {\n  tableFetchID: symbol | undefined;\n} & GenericChildrenProps<T>;\n\n/**\n * Generic component for discover queries\n */\nclass _GenericDiscoverQuery<T, P> extends Component<Props<T, P>, State<T>> {\n  state: State<T> = {\n    isLoading: true,\n    tableFetchID: undefined,\n    error: null,\n\n    tableData: null,\n    pageLinks: null,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: Props<T, P>) {\n    // Reload data if the payload changes\n    const refetchCondition = this._shouldRefetchData(prevProps);\n\n    // or if we've moved from an invalid view state to a valid one,\n    const eventViewValidation =\n      prevProps.eventView.isValid() === false && this.props.eventView.isValid();\n\n    const shouldRefetchExternal = this.props.shouldRefetchData\n      ? this.props.shouldRefetchData(prevProps, this.props)\n      : false;\n\n    if (refetchCondition || eventViewValidation || shouldRefetchExternal) {\n      this.fetchData();\n    }\n  }\n\n  getPayload(props: Props<T, P>) {\n    const {cursor, limit, noPagination, referrer} = props;\n    const payload = this.props.getRequestPayload\n      ? this.props.getRequestPayload(props)\n      : props.eventView.getEventsAPIPayload(\n          props.location,\n          props.forceAppendRawQueryString\n        );\n\n    if (cursor) {\n      payload.cursor = cursor;\n    }\n    if (limit) {\n      payload.per_page = limit;\n    }\n    if (noPagination) {\n      payload.noPagination = noPagination;\n    }\n    if (referrer) {\n      payload.referrer = referrer;\n    }\n\n    Object.assign(payload, props.queryExtras ?? {});\n\n    return payload;\n  }\n\n  _shouldRefetchData = (prevProps: Props<T, P>): boolean => {\n    const thisAPIPayload = this.getPayload(this.props);\n    const otherAPIPayload = this.getPayload(prevProps);\n\n    return (\n      !isAPIPayloadSimilar(thisAPIPayload, otherAPIPayload) ||\n      prevProps.limit !== this.props.limit ||\n      prevProps.route !== this.props.route ||\n      prevProps.cursor !== this.props.cursor\n    );\n  };\n\n  /**\n   * The error type isn't consistent across APIs. We see detail as just string some times, other times as an object.\n   */\n  _parseError = (error: any): QueryError | null => {\n    if (this.props.parseError) {\n      return this.props.parseError(error);\n    }\n\n    if (!error) {\n      return null;\n    }\n\n    const detail = error.responseJSON?.detail;\n    if (typeof detail === 'string') {\n      return new QueryError(detail, error);\n    }\n\n    const message = detail?.message;\n    if (typeof message === 'string') {\n      return new QueryError(message, error);\n    }\n\n    const unknownError = new QueryError(t('An unknown error occurred.'), error);\n    return unknownError;\n  };\n\n  fetchData = async () => {\n    const {\n      api,\n      queryBatching,\n      beforeFetch,\n      afterFetch,\n      didFetch,\n      eventView,\n      orgSlug,\n      route,\n      setError,\n    } = this.props;\n\n    if (!eventView.isValid()) {\n      return;\n    }\n\n    const url = `/organizations/${orgSlug}/${route}/`;\n    const tableFetchID = Symbol(`tableFetchID`);\n    const apiPayload: Partial<EventQuery & LocationQuery> = this.getPayload(this.props);\n\n    this.setState({isLoading: true, tableFetchID});\n\n    setError?.(undefined);\n\n    beforeFetch?.(api);\n\n    // clear any inflight requests since they are now stale\n    api.clear();\n\n    try {\n      const [data, , resp] = await doDiscoverQuery<T>(\n        api,\n        url,\n        apiPayload,\n        queryBatching\n      );\n\n      if (this.state.tableFetchID !== tableFetchID) {\n        // invariant: a different request was initiated after this request\n        return;\n      }\n\n      const tableData = afterFetch ? afterFetch(data, this.props) : data;\n      didFetch?.(tableData);\n\n      this.setState(prevState => ({\n        isLoading: false,\n        tableFetchID: undefined,\n        error: null,\n        pageLinks: resp?.getResponseHeader('Link') ?? prevState.pageLinks,\n        tableData,\n      }));\n    } catch (err) {\n      const error = this._parseError(err);\n      this.setState({\n        isLoading: false,\n        tableFetchID: undefined,\n        error,\n        tableData: null,\n      });\n      if (setError) {\n        setError(error ?? undefined);\n      }\n    }\n  };\n\n  render() {\n    const {isLoading, error, tableData, pageLinks} = this.state;\n\n    const childrenProps: GenericChildrenProps<T> = {\n      isLoading,\n      error,\n      tableData,\n      pageLinks,\n    };\n    const children: ReactProps<T>['children'] = this.props.children; // Explicitly setting type due to issues with generics and React's children\n    return children?.(childrenProps);\n  }\n}\n\n// Shim to allow us to use generic discover query or any specialization with or without passing org slug or eventview, which are now contexts.\n// This will help keep tests working and we can remove extra uses of context-provided props and update tests as we go.\nexport function GenericDiscoverQuery<T, P>(props: OuterProps<T, P>) {\n  const organizationSlug = useContext(OrganizationContext)?.slug;\n  const performanceEventView = useContext(PerformanceEventViewContext)?.eventView;\n\n  const orgSlug = props.orgSlug ?? organizationSlug;\n  const eventView = props.eventView ?? performanceEventView;\n\n  if (orgSlug === undefined || eventView === undefined) {\n    throw new Error('GenericDiscoverQuery requires both an orgSlug and eventView');\n  }\n\n  const _props: Props<T, P> = {\n    ...props,\n    orgSlug,\n    eventView,\n  };\n  return <_GenericDiscoverQuery<T, P> {..._props} />;\n}\n\nexport type DiscoverQueryRequestParams = Partial<EventQuery & LocationQuery>;\n\nexport function doDiscoverQuery<T>(\n  api: Client,\n  url: string,\n  params: DiscoverQueryRequestParams,\n  queryBatching?: QueryBatching\n): Promise<[T, string | undefined, ResponseMeta<T> | undefined]> {\n  if (queryBatching?.batchRequest) {\n    return queryBatching.batchRequest(api, url, {\n      query: params,\n      includeAllArgs: true,\n    });\n  }\n\n  return api.requestPromise(url, {\n    method: 'GET',\n    includeAllArgs: true,\n    query: {\n      // marking params as any so as to not cause typescript errors\n      ...(params as any),\n    },\n  });\n}\n\nexport default GenericDiscoverQuery;\n","import EventView, {ImmutableEventView} from 'sentry/utils/discover/eventView';\n\nimport {createDefinedContext} from './utils';\n\ntype usePerformanceEventViewContext = {\n  eventView: EventView;\n};\n\nconst [\n  PerformanceEventViewProvider,\n  _usePerformanceEventView,\n  PerformanceEventViewContext,\n] = createDefinedContext<usePerformanceEventViewContext>({\n  name: 'PerformanceEventViewContext',\n});\n\nexport {PerformanceEventViewProvider, PerformanceEventViewContext};\n\n// Provides a readonly event view. Also omits anything that isn't currently read-only, although in the future we should switch the code in EventView instead.\n// If you need mutability, use the mutable version.\nexport function usePerformanceEventView(): ImmutableEventView {\n  return _usePerformanceEventView().eventView;\n}\n\nexport function useMutablePerformanceEventView() {\n  return usePerformanceEventView().clone();\n}\n","import {createContext, useContext} from 'react';\n\ntype CreateContextReturn<T> = [React.Provider<T>, () => T, React.Context<T>];\n/*\n * Creates provider, context and useContext hook, guarding against calling useContext without a provider.\n * [0]: https://github.com/chakra-ui/chakra-ui/blob/c0f9c287df0397e2aa9bd90eb3d5c2f2c08aa0b1/packages/utils/src/react-helpers.ts#L27\n *\n * Renamed to createDefinedContext to not conflate with React context.\n */\nexport function createDefinedContext<ContextType>(options: {\n  name: string;\n  errorMessage?: string;\n  strict?: boolean;\n}) {\n  const {\n    strict = true,\n    errorMessage = `useContext for \"${options.name}\" must be inside a Provider with a value`,\n    name,\n  } = options;\n\n  const Context = createContext<ContextType | undefined>(undefined);\n\n  Context.displayName = name;\n\n  function useDefinedContext() {\n    const context = useContext(Context);\n    if (!context && strict) {\n      throw new Error(errorMessage);\n    }\n    return context;\n  }\n\n  return [\n    Context.Provider,\n    useDefinedContext,\n    Context,\n  ] as CreateContextReturn<ContextType>;\n}\n","import {Location, Query} from 'history';\n\nimport {useRouteContext} from 'sentry/utils/useRouteContext';\n\ntype DefaultQuery<T = string> = {\n  [key: string]: T | T[] | null | undefined;\n};\n\nexport function useLocation<Q extends Query = DefaultQuery>(): Location<Q> {\n  const route = useRouteContext();\n  return route.location;\n}\n","import {useRouteContext} from 'sentry/utils/useRouteContext';\n\nexport function useParams() {\n  const route = useRouteContext();\n  return route.params;\n}\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport Link from 'sentry/components/links/link';\nimport Pagination from 'sentry/components/pagination';\nimport {PanelTable} from 'sentry/components/panels';\nimport {IconArrow} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {PageContent} from 'sentry/styles/organization';\nimport {Group, NewQuery} from 'sentry/types';\nimport DiscoverQuery from 'sentry/utils/discover/discoverQuery';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {getQueryParamAsString} from 'sentry/utils/replays/getQueryParamAsString';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport {useParams} from 'sentry/utils/useParams';\nimport ReplayTable from 'sentry/views/replays/replayTable';\nimport {ReplayDiscoveryListItem} from 'sentry/views/replays/types';\n\nconst DEFAULT_DISCOVER_LIMIT = 50;\n\ntype Props = {\n  group: Group;\n};\n\nconst GroupReplays = ({group}: Props) => {\n  const location = useLocation();\n  const organization = useOrganization();\n  const params = useParams();\n  const {project} = group;\n\n  const getEventView = () => {\n    const {groupId} = params;\n    const eventQueryParams: NewQuery = {\n      id: '',\n      name: '',\n      version: 2,\n      fields: [\n        'replayId',\n        'eventID',\n        'project',\n        'timestamp',\n        'url',\n        'user.display',\n        'user.email',\n        'user.id',\n        'user.ip_address',\n        'user.name',\n        'user.username',\n      ],\n      projects: [+project.id],\n      orderby: getQueryParamAsString(query.sort) || '-timestamp',\n      query: `issue.id:${groupId} has:replayId`,\n    };\n\n    return EventView.fromNewQueryWithLocation(eventQueryParams, location);\n  };\n\n  const {query} = location;\n  const {cursor: _cursor, page: _page, ...currentQuery} = query;\n\n  const sort: {\n    field: string;\n  } = {\n    field: getQueryParamAsString(query.sort) || '-timestamp',\n  };\n\n  const arrowDirection = sort.field.startsWith('-') ? 'down' : 'up';\n  const sortArrow = <IconArrow color=\"gray300\" size=\"xs\" direction={arrowDirection} />;\n\n  return (\n    <Fragment>\n      <StyledPageContent>\n        <DiscoverQuery\n          eventView={getEventView()}\n          location={location}\n          orgSlug={organization.slug}\n          limit={DEFAULT_DISCOVER_LIMIT}\n        >\n          {data => {\n            return (\n              <Fragment>\n                <StyledPanelTable\n                  isLoading={data.isLoading}\n                  isEmpty={data.tableData?.data.length === 0}\n                  headers={[\n                    t('Session'),\n                    <SortLink\n                      key=\"timestamp\"\n                      role=\"columnheader\"\n                      aria-sort={\n                        !sort.field.endsWith('timestamp')\n                          ? 'none'\n                          : sort.field === '-timestamp'\n                          ? 'descending'\n                          : 'ascending'\n                      }\n                      to={{\n                        pathname: location.pathname,\n                        query: {\n                          ...currentQuery,\n                          sort: sort.field === '-timestamp' ? 'timestamp' : '-timestamp',\n                        },\n                      }}\n                    >\n                      {t('Timestamp')} {sort.field.endsWith('timestamp') && sortArrow}\n                    </SortLink>,\n                    t('Duration'),\n                    t('Errors'),\n                    t('Interest'),\n                  ]}\n                >\n                  {data.tableData ? (\n                    <ReplayTable\n                      idKey=\"replayId\"\n                      replayList={data.tableData.data as ReplayDiscoveryListItem[]}\n                    />\n                  ) : null}\n                </StyledPanelTable>\n                <Pagination pageLinks={data.pageLinks} />\n              </Fragment>\n            );\n          }}\n        </DiscoverQuery>\n      </StyledPageContent>\n    </Fragment>\n  );\n};\n\nconst StyledPanelTable = styled(PanelTable)`\n  grid-template-columns: minmax(0, 1fr) max-content max-content max-content max-content;\n`;\n\nconst StyledPageContent = styled(PageContent)`\n  box-shadow: 0px 0px 1px ${p => p.theme.gray200};\n  background-color: ${p => p.theme.background};\n`;\n\nconst SortLink = styled(Link)`\n  color: inherit;\n\n  :hover {\n    color: inherit;\n  }\n\n  svg {\n    vertical-align: top;\n  }\n`;\n\nexport default GroupReplays;\n","import Feature from 'sentry/components/acl/feature';\nimport Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {PageContent} from 'sentry/styles/organization';\nimport {Group} from 'sentry/types';\nimport useOrganization from 'sentry/utils/useOrganization';\n\nimport GroupReplays from './groupReplays';\n\ntype Props = {\n  group: Group;\n};\n\nconst GroupReplaysContainer = ({group}: Props) => {\n  const organization = useOrganization();\n  function renderNoAccess() {\n    return (\n      <PageContent>\n        <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n      </PageContent>\n    );\n  }\n\n  return (\n    <Feature\n      features={['session-replay']}\n      organization={organization}\n      renderDisabled={renderNoAccess}\n    >\n      <GroupReplays group={group} />\n    </Feature>\n  );\n};\n\nexport default GroupReplaysContainer;\n"],"names":["QueryError","constructor","errorMessage","originalError","this","message","getOriginalError","_GenericDiscoverQuery","Component","isLoading","tableFetchID","undefined","error","tableData","pageLinks","prevProps","thisAPIPayload","getPayload","props","otherAPIPayload","isAPIPayloadSimilar","limit","route","cursor","parseError","detail","responseJSON","t","async","api","queryBatching","beforeFetch","afterFetch","didFetch","eventView","orgSlug","setError","isValid","url","Symbol","apiPayload","setState","clear","data","resp","doDiscoverQuery","state","prevState","getResponseHeader","err","_parseError","componentDidMount","fetchData","componentDidUpdate","refetchCondition","_shouldRefetchData","eventViewValidation","shouldRefetchExternal","shouldRefetchData","noPagination","referrer","payload","getRequestPayload","getEventsAPIPayload","location","forceAppendRawQueryString","per_page","Object","assign","queryExtras","render","childrenProps","children","GenericDiscoverQuery","organizationSlug","useContext","OrganizationContext","slug","performanceEventView","PerformanceEventViewContext","Error","_props","params","batchRequest","query","includeAllArgs","requestPromise","method","PerformanceEventViewProvider","_usePerformanceEventView","createDefinedContext","name","options","strict","Context","createContext","displayName","Provider","context","useLocation","useRouteContext","useParams","GroupReplays","group","organization","useOrganization","project","_cursor","page","_page","currentQuery","sort","field","getQueryParamAsString","arrowDirection","startsWith","sortArrow","color","size","direction","Fragment","StyledPageContent","groupId","eventQueryParams","id","version","fields","projects","orderby","EventView","getEventView","StyledPanelTable","isEmpty","length","headers","SortLink","role","endsWith","to","pathname","idKey","replayList","PanelTable","PageContent","p","theme","gray200","background","Link","GroupReplaysContainer","features","renderDisabled","type"],"sourceRoot":""}