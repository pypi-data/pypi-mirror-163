{"version":3,"file":"chunks/app_views_settings_projectPlugins_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actionCreators/plugins.tsx","webpack:///./app/actions/pluginActions.tsx","webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/stores/pluginsStore.tsx","webpack:///./app/utils/withPlugins.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx","webpack:///./app/views/settings/projectPlugins/projectPluginRow.tsx","webpack:///./app/views/settings/projectPlugins/projectPlugins.tsx","webpack:///./app/views/settings/projectPlugins/index.tsx"],"sourcesContent":["import {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport PluginActions from 'sentry/actions/pluginActions';\nimport {Client, RequestOptions} from 'sentry/api';\nimport {t} from 'sentry/locale';\nimport {Plugin} from 'sentry/types';\n\nconst activeFetch = {};\n// PluginsStore always exists, so api client should be independent of component lifecycle\nconst api = new Client();\n\ntype Slugs = {\n  /**\n   * Organization slug\n   */\n  orgId: string;\n\n  /**\n   * Plugin slug\n   */\n  pluginId: string;\n\n  /**\n   * Project slug\n   */\n  projectId: string;\n};\n\ntype DoUpdateParams = Slugs & {\n  update: Partial<Plugin>;\n} & Partial<RequestOptions>;\n\nfunction doUpdate({orgId, projectId, pluginId, update, ...params}: DoUpdateParams) {\n  PluginActions.update(pluginId, update);\n  const request = api.requestPromise(\n    `/projects/${orgId}/${projectId}/plugins/${pluginId}/`,\n    {\n      ...params,\n    }\n  );\n\n  // This is intentionally not chained because we want the unhandled promise to be returned\n  request\n    .then(() => {\n      PluginActions.updateSuccess(pluginId, update);\n    })\n    .catch(resp => {\n      const err =\n        resp && resp.responseJSON && typeof resp.responseJSON.detail === 'string'\n          ? new Error(resp.responseJSON.detail)\n          : new Error('Unable to update plugin');\n      PluginActions.updateError(pluginId, update, err);\n    });\n\n  return request;\n}\n\ntype FetchPluginsOptions = {\n  /**\n   * Reset will set loading state = true\n   */\n  resetLoading?: boolean;\n};\n\n/**\n * Fetches list of available plugins for a project\n */\nexport function fetchPlugins(\n  {orgId, projectId}: Pick<Slugs, 'orgId' | 'projectId'>,\n  options?: FetchPluginsOptions\n): Promise<Plugin[]> {\n  const path = `/projects/${orgId}/${projectId}/plugins/`;\n\n  // Make sure we throttle fetches\n  if (activeFetch[path]) {\n    return activeFetch[path];\n  }\n\n  PluginActions.fetchAll(options);\n  const request = api.requestPromise(path, {\n    method: 'GET',\n    includeAllArgs: true,\n  });\n\n  activeFetch[path] = request;\n\n  // This is intentionally not chained because we want the unhandled promise to be returned\n  request\n    .then(([data, _, resp]) => {\n      PluginActions.fetchAllSuccess(data, {pageLinks: resp?.getResponseHeader('Link')});\n\n      return data;\n    })\n    .catch(err => {\n      PluginActions.fetchAllError(err);\n      throw new Error('Unable to fetch plugins');\n    })\n    .then(() => (activeFetch[path] = null));\n\n  return request;\n}\n\ntype EnableDisablePluginParams = Slugs;\n\n/**\n * Enables a plugin\n */\nexport function enablePlugin(params: EnableDisablePluginParams) {\n  addLoadingMessage(t('Enabling...'));\n  return doUpdate({...params, update: {enabled: true}, method: 'POST'})\n    .then(() => addSuccessMessage(t('Plugin was enabled')))\n    .catch(() => addErrorMessage(t('Unable to enable plugin')));\n}\n\n/**\n * Disables a plugin\n */\nexport function disablePlugin(params: EnableDisablePluginParams) {\n  addLoadingMessage(t('Disabling...'));\n  return doUpdate({...params, update: {enabled: false}, method: 'DELETE'})\n    .then(() => addSuccessMessage(t('Plugin was disabled')))\n    .catch(() => addErrorMessage(t('Unable to disable plugin')));\n}\n","import {createActions} from 'reflux';\n\nconst PluginActions = createActions([\n  'update',\n  'updateError',\n  'updateSuccess',\n  'fetchAll',\n  'fetchAllSuccess',\n  'fetchAllError',\n]);\n\nexport default PluginActions;\n","import {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'sentry/utils/replaceRouterParams';\nimport {RouteWithName} from 'sentry/views/settings/components/settingsBreadcrumb/types';\n\ntype Options = {\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  routes: RouteWithName[];\n\n  location?: Location;\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(\n  to: string | RouteWithName,\n  options: Options\n): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","import {createStore, StoreDefinition} from 'reflux';\n\nimport PluginActions from 'sentry/actions/pluginActions';\nimport {Plugin} from 'sentry/types';\nimport {makeSafeRefluxStore} from 'sentry/utils/makeSafeRefluxStore';\n\ninterface PluginStoreDefinition extends StoreDefinition {\n  plugins: Map<string, Plugin> | null;\n  state: {\n    error: Error | null;\n    loading: boolean;\n    pageLinks: string | null;\n    plugins: Plugin[];\n  };\n  updating: Map<string, Plugin>;\n}\n\nconst defaultState = {\n  loading: true,\n  plugins: [],\n  error: null,\n  pageLinks: null,\n};\n\nconst storeConfig: PluginStoreDefinition = {\n  plugins: null,\n  state: {...defaultState},\n  updating: new Map(),\n  unsubscribeListeners: [],\n\n  reset() {\n    // reset our state\n    this.plugins = null;\n    this.state = {...defaultState};\n    this.updating = new Map();\n    return this.state;\n  },\n\n  getInitialState() {\n    return this.getState();\n  },\n\n  getState() {\n    const {plugins: _plugins, ...state} = this.state;\n\n    return {\n      ...state,\n      plugins: this.plugins ? Array.from(this.plugins.values()) : [],\n    };\n  },\n\n  init() {\n    this.reset();\n    this.unsubscribeListeners.push(\n      this.listenTo(PluginActions.fetchAll, this.onFetchAll)\n    );\n    this.unsubscribeListeners.push(\n      this.listenTo(PluginActions.fetchAllSuccess, this.onFetchAllSuccess)\n    );\n    this.unsubscribeListeners.push(\n      this.listenTo(PluginActions.fetchAllError, this.onFetchAllError)\n    );\n    this.unsubscribeListeners.push(this.listenTo(PluginActions.update, this.onUpdate));\n    this.unsubscribeListeners.push(\n      this.listenTo(PluginActions.updateSuccess, this.onUpdateSuccess)\n    );\n    this.unsubscribeListeners.push(\n      this.listenTo(PluginActions.updateError, this.onUpdateError)\n    );\n  },\n\n  triggerState() {\n    this.trigger(this.getState());\n  },\n\n  onFetchAll({resetLoading}: {resetLoading?: boolean} = {}) {\n    if (resetLoading) {\n      this.state.loading = true;\n      this.state.error = null;\n      this.plugins = null;\n    }\n\n    this.triggerState();\n  },\n\n  onFetchAllSuccess(data: Plugin[], {pageLinks}: {pageLinks?: string}) {\n    this.plugins = new Map(data.map(plugin => [plugin.id, plugin]));\n    this.state.pageLinks = pageLinks || null;\n    this.state.loading = false;\n    this.triggerState();\n  },\n\n  onFetchAllError(err) {\n    this.plugins = null;\n    this.state.loading = false;\n    this.state.error = err;\n    this.triggerState();\n  },\n\n  onUpdate(id: string, updateObj: Partial<Plugin>) {\n    if (!this.plugins) {\n      return;\n    }\n\n    const plugin = this.plugins.get(id);\n    if (!plugin) {\n      return;\n    }\n    const newPlugin = {\n      ...plugin,\n      ...updateObj,\n    };\n\n    this.plugins.set(id, newPlugin);\n    this.updating.set(id, plugin);\n    this.triggerState();\n  },\n\n  onUpdateSuccess(id: string, _updateObj: Partial<Plugin>) {\n    this.updating.delete(id);\n  },\n\n  onUpdateError(id: string, _updateObj: Partial<Plugin>, err) {\n    const origPlugin = this.updating.get(id);\n    if (!origPlugin || !this.plugins) {\n      return;\n    }\n\n    this.plugins.set(id, origPlugin);\n    this.updating.delete(id);\n    this.state.error = err;\n    this.triggerState();\n  },\n};\n\nconst PluginStore = createStore(makeSafeRefluxStore(storeConfig));\nexport default PluginStore;\n","import {Component} from 'react';\n\nimport {fetchPlugins} from 'sentry/actionCreators/plugins';\nimport PluginsStore from 'sentry/stores/pluginsStore';\nimport {Organization, Plugin, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport getDisplayName from 'sentry/utils/getDisplayName';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withProject from 'sentry/utils/withProject';\n\ntype WithPluginProps = {\n  organization: Organization;\n  project?: Project;\n};\n\ntype State = {\n  loading: boolean;\n  plugins: Plugin[];\n};\n\n/**\n * Higher order component that fetches list of plugins and\n * passes PluginsStore to component as `plugins`\n */\nfunction withPlugins<P extends WithPluginProps>(\n  WrappedComponent: React.ComponentType<P>\n) {\n  class WithPlugins extends Component<Omit<P, keyof 'plugins'> & WithPluginProps, State> {\n    static displayName = `withPlugins(${getDisplayName(WrappedComponent)})`;\n    state = {plugins: [], loading: true};\n\n    componentDidMount() {\n      this.fetchPlugins();\n    }\n\n    componentDidUpdate(prevProps, _prevState, prevContext) {\n      const {organization, project} = this.props;\n\n      // Only fetch plugins when a org slug or project slug has changed\n      const prevOrg = prevProps.organization || prevContext?.organization;\n      const prevProject = prevProps.project || prevContext?.project;\n\n      // If previous org/project is undefined then it means:\n      // the HoC has mounted, `fetchPlugins` has been called (via cDM), and\n      // store was updated. We don't need to fetchPlugins again (or it will cause an infinite loop)\n      //\n      // This is for the unusual case where component is mounted and receives a new org/project prop\n      // e.g. when switching projects via breadcrumbs in settings.\n      if (!defined(prevProject) || !defined(prevOrg)) {\n        return;\n      }\n\n      const isOrgSame = prevOrg.slug === organization.slug;\n      const isProjectSame = prevProject.slug === project?.slug;\n\n      // Don't do anything if org and project are the same\n      if (isOrgSame && isProjectSame) {\n        return;\n      }\n\n      this.fetchPlugins();\n    }\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    unsubscribe = PluginsStore.listen(({plugins, loading}: State) => {\n      // State is destructured as store updates contain additional keys\n      // that are not exposed by this HoC\n      this.setState({plugins, loading});\n    }, undefined);\n\n    fetchPlugins() {\n      const {organization, project} = this.props;\n\n      if (!project || !organization) {\n        return;\n      }\n\n      fetchPlugins({projectId: project.slug, orgId: organization.slug});\n    }\n\n    render() {\n      return (\n        <WrappedComponent {...(this.props as P & WithPluginProps)} plugins={this.state} />\n      );\n    }\n  }\n  return withOrganization(withProject(WithPlugins));\n}\n\nexport default withPlugins;\n","import Access from 'sentry/components/acl/access';\nimport Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'>;\n\nconst PermissionAlert = ({access = ['project:write'], ...props}: Props) => (\n  <Access access={access}>\n    {({hasAccess}) =>\n      !hasAccess && (\n        <Alert type=\"warning\" {...props}>\n          {t(\n            'These settings can only be edited by users with the organization owner, manager, or admin role.'\n          )}\n        </Alert>\n      )\n    }\n  </Access>\n);\n\nexport default PermissionAlert;\n","import {PureComponent} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport Access from 'sentry/components/acl/access';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport Link from 'sentry/components/links/link';\nimport Switch from 'sentry/components/switchButton';\nimport {t} from 'sentry/locale';\nimport PluginIcon from 'sentry/plugins/components/pluginIcon';\nimport {Organization, Plugin, Project} from 'sentry/types';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport {trackIntegrationAnalytics} from 'sentry/utils/integrationUtil';\nimport recreateRoute from 'sentry/utils/recreateRoute';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nconst grayText = css`\n  color: #979ba0;\n`;\n\ntype Props = {\n  onChange: (id: string, enabled: boolean) => void;\n  organization: Organization;\n  project: Project;\n} & Plugin &\n  Pick<RouteComponentProps<{}, {}>, 'params' | 'routes'>;\n\nclass ProjectPluginRow extends PureComponent<Props> {\n  handleChange = () => {\n    const {onChange, id, enabled} = this.props;\n    onChange(id, !enabled);\n    const eventKey = !enabled ? 'integrations.enabled' : 'integrations.disabled';\n    trackIntegrationAnalytics(eventKey, {\n      integration: id,\n      integration_type: 'plugin',\n      view: 'legacy_integrations',\n      organization: this.props.organization,\n    });\n  };\n\n  render() {\n    const {id, name, slug, version, author, hasConfiguration, enabled, canDisable} =\n      this.props;\n\n    const configureUrl = recreateRoute(id, this.props);\n    return (\n      <Access access={['project:write']}>\n        {({hasAccess}) => {\n          const LinkOrSpan = hasAccess ? Link : 'span';\n\n          return (\n            <PluginItem key={id} className={slug}>\n              <PluginInfo>\n                <StyledPluginIcon size={48} pluginId={id} />\n                <PluginDescription>\n                  <PluginName>\n                    {`${name} `}\n                    {getDynamicText({\n                      value: (\n                        <Version>{version ? `v${version}` : <em>{t('n/a')}</em>}</Version>\n                      ),\n                      fixed: <Version>v10</Version>,\n                    })}\n                  </PluginName>\n                  <div>\n                    {author && (\n                      <ExternalLink css={grayText} href={author.url}>\n                        {author.name}\n                      </ExternalLink>\n                    )}\n                    {hasConfiguration && (\n                      <span>\n                        {' '}\n                        &middot;{' '}\n                        <LinkOrSpan css={grayText} to={configureUrl}>\n                          {t('Configure plugin')}\n                        </LinkOrSpan>\n                      </span>\n                    )}\n                  </div>\n                </PluginDescription>\n              </PluginInfo>\n              <Switch\n                size=\"lg\"\n                isDisabled={!hasAccess || !canDisable}\n                isActive={enabled}\n                toggle={this.handleChange}\n              />\n            </PluginItem>\n          );\n        }}\n      </Access>\n    );\n  }\n}\n\nexport default withOrganization(ProjectPluginRow);\n\nconst PluginItem = styled('div')`\n  display: flex;\n  flex: 1;\n  align-items: center;\n`;\n\nconst PluginDescription = styled('div')`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n`;\n\nconst PluginInfo = styled('div')`\n  display: flex;\n  flex: 1;\n  line-height: 24px;\n`;\n\nconst PluginName = styled('div')`\n  font-size: 16px;\n`;\n\nconst StyledPluginIcon = styled(PluginIcon)`\n  margin-right: 16px;\n`;\n\n// Keeping these colors the same from old integrations page\nconst Version = styled('span')`\n  color: #babec2;\n`;\n","import {Component} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport Access from 'sentry/components/acl/access';\nimport Link from 'sentry/components/links/link';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {\n  Panel,\n  PanelAlert,\n  PanelBody,\n  PanelHeader,\n  PanelItem,\n} from 'sentry/components/panels';\nimport {t, tct} from 'sentry/locale';\nimport {Plugin, Project} from 'sentry/types';\nimport RouteError from 'sentry/views/routeError';\n\nimport ProjectPluginRow from './projectPluginRow';\n\ntype Props = {\n  error: React.ComponentProps<typeof RouteError>['error'];\n  loading: boolean;\n  onChange: React.ComponentProps<typeof ProjectPluginRow>['onChange'];\n  plugins: Plugin[];\n  project: Project;\n} & RouteComponentProps<{orgId: string}, {}>;\n\nclass ProjectPlugins extends Component<Props> {\n  render() {\n    const {plugins, loading, error, onChange, routes, params, project} = this.props;\n    const {orgId} = this.props.params;\n    const hasError = error;\n    const isLoading = !hasError && loading;\n\n    if (hasError) {\n      return <RouteError error={error} />;\n    }\n\n    if (isLoading) {\n      return <LoadingIndicator />;\n    }\n\n    return (\n      <Panel>\n        <PanelHeader>\n          <div>{t('Legacy Integration')}</div>\n          <div>{t('Enabled')}</div>\n        </PanelHeader>\n        <PanelBody>\n          <PanelAlert type=\"warning\">\n            <Access access={['org:integrations']}>\n              {({hasAccess}) =>\n                hasAccess\n                  ? tct(\n                      \"Legacy Integrations must be configured per-project. It's recommended to prefer organization integrations over the legacy project integrations when available. Visit the [link:organization integrations] settings to manage them.\",\n                      {\n                        link: <Link to={`/settings/${orgId}/integrations`} />,\n                      }\n                    )\n                  : t(\n                      \"Legacy Integrations must be configured per-project. It's recommended to prefer organization integrations over the legacy project integrations when available.\"\n                    )\n              }\n            </Access>\n          </PanelAlert>\n\n          {plugins\n            .filter(p => {\n              return !p.isHidden;\n            })\n            .map(plugin => (\n              <PanelItem key={plugin.id}>\n                <ProjectPluginRow\n                  params={params}\n                  routes={routes}\n                  project={project}\n                  {...plugin}\n                  onChange={onChange}\n                />\n              </PanelItem>\n            ))}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n\nexport default ProjectPlugins;\n","import {Component, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {disablePlugin, enablePlugin, fetchPlugins} from 'sentry/actionCreators/plugins';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport {Organization, Plugin, Project} from 'sentry/types';\nimport {trackIntegrationAnalytics} from 'sentry/utils/integrationUtil';\nimport withPlugins from 'sentry/utils/withPlugins';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport PermissionAlert from 'sentry/views/settings/project/permissionAlert';\n\nimport ProjectPlugins from './projectPlugins';\n\ntype Props = RouteComponentProps<{orgId: string; projectId: string}, {}> & {\n  organization: Organization;\n  plugins: {\n    error: React.ComponentProps<typeof ProjectPlugins>['error'];\n    loading: boolean;\n    plugins: Plugin[];\n  };\n  project: Project;\n};\n\nclass ProjectPluginsContainer extends Component<Props> {\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  fetchData = async () => {\n    const plugins = await fetchPlugins(this.props.params);\n    const installCount = plugins.filter(\n      plugin => plugin.hasConfiguration && plugin.enabled\n    ).length;\n    trackIntegrationAnalytics(\n      'integrations.index_viewed',\n      {\n        integrations_installed: installCount,\n        view: 'legacy_integrations',\n        organization: this.props.organization,\n      },\n      {startSession: true}\n    );\n  };\n\n  handleChange = (pluginId: string, shouldEnable: boolean) => {\n    const {projectId, orgId} = this.props.params;\n    const actionCreator = shouldEnable ? enablePlugin : disablePlugin;\n    actionCreator({projectId, orgId, pluginId});\n  };\n\n  render() {\n    const {loading, error, plugins} = this.props.plugins || {};\n    const {orgId} = this.props.params;\n\n    const title = t('Legacy Integrations');\n\n    return (\n      <Fragment>\n        <SentryDocumentTitle title={title} orgSlug={orgId} />\n        <SettingsPageHeader title={title} />\n        <PermissionAlert />\n\n        <ProjectPlugins\n          {...this.props}\n          onChange={this.handleChange}\n          loading={loading}\n          error={error}\n          plugins={plugins}\n        />\n      </Fragment>\n    );\n  }\n}\n\nexport default withPlugins(ProjectPluginsContainer);\n"],"names":["activeFetch","api","Client","doUpdate","orgId","projectId","pluginId","update","params","PluginActions","request","requestPromise","then","catch","resp","err","responseJSON","detail","Error","fetchPlugins","options","path","method","includeAllArgs","data","_","pageLinks","getResponseHeader","enablePlugin","addLoadingMessage","t","enabled","addSuccessMessage","addErrorMessage","disablePlugin","createActions","recreateRoute","to","routes","location","stepBack","paths","map","lastRootIndex","routeIndex","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","defaultState","loading","plugins","error","storeConfig","state","updating","Map","unsubscribeListeners","reset","this","getInitialState","getState","_plugins","Array","from","values","init","push","listenTo","onFetchAll","onFetchAllSuccess","onFetchAllError","onUpdate","onUpdateSuccess","onUpdateError","triggerState","trigger","resetLoading","plugin","id","updateObj","get","newPlugin","set","_updateObj","delete","origPlugin","createStore","makeSafeRefluxStore","WrappedComponent","WithPlugins","Component","PluginsStore","setState","undefined","componentDidMount","componentDidUpdate","prevProps","_prevState","prevContext","organization","project","props","prevOrg","prevProject","defined","isOrgSame","slug","isProjectSame","componentWillUnmount","unsubscribe","render","getDisplayName","withOrganization","withProject","PermissionAlert","access","hasAccess","type","grayText","ProjectPluginRow","PureComponent","onChange","eventKey","trackIntegrationAnalytics","integration","integration_type","view","name","version","author","hasConfiguration","canDisable","configureUrl","LinkOrSpan","Link","PluginItem","className","PluginInfo","StyledPluginIcon","size","PluginDescription","PluginName","getDynamicText","value","Version","fixed","css","href","url","isDisabled","isActive","toggle","handleChange","PluginIcon","ProjectPlugins","isLoading","tct","link","filter","p","isHidden","ProjectPluginsContainer","async","installCount","length","integrations_installed","startSession","shouldEnable","fetchData","title","Fragment","orgSlug","withPlugins"],"sourceRoot":""}