{"version":3,"file":"chunks/app_views_settings_project_projectCreateServiceHook_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/forms/controls/multipleCheckbox.tsx","webpack:///./app/views/settings/project/projectCreateServiceHook.tsx","webpack:///./app/views/settings/project/serviceHookSettingsForm.tsx"],"sourcesContent":["import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport {Choices} from 'sentry/types';\nimport {defined} from 'sentry/utils';\n\nconst MultipleCheckboxWrapper = styled('div')`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst Label = styled('label')`\n  font-weight: normal;\n  white-space: nowrap;\n  margin-right: 10px;\n  margin-bottom: 10px;\n  width: 20%;\n`;\n\nconst CheckboxLabel = styled('span')`\n  margin-left: 3px;\n`;\n\ntype SelectedValue = (string | number)[];\n\ntype Props = {\n  choices: Choices;\n  value: (string | number)[];\n  disabled?: boolean;\n  onChange?: (value: SelectedValue, event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nclass MultipleCheckbox extends Component<Props> {\n  onChange = (selectedValue: string | number, e: React.ChangeEvent<HTMLInputElement>) => {\n    const {value, onChange} = this.props;\n    let newValue: SelectedValue = [];\n\n    if (typeof onChange !== 'function') {\n      return;\n    }\n\n    if (e.target.checked) {\n      newValue = value ? [...value, selectedValue] : [value];\n    } else {\n      newValue = value.filter(v => v !== selectedValue);\n    }\n\n    onChange(newValue, e);\n  };\n\n  render() {\n    const {disabled, choices, value} = this.props;\n\n    return (\n      <MultipleCheckboxWrapper>\n        {choices.map(([choiceValue, choiceLabel]) => (\n          <LabelContainer key={choiceValue}>\n            <Label>\n              <input\n                type=\"checkbox\"\n                value={choiceValue}\n                onChange={this.onChange.bind(this, choiceValue)}\n                disabled={disabled}\n                checked={defined(value) && value.indexOf(choiceValue) !== -1}\n              />\n              <CheckboxLabel>{choiceLabel}</CheckboxLabel>\n            </Label>\n          </LabelContainer>\n        ))}\n      </MultipleCheckboxWrapper>\n    );\n  }\n}\n\nexport default MultipleCheckbox;\n\nconst LabelContainer = styled('div')`\n  width: 100%;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    width: 50%;\n  }\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    width: 33.333%;\n  }\n  @media (min-width: ${p => p.theme.breakpoints.large}) {\n    width: 25%;\n  }\n`;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport ServiceHookSettingsForm from 'sentry/views/settings/project/serviceHookSettingsForm';\n\ntype Props = RouteComponentProps<{orgId: string; projectId: string}, {}>;\n\nfunction ProjectCreateServiceHook({params}: Props) {\n  const {orgId, projectId} = params;\n  const title = t('Create Service Hook');\n\n  return (\n    <SentryDocumentTitle title={title}>\n      <Fragment>\n        <SettingsPageHeader title={title} />\n        <ServiceHookSettingsForm\n          orgId={orgId}\n          projectId={projectId}\n          initialData={{events: [], isActive: true}}\n        />\n      </Fragment>\n    </SentryDocumentTitle>\n  );\n}\n\nexport default ProjectCreateServiceHook;\n","import {Component} from 'react';\nimport {browserHistory} from 'react-router';\n\nimport ApiForm from 'sentry/components/forms/apiForm';\nimport BooleanField from 'sentry/components/forms/booleanField';\nimport MultipleCheckbox from 'sentry/components/forms/controls/multipleCheckbox';\nimport FormField from 'sentry/components/forms/formField';\nimport TextField from 'sentry/components/forms/textField';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport {Choices, ServiceHook} from 'sentry/types';\n\nconst EVENT_CHOICES: Choices = ['event.alert', 'event.created'].map(e => [e, e]);\n\ntype Props = {\n  initialData: Partial<ServiceHook> & {isActive: boolean};\n  orgId: string;\n  projectId: string;\n  hookId?: string;\n};\n\nexport default class ServiceHookSettingsForm extends Component<Props> {\n  onSubmitSuccess = () => {\n    const {orgId, projectId} = this.props;\n    browserHistory.push(`/settings/${orgId}/projects/${projectId}/hooks/`);\n  };\n\n  render() {\n    const {initialData, orgId, projectId, hookId} = this.props;\n\n    const endpoint = hookId\n      ? `/projects/${orgId}/${projectId}/hooks/${hookId}/`\n      : `/projects/${orgId}/${projectId}/hooks/`;\n\n    return (\n      <Panel>\n        <ApiForm\n          apiMethod={hookId ? 'PUT' : 'POST'}\n          apiEndpoint={endpoint}\n          initialData={initialData}\n          onSubmitSuccess={this.onSubmitSuccess}\n          footerStyle={{\n            marginTop: 0,\n            paddingRight: 20,\n          }}\n          submitLabel={hookId ? t('Save Changes') : t('Create Hook')}\n        >\n          <PanelHeader>{t('Hook Configuration')}</PanelHeader>\n          <PanelBody>\n            <BooleanField name=\"isActive\" label={t('Active')} />\n            <TextField\n              name=\"url\"\n              label={t('URL')}\n              required\n              help={t('The URL which will receive events.')}\n            />\n            <FormField\n              name=\"events\"\n              label={t('Events')}\n              inline={false}\n              help={t('The event types you wish to subscribe to.')}\n            >\n              {({value, onChange}) => (\n                <MultipleCheckbox\n                  onChange={onChange}\n                  value={value}\n                  choices={EVENT_CHOICES}\n                />\n              )}\n            </FormField>\n          </PanelBody>\n        </ApiForm>\n      </Panel>\n    );\n  }\n}\n"],"names":["MultipleCheckboxWrapper","Label","CheckboxLabel","MultipleCheckbox","Component","selectedValue","e","value","onChange","this","props","newValue","target","checked","filter","v","render","disabled","choices","map","choiceValue","choiceLabel","LabelContainer","type","bind","defined","indexOf","p","theme","breakpoints","small","medium","large","ProjectCreateServiceHook","params","orgId","projectId","title","t","Fragment","initialData","events","isActive","EVENT_CHOICES","ServiceHookSettingsForm","browserHistory","hookId","endpoint","apiMethod","apiEndpoint","onSubmitSuccess","footerStyle","marginTop","paddingRight","submitLabel","name","label","required","help","inline"],"sourceRoot":""}