{"version":3,"file":"chunks/app_components_banner_tsx-app_components_charts_eventsGeoRequest_tsx-app_utils_discover_charts_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/banner.tsx","webpack:///./app/components/charts/eventsGeoRequest.tsx","webpack:///./app/utils/discover/charts.tsx"],"sourcesContent":["import {useState} from 'react';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport {IconClose} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\n\nconst makeKey = (prefix: string) => `${prefix}-banner-dismissed`;\n\nfunction dismissBanner(bannerKey: string) {\n  localStorage.setItem(makeKey(bannerKey), 'true');\n}\n\nfunction useDismissable(bannerKey: string) {\n  const key = makeKey(bannerKey);\n  const [value, setValue] = useState(localStorage.getItem(key));\n\n  const dismiss = () => {\n    setValue('true');\n    dismissBanner(bannerKey);\n  };\n\n  return [value === 'true', dismiss] as const;\n}\n\ntype BannerWrapperProps = {\n  backgroundComponent?: React.ReactNode;\n  backgroundImg?: string;\n};\n\ntype Props = BannerWrapperProps & {\n  className?: string;\n  dismissKey?: string;\n  isDismissable?: boolean;\n  subtitle?: string;\n  title?: string;\n};\n\ntype BannerType = React.FC<Props> & {\n  /**\n   * Helper function to hide banners outside of their usage\n   */\n  dismiss: typeof dismissBanner;\n};\n\nconst Banner: BannerType = ({\n  title,\n  subtitle,\n  isDismissable = true,\n  dismissKey = 'generic-banner',\n  className,\n  backgroundImg,\n  backgroundComponent,\n  children,\n}) => {\n  const [dismissed, dismiss] = useDismissable(dismissKey);\n\n  if (dismissed) {\n    return null;\n  }\n\n  return (\n    <BannerWrapper backgroundImg={backgroundImg} className={className}>\n      {backgroundComponent}\n      {isDismissable ? <CloseButton onClick={dismiss} aria-label={t('Close')} /> : null}\n      <BannerContent>\n        <BannerTitle>{title}</BannerTitle>\n        <BannerSubtitle>{subtitle}</BannerSubtitle>\n        <StyledButtonBar gap={1}>{children}</StyledButtonBar>\n      </BannerContent>\n    </BannerWrapper>\n  );\n};\n\nBanner.dismiss = dismissBanner;\n\nconst BannerWrapper = styled('div')<BannerWrapperProps>`\n  ${p =>\n    p.backgroundImg\n      ? css`\n          background: url(${p.backgroundImg});\n          background-repeat: no-repeat;\n          background-size: cover;\n          background-position: center center;\n        `\n      : css`\n          background-color: ${p.theme.gray500};\n        `}\n  display: flex;\n  overflow: hidden;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  margin-bottom: ${space(2)};\n  box-shadow: ${p => p.theme.dropShadowLight};\n  border-radius: ${p => p.theme.borderRadius};\n  height: 180px;\n  color: ${p => p.theme.white};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    height: 220px;\n  }\n`;\n\nconst BannerContent = styled('div')`\n  position: absolute;\n  display: grid;\n  justify-items: center;\n  grid-template-rows: repeat(3, max-content);\n  text-align: center;\n  padding: ${space(4)};\n`;\n\nconst BannerTitle = styled('h1')`\n  margin: 0;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    font-size: 40px;\n  }\n`;\n\nconst BannerSubtitle = styled('div')`\n  margin: 0;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    font-size: ${p => p.theme.fontSizeExtraLarge};\n  }\n`;\n\nconst StyledButtonBar = styled(ButtonBar)`\n  margin-top: ${space(2)};\n  width: fit-content;\n`;\n\nconst CloseButton = styled(Button)`\n  position: absolute;\n  display: block;\n  top: ${space(2)};\n  right: ${space(2)};\n  color: ${p => p.theme.white};\n  cursor: pointer;\n  z-index: 1;\n`;\n\nCloseButton.defaultProps = {\n  icon: <IconClose />,\n  ['aria-label']: t('Close'),\n  priority: 'link',\n  borderless: true,\n  size: 'xs',\n};\n\nexport default Banner;\n","import {useEffect, useState} from 'react';\n\nimport {Client} from 'sentry/api';\nimport {DateString, OrganizationSummary} from 'sentry/types';\nimport {getUtcDateString} from 'sentry/utils/dates';\nimport {TableData, TableDataWithTitle} from 'sentry/utils/discover/discoverQuery';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {doDiscoverQuery} from 'sentry/utils/discover/genericDiscoverQuery';\n\ninterface ChildrenRenderProps {\n  errored: boolean;\n  loading: boolean;\n  reloading: boolean;\n  tableData?: TableDataWithTitle[];\n}\n\nexport interface EventsGeoRequestProps {\n  api: Client;\n  children: (props: ChildrenRenderProps) => React.ReactElement;\n  end: DateString;\n  environments: string[];\n  organization: OrganizationSummary;\n  projects: number[];\n  query: string;\n  start: DateString;\n  yAxis: string | string[];\n  orderby?: string;\n  period?: string | null;\n  referrer?: string;\n}\n\nconst EventsGeoRequest = ({\n  api,\n  organization,\n  yAxis,\n  query,\n  orderby,\n  projects,\n  period,\n  start,\n  end,\n  environments,\n  referrer,\n  children,\n}: EventsGeoRequestProps) => {\n  const eventView = EventView.fromSavedQuery({\n    id: undefined,\n    name: '',\n    version: 2,\n    fields: Array.isArray(yAxis) ? yAxis : [yAxis],\n    query,\n    orderby: orderby ?? '',\n    projects,\n    range: period ?? '',\n    start: start ? getUtcDateString(start) : undefined,\n    end: end ? getUtcDateString(end) : undefined,\n    environment: environments,\n  });\n  const [results, setResults] = useState(undefined as ChildrenRenderProps['tableData']);\n  const [reloading, setReloading] = useState(false);\n  const [errored, setErrored] = useState(false);\n\n  useEffect(() => {\n    let mounted = true;\n    setErrored(false);\n\n    if (results) {\n      setReloading(true);\n    }\n\n    doDiscoverQuery<TableData>(api, `/organizations/${organization.slug}/events-geo/`, {\n      ...eventView.generateQueryStringObject(),\n      referrer,\n    })\n      .then(discoverQueryResults => {\n        if (mounted) {\n          setResults([discoverQueryResults[0]] as TableDataWithTitle[]);\n          setReloading(false);\n        }\n      })\n      .catch(() => {\n        if (mounted) {\n          setErrored(true);\n          setReloading(false);\n        }\n      });\n\n    return () => {\n      // Prevent setState leaking on unmounted component\n      mounted = false;\n    };\n  }, [query, yAxis, start, end, period, environments, projects, api]);\n\n  return children({\n    errored,\n    loading: !results && !errored,\n    reloading,\n    tableData: results,\n  });\n};\n\nexport default EventsGeoRequest;\n","import {LegendComponentOption} from 'echarts';\n\nimport {t} from 'sentry/locale';\nimport {Series} from 'sentry/types/echarts';\nimport {defined, formatBytesBase2} from 'sentry/utils';\nimport {AggregationOutputType} from 'sentry/utils/discover/fields';\nimport {\n  DAY,\n  formatAbbreviatedNumber,\n  formatPercentage,\n  getDuration,\n  HOUR,\n  MINUTE,\n  SECOND,\n  WEEK,\n} from 'sentry/utils/formatters';\n\n/**\n * Formatter for chart tooltips that handle a variety of discover and metrics result values.\n * If the result is metric values, the value can be of type number or null\n */\nexport function tooltipFormatter(\n  value: number | null,\n  outputType: AggregationOutputType = 'number'\n): string {\n  if (!defined(value)) {\n    return '\\u2014';\n  }\n  return tooltipFormatterUsingAggregateOutputType(value, outputType);\n}\n\n/**\n * Formatter for chart tooltips that takes the aggregate output type directly\n */\nexport function tooltipFormatterUsingAggregateOutputType(\n  value: number | null,\n  type: string\n): string {\n  if (!defined(value)) {\n    return '\\u2014';\n  }\n  switch (type) {\n    case 'integer':\n    case 'number':\n      return value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 2);\n    case 'duration':\n      return getDuration(value / 1000, 2, true);\n    case 'size':\n      return formatBytesBase2(value);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Formatter for chart axis labels that handle a variety of discover result values\n * This function is *very similar* to tooltipFormatter but outputs data with less precision.\n */\nexport function axisLabelFormatter(\n  value: number,\n  outputType: AggregationOutputType,\n  abbreviation: boolean = false,\n  durationUnit?: number\n): string {\n  return axisLabelFormatterUsingAggregateOutputType(\n    value,\n    outputType,\n    abbreviation,\n    durationUnit\n  );\n}\n\n/**\n * Formatter for chart axis labels that takes the aggregate output type directly\n */\nexport function axisLabelFormatterUsingAggregateOutputType(\n  value: number,\n  type: string,\n  abbreviation: boolean = false,\n  durationUnit?: number\n): string {\n  switch (type) {\n    case 'integer':\n    case 'number':\n      return abbreviation ? formatAbbreviatedNumber(value) : value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 0);\n    case 'duration':\n      return axisDuration(value, durationUnit);\n    case 'size':\n      return formatBytesBase2(value, 0);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Specialized duration formatting for axis labels.\n * In that context we are ok sacrificing accuracy for more\n * consistent sizing.\n *\n * @param value Number of milliseconds to format.\n */\nexport function axisDuration(value: number, durationUnit?: number): string {\n  durationUnit ??= categorizeDuration(value);\n  if (value === 0) {\n    return '0';\n  }\n  switch (durationUnit) {\n    case WEEK: {\n      const label = (value / WEEK).toFixed(0);\n      return t('%swk', label);\n    }\n    case DAY: {\n      const label = (value / DAY).toFixed(0);\n      return t('%sd', label);\n    }\n    case HOUR: {\n      const label = (value / HOUR).toFixed(0);\n      return t('%shr', label);\n    }\n    case MINUTE: {\n      const label = (value / MINUTE).toFixed(0);\n      return t('%smin', label);\n    }\n    case SECOND: {\n      const label = (value / SECOND).toFixed(0);\n      return t('%ss', label);\n    }\n    default:\n      const label = value.toFixed(0);\n      return t('%sms', label);\n  }\n}\n\n/**\n * Given an array of series and an eCharts legend object,\n * finds the range of y values (min and max) based on which series is selected in the legend\n * Assumes series[0] > series[1] > ...\n * @param series Array of eCharts series\n * @param legend eCharts legend object\n * @returns\n */\nexport function findRangeOfMultiSeries(series: Series[], legend?: LegendComponentOption) {\n  let range: {max: number; min: number} | undefined;\n  if (series[0]?.data) {\n    let minSeries = series[0];\n    let maxSeries;\n    series.forEach(({seriesName, data}, idx) => {\n      if (legend?.selected?.[seriesName] !== false && data.length) {\n        minSeries = series[idx];\n        maxSeries ??= series[idx];\n      }\n    });\n    if (maxSeries?.data) {\n      const max = Math.max(\n        ...maxSeries.data.map(({value}) => value).filter(value => !!value)\n      );\n      const min = Math.min(\n        ...minSeries.data.map(({value}) => value).filter(value => !!value)\n      );\n      range = {max, min};\n    }\n  }\n  return range;\n}\n\n/**\n * Given a eCharts series and legend, returns the unit to be used on the yAxis for a duration chart\n * @param series eCharts series array\n * @param legend eCharts legend object\n * @returns\n */\nexport function getDurationUnit(\n  series: Series[],\n  legend?: LegendComponentOption\n): number {\n  let durationUnit = 0;\n  const range = findRangeOfMultiSeries(series, legend);\n  if (range) {\n    const avg = (range.max + range.min) / 2;\n    durationUnit = categorizeDuration((range.max - range.min) / 5); // avg of 5 yAxis ticks per chart\n\n    const numOfDigits = (avg / durationUnit).toFixed(0).length;\n    if (numOfDigits > 6) {\n      durationUnit = categorizeDuration(avg);\n    }\n  }\n  return durationUnit;\n}\n\n/**\n * Categorizes the duration by Second, Minute, Hour, etc\n * Ex) categorizeDuration(1200) = MINUTE\n * @param value Duration in ms\n */\nexport function categorizeDuration(value): number {\n  if (value >= WEEK) {\n    return WEEK;\n  }\n  if (value >= DAY) {\n    return DAY;\n  }\n  if (value >= HOUR) {\n    return HOUR;\n  }\n  if (value >= MINUTE) {\n    return MINUTE;\n  }\n  if (value >= SECOND) {\n    return SECOND;\n  }\n  return 1;\n}\n"],"names":["makeKey","prefix","dismissBanner","bannerKey","localStorage","setItem","Banner","title","subtitle","isDismissable","dismissKey","className","backgroundImg","backgroundComponent","children","dismissed","dismiss","key","value","setValue","useState","getItem","useDismissable","BannerWrapper","CloseButton","onClick","t","BannerContent","BannerTitle","BannerSubtitle","StyledButtonBar","gap","p","css","theme","gray500","space","dropShadowLight","borderRadius","white","breakpoints","small","fontSizeExtraLarge","ButtonBar","Button","defaultProps","icon","priority","borderless","size","api","organization","yAxis","query","orderby","projects","period","start","end","environments","referrer","eventView","EventView","id","undefined","name","version","fields","Array","isArray","range","getUtcDateString","environment","results","setResults","reloading","setReloading","errored","setErrored","useEffect","mounted","doDiscoverQuery","slug","generateQueryStringObject","then","discoverQueryResults","catch","loading","tableData","tooltipFormatter","outputType","defined","tooltipFormatterUsingAggregateOutputType","type","toLocaleString","formatPercentage","getDuration","formatBytesBase2","toString","axisLabelFormatter","abbreviation","durationUnit","axisLabelFormatterUsingAggregateOutputType","formatAbbreviatedNumber","axisDuration","categorizeDuration","WEEK","label","toFixed","DAY","HOUR","MINUTE","SECOND","getDurationUnit","series","legend","data","maxSeries","minSeries","forEach","idx","seriesName","selected","length","max","Math","map","filter","min","findRangeOfMultiSeries","avg"],"sourceRoot":""}