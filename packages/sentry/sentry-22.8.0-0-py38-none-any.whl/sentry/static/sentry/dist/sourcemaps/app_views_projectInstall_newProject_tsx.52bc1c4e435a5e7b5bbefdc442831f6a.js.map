{"version":3,"file":"chunks/app_views_projectInstall_newProject_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/slugify.tsx","webpack:///./app/views/projectInstall/createProject.tsx","webpack:///./app/utils/withTeams.tsx","webpack:///./app/views/projectInstall/newProject.tsx"],"sourcesContent":["// XXX: This is NOT an exhaustive slugify function\n// Only forces lowercase and replaces spaces with hyphens\nexport default function slugify(str: any): string {\n  return typeof str === 'string' ? str.toLowerCase().replace(' ', '-') : '';\n}\n","import {Component, Fragment} from 'react';\n// eslint-disable-next-line no-restricted-imports\nimport {browserHistory, withRouter, WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\nimport {PlatformIcon} from 'platformicons';\n\nimport {openCreateTeamModal} from 'sentry/actionCreators/modal';\nimport ProjectActions from 'sentry/actions/projectActions';\nimport Alert from 'sentry/components/alert';\nimport Button from 'sentry/components/button';\nimport TeamSelector from 'sentry/components/forms/teamSelector';\nimport PageHeading from 'sentry/components/pageHeading';\nimport PlatformPicker from 'sentry/components/platformPicker';\nimport categoryList from 'sentry/data/platformCategories';\nimport {IconAdd} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {inputStyles} from 'sentry/styles/input';\nimport space from 'sentry/styles/space';\nimport {Organization, Team} from 'sentry/types';\nimport {logExperiment} from 'sentry/utils/analytics';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport getPlatformName from 'sentry/utils/getPlatformName';\nimport slugify from 'sentry/utils/slugify';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withTeams from 'sentry/utils/withTeams';\nimport IssueAlertOptions from 'sentry/views/projectInstall/issueAlertOptions';\n\nimport {PRESET_AGGREGATES} from '../alerts/rules/metric/presets';\n\nconst getCategoryName = (category?: string) =>\n  categoryList.find(({id}) => id === category)?.id;\n\ntype Props = WithRouterProps & {\n  api: any;\n  organization: Organization;\n  teams: Team[];\n};\n\ntype PlatformName = React.ComponentProps<typeof PlatformIcon>['platform'];\ntype IssueAlertFragment = Parameters<\n  React.ComponentProps<typeof IssueAlertOptions>['onChange']\n>[0];\n\ntype State = {\n  dataFragment: IssueAlertFragment | undefined;\n  error: boolean;\n  inFlight: boolean;\n  platform: PlatformName | null;\n  projectName: string;\n  team: string;\n};\n\nclass CreateProject extends Component<Props, State> {\n  constructor(props: Props, context) {\n    super(props, context);\n\n    const {teams, location} = props;\n    const {query} = location;\n    const accessTeams = teams.filter((team: Team) => team.hasAccess);\n\n    const team = query.team || (accessTeams.length && accessTeams[0].slug);\n    const platform = getPlatformName(query.platform) ? query.platform : '';\n\n    this.state = {\n      error: false,\n      projectName: getPlatformName(platform) || '',\n      team,\n      platform,\n      inFlight: false,\n      dataFragment: undefined,\n    };\n  }\n\n  componentDidMount() {\n    trackAdvancedAnalyticsEvent('project_creation_page.viewed', {\n      organization: this.props.organization,\n    });\n    logExperiment({\n      key: 'MetricAlertOnProjectCreationExperiment',\n      organization: this.props.organization,\n    });\n  }\n\n  get defaultCategory() {\n    const {query} = this.props.location;\n    return getCategoryName(query.category);\n  }\n\n  renderProjectForm() {\n    const {organization} = this.props;\n    const {projectName, platform, team} = this.state;\n\n    const createProjectForm = (\n      <CreateProjectForm onSubmit={this.createProject}>\n        <div>\n          <FormLabel>{t('Project name')}</FormLabel>\n          <ProjectNameInput>\n            <StyledPlatformIcon platform={platform ?? ''} />\n            <input\n              type=\"text\"\n              name=\"name\"\n              placeholder={t('project-name')}\n              autoComplete=\"off\"\n              value={projectName}\n              onChange={e => this.setState({projectName: slugify(e.target.value)})}\n            />\n          </ProjectNameInput>\n        </div>\n        <div>\n          <FormLabel>{t('Team')}</FormLabel>\n          <TeamSelectInput>\n            <TeamSelector\n              name=\"select-team\"\n              menuPlacement=\"auto\"\n              clearable={false}\n              value={team}\n              placeholder={t('Select a Team')}\n              onChange={choice => this.setState({team: choice.value})}\n              teamFilter={(filterTeam: Team) => filterTeam.hasAccess}\n            />\n            <Button\n              borderless\n              data-test-id=\"create-team\"\n              type=\"button\"\n              icon={<IconAdd isCircled />}\n              onClick={() =>\n                openCreateTeamModal({\n                  organization,\n                  onClose: ({slug}) => this.setState({team: slug}),\n                })\n              }\n              title={t('Create a team')}\n              aria-label={t('Create a team')}\n            />\n          </TeamSelectInput>\n        </div>\n        <div>\n          <Button\n            data-test-id=\"create-project\"\n            priority=\"primary\"\n            disabled={!this.canSubmitForm}\n          >\n            {t('Create Project')}\n          </Button>\n        </div>\n      </CreateProjectForm>\n    );\n\n    return (\n      <Fragment>\n        <PageHeading withMargins>{t('Give your project a name')}</PageHeading>\n        {createProjectForm}\n      </Fragment>\n    );\n  }\n\n  get canSubmitForm() {\n    const {projectName, team, inFlight} = this.state;\n    const {shouldCreateCustomRule, conditions} = this.state.dataFragment || {};\n\n    return (\n      !inFlight &&\n      team &&\n      projectName !== '' &&\n      (!shouldCreateCustomRule || conditions?.every?.(condition => condition.value))\n    );\n  }\n\n  createProject = async e => {\n    e.preventDefault();\n    const {organization, api} = this.props;\n    const {projectName, platform, team, dataFragment} = this.state;\n    const {slug} = organization;\n    const {\n      shouldCreateCustomRule,\n      name,\n      conditions,\n      actions,\n      actionMatch,\n      frequency,\n      defaultRules,\n      metricAlertPresets,\n    } = dataFragment || {};\n\n    this.setState({inFlight: true});\n\n    if (!projectName) {\n      Sentry.withScope(scope => {\n        scope.setExtra('props', this.props);\n        scope.setExtra('state', this.state);\n        Sentry.captureMessage('No project name');\n      });\n    }\n\n    try {\n      const projectData = await api.requestPromise(`/teams/${slug}/${team}/projects/`, {\n        method: 'POST',\n        data: {\n          name: projectName,\n          platform,\n          default_rules: defaultRules ?? true,\n        },\n      });\n\n      let ruleId: string | undefined;\n      if (shouldCreateCustomRule) {\n        const ruleData = await api.requestPromise(\n          `/projects/${organization.slug}/${projectData.slug}/rules/`,\n          {\n            method: 'POST',\n            data: {\n              name,\n              conditions,\n              actions,\n              actionMatch,\n              frequency,\n            },\n          }\n        );\n        ruleId = ruleData.id;\n      }\n      if (\n        !!organization.experiments.MetricAlertOnProjectCreationExperiment &&\n        metricAlertPresets &&\n        metricAlertPresets.length > 0\n      ) {\n        const presets = PRESET_AGGREGATES.filter(aggregate =>\n          metricAlertPresets.includes(aggregate.id)\n        );\n        const teamObj = this.props.teams.find(aTeam => aTeam.slug === team);\n        await Promise.all([\n          presets.map(preset => {\n            const context = preset.makeUnqueriedContext(\n              {\n                ...projectData,\n                teams: teamObj ? [teamObj] : [],\n              },\n              organization\n            );\n\n            return api.requestPromise(\n              `/projects/${organization.slug}/${projectData.slug}/alert-rules/?referrer=create_project`,\n              {\n                method: 'POST',\n                data: {\n                  aggregate: context.aggregate,\n                  comparisonDelta: context.comparisonDelta,\n                  dataset: context.dataset,\n                  eventTypes: context.eventTypes,\n                  name: context.name,\n                  owner: null,\n                  projectId: projectData.id,\n                  projects: [projectData.slug],\n                  query: '',\n                  resolveThreshold: null,\n                  thresholdPeriod: 1,\n                  thresholdType: context.thresholdType,\n                  timeWindow: context.timeWindow,\n                  triggers: context.triggers,\n                },\n              }\n            );\n          }),\n        ]);\n      }\n      trackAdvancedAnalyticsEvent('project_creation_page.created', {\n        organization,\n        metric_alerts: (metricAlertPresets || []).join(','),\n        issue_alert: defaultRules\n          ? 'Default'\n          : shouldCreateCustomRule\n          ? 'Custom'\n          : 'No Rule',\n        project_id: projectData.id,\n        rule_id: ruleId || '',\n      });\n\n      ProjectActions.createSuccess(projectData);\n      const platformKey = platform || 'other';\n      const nextUrl = `/${organization.slug}/${projectData.slug}/getting-started/${platformKey}/`;\n      browserHistory.push(nextUrl);\n    } catch (err) {\n      this.setState({\n        inFlight: false,\n        error: err.responseJSON.detail,\n      });\n\n      // Only log this if the error is something other than:\n      // * The user not having access to create a project, or,\n      // * A project with that slug already exists\n      if (err.status !== 403 && err.status !== 409) {\n        Sentry.withScope(scope => {\n          scope.setExtra('err', err);\n          scope.setExtra('props', this.props);\n          scope.setExtra('state', this.state);\n          Sentry.captureMessage('Project creation failed');\n        });\n      }\n    }\n  };\n\n  setPlatform = (platformId: PlatformName | null) =>\n    this.setState(({projectName, platform}: State) => ({\n      platform: platformId,\n      projectName:\n        !projectName || (platform && getPlatformName(platform) === projectName)\n          ? getPlatformName(platformId) || ''\n          : projectName,\n    }));\n\n  render() {\n    const {platform, error} = this.state;\n\n    return (\n      <Fragment>\n        {error && <Alert type=\"error\">{error}</Alert>}\n\n        <div data-test-id=\"onboarding-info\">\n          <PageHeading withMargins>{t('Create a new Project')}</PageHeading>\n          <HelpText>\n            {t(\n              `Projects allow you to scope error and transaction events to a specific\n               application in your organization. For example, you might have separate\n               projects for your API server and frontend client.`\n            )}\n          </HelpText>\n          <PageHeading withMargins>{t('Choose a platform')}</PageHeading>\n          <PlatformPicker\n            platform={platform}\n            defaultCategory={this.defaultCategory}\n            setPlatform={this.setPlatform}\n            organization={this.props.organization}\n            showOther\n          />\n          <IssueAlertOptions\n            onChange={updatedData => {\n              this.setState({dataFragment: updatedData});\n            }}\n          />\n          {this.renderProjectForm()}\n        </div>\n      </Fragment>\n    );\n  }\n}\n\n// TODO(davidenwang): change to functional component and replace withTeams with useTeams\nexport default withApi(withRouter(withOrganization(withTeams(CreateProject))));\nexport {CreateProject};\n\nconst CreateProjectForm = styled('form')`\n  display: grid;\n  grid-template-columns: 300px minmax(250px, max-content) max-content;\n  gap: ${space(2)};\n  align-items: end;\n  padding: ${space(3)} 0;\n  box-shadow: 0 -1px 0 rgba(0, 0, 0, 0.1);\n  background: ${p => p.theme.background};\n`;\n\nconst FormLabel = styled('div')`\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  margin-bottom: ${space(1)};\n`;\n\nconst StyledPlatformIcon = styled(PlatformIcon)`\n  margin-right: ${space(1)};\n`;\n\nconst ProjectNameInput = styled('div')`\n  ${p => inputStyles(p)};\n  padding: 5px 10px;\n  display: flex;\n  align-items: center;\n\n  input {\n    background: ${p => p.theme.background};\n    border: 0;\n    outline: 0;\n    flex: 1;\n  }\n`;\n\nconst TeamSelectInput = styled('div')`\n  display: grid;\n  gap: ${space(1)};\n  grid-template-columns: 1fr min-content;\n  align-items: center;\n`;\n\nconst HelpText = styled('p')`\n  color: ${p => p.theme.subText};\n  max-width: 760px;\n`;\n","import {Team} from 'sentry/types';\nimport getDisplayName from 'sentry/utils/getDisplayName';\nimport useTeams from 'sentry/utils/useTeams';\n\ntype InjectedTeamsProps = {\n  teams?: Team[];\n};\n\n/**\n * Higher order component that provides a list of teams\n *\n * @deprecated Prefer `useTeams` or `<Teams />`.\n */\nconst withTeams = <P extends InjectedTeamsProps>(\n  WrappedComponent: React.ComponentType<P>\n) => {\n  const WithTeams: React.FC<\n    Omit<P, keyof InjectedTeamsProps> & InjectedTeamsProps\n  > = props => {\n    const {teams} = useTeams();\n    return <WrappedComponent teams={teams} {...(props as P)} />;\n  };\n\n  WithTeams.displayName = `withTeams(${getDisplayName(WrappedComponent)})`;\n\n  return WithTeams;\n};\n\nexport default withTeams;\n","import styled from '@emotion/styled';\n\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport space from 'sentry/styles/space';\nimport CreateProject from 'sentry/views/projectInstall/createProject';\n\nconst NewProject = () => (\n  <SentryDocumentTitle>\n    <Container>\n      <div className=\"container\">\n        <Content>\n          <CreateProject />\n        </Content>\n      </div>\n    </Container>\n  </SentryDocumentTitle>\n);\n\nconst Container = styled('div')`\n  flex: 1;\n  background: ${p => p.theme.background};\n`;\n\nconst Content = styled('div')`\n  margin-top: ${space(3)};\n`;\n\nexport default NewProject;\n"],"names":["slugify","str","toLowerCase","replace","CreateProject","Component","constructor","props","context","super","async","e","preventDefault","organization","api","this","projectName","platform","team","dataFragment","state","slug","shouldCreateCustomRule","name","conditions","actions","actionMatch","frequency","defaultRules","metricAlertPresets","setState","inFlight","Sentry","scope","setExtra","projectData","requestPromise","method","data","default_rules","ruleId","id","experiments","MetricAlertOnProjectCreationExperiment","length","presets","PRESET_AGGREGATES","aggregate","includes","teamObj","teams","find","aTeam","Promise","all","map","preset","makeUnqueriedContext","comparisonDelta","dataset","eventTypes","owner","projectId","projects","query","resolveThreshold","thresholdPeriod","thresholdType","timeWindow","triggers","trackAdvancedAnalyticsEvent","metric_alerts","join","issue_alert","project_id","rule_id","ProjectActions","platformKey","nextUrl","browserHistory","err","error","responseJSON","detail","status","platformId","getPlatformName","location","accessTeams","filter","hasAccess","undefined","componentDidMount","logExperiment","key","defaultCategory","category","categoryList","renderProjectForm","createProjectForm","CreateProjectForm","onSubmit","createProject","FormLabel","t","ProjectNameInput","StyledPlatformIcon","type","placeholder","autoComplete","value","onChange","target","TeamSelectInput","menuPlacement","clearable","choice","teamFilter","filterTeam","borderless","icon","isCircled","onClick","openCreateTeamModal","onClose","title","priority","disabled","canSubmitForm","Fragment","withMargins","every","condition","render","HelpText","setPlatform","showOther","updatedData","withApi","withRouter","withOrganization","WrappedComponent","WithTeams","useTeams","displayName","getDisplayName","withTeams","space","p","theme","background","fontSizeExtraLarge","PlatformIcon","inputStyles","subText","NewProject","Container","className","Content"],"sourceRoot":""}