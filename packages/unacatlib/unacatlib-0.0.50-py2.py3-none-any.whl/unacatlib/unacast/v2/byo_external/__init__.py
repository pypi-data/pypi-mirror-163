# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: unacast/v2/byo_external/external_byo_service.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List, Optional

import betterproto
import grpclib


class ReportStatus(betterproto.Enum):
    Undefined = 0
    Pending = 1
    Running = 2
    Succeeded = 3
    Failed = 4


@dataclass(eq=False, repr=False)
class CreateUsReportRequest(betterproto.Message):
    billing_account: str = betterproto.string_field(2)
    metric_reference: List["MetricReference"] = betterproto.message_field(5)
    pois: List["PointOfInterest"] = betterproto.message_field(6)
    start_date: "Date" = betterproto.message_field(7)
    end_date: "Date" = betterproto.message_field(8)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ReportDetails(betterproto.Message):
    billing_account: str = betterproto.string_field(10)
    report_id: str = betterproto.string_field(1)
    report_status: "ReportStatus" = betterproto.enum_field(3)
    created_time: int = betterproto.int64_field(5)
    expiry_time: int = betterproto.int64_field(6)
    metric_reference: List["MetricReference"] = betterproto.message_field(7)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ReadMetricFromReportRequest(betterproto.Message):
    billing_account: str = betterproto.string_field(2)
    report_id: str = betterproto.string_field(3)
    metric_reference: "MetricReference" = betterproto.message_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class MetricValuesOnPois(betterproto.Message):
    report_status: "ReportStatus" = betterproto.enum_field(3)
    schema: "_metric__.MetricVersion" = betterproto.message_field(1)
    values: List["_metric__.MetricValue"] = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class MetricReference(betterproto.Message):
    metric_id: str = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PointOfInterest(betterproto.Message):
    name: str = betterproto.string_field(1)
    polygon: "MultiPolygon" = betterproto.message_field(4)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class MultiPolygon(betterproto.Message):
    polygons: List["Polygon"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Polygon(betterproto.Message):
    rings: List["PolygonRing"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PolygonRing(betterproto.Message):
    coordinates: List["Coordinate"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Coordinate(betterproto.Message):
    lon: str = betterproto.string_field(1)
    lat: str = betterproto.string_field(4)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Date(betterproto.Message):
    year: int = betterproto.int32_field(1)
    month: int = betterproto.int32_field(2)
    day: int = betterproto.int32_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


class ExternalByoServiceStub(betterproto.ServiceStub):
    async def create_us_report(self) -> "ReportDetails":

        request = CreateUsReportRequest()

        return await self._unary_unary(
            "/unacast.v2.byo_external.ExternalByoService/CreateUSReport",
            request,
            ReportDetails,
        )

    async def read_metric_from_report(
        self,
        *,
        billing_account: str = "",
        report_id: str = "",
        metric_reference: "MetricReference" = None,
    ) -> "MetricValuesOnPois":

        request = ReadMetricFromReportRequest()
        request.billing_account = billing_account
        request.report_id = report_id
        if metric_reference is not None:
            request.metric_reference = metric_reference

        return await self._unary_unary(
            "/unacast.v2.byo_external.ExternalByoService/ReadMetricFromReport",
            request,
            MetricValuesOnPois,
        )


from .. import metric as _metric__
