# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: unacast/v2/access/storage_access.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List, Optional

import betterproto
import grpclib


class StorageOwner(betterproto.Enum):
    UNSPECIFIED = 0
    ADMIN = 1
    USER = 2


@dataclass(eq=False, repr=False)
class CreateStorageAccessResourceResponse(betterproto.Message):
    storage_access: "StorageAccess" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CreateStorageAccessResourceRequest(betterproto.Message):
    billing_account_id: str = betterproto.string_field(1)
    operator_email: str = betterproto.string_field(3)
    # BigQueryDataset big_query_dataset = 5;
    s3_bucket: "S3Bucket" = betterproto.message_field(6, group="storage")
    gcp_user: "GcpUser" = betterproto.message_field(18, group="users_config")
    aws_user: "AwsUser" = betterproto.message_field(19, group="users_config")

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GcpUser(betterproto.Message):
    iam_user: List[str] = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class AwsUser(betterproto.Message):
    aws_users_arn: List[str] = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class BigQueryDataset(betterproto.Message):
    project_id: str = betterproto.string_field(1)
    dataset_id: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class S3Bucket(betterproto.Message):
    bucket: str = betterproto.string_field(1)
    region: str = betterproto.string_field(2)
    path: str = betterproto.string_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class RegisterStorageAccessExternalResourceRequest(betterproto.Message):
    billing_account_id: str = betterproto.string_field(1)
    operator_email: str = betterproto.string_field(2)
    s3_bucket: "S3Bucket" = betterproto.message_field(4, group="storage")

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class RegisterStorageAccessExternalResourceResponse(betterproto.Message):
    storage_access: "StorageAccess" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetResourcePolicyRequest(betterproto.Message):
    billing_account_id: str = betterproto.string_field(1)
    s3_bucket: "S3Bucket" = betterproto.message_field(4, group="storage")

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetResourcePolicyResponse(betterproto.Message):
    policy: str = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListStorageAccessRequest(betterproto.Message):
    billing_account_id: str = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListStorageAccessResponse(betterproto.Message):
    storage_access: List["StorageAccess"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class StorageAccess(betterproto.Message):
    billing_account_id: str = betterproto.string_field(1)
    storage_config_type: "_catalog__.DestinationConfigType" = betterproto.enum_field(2)
    storage_config_json: str = betterproto.string_field(3)
    create_time_string: str = betterproto.string_field(7)
    processing_log: str = betterproto.string_field(9)
    owner: "StorageOwner" = betterproto.enum_field(10)

    def __post_init__(self) -> None:
        super().__post_init__()


class StorageAccessServiceStub(betterproto.ServiceStub):
    async def create_storage_access_resource(
        self,
        *,
        billing_account_id: str = "",
        operator_email: str = "",
        s3_bucket: "S3Bucket" = None,
        gcp_user: "GcpUser" = None,
        aws_user: "AwsUser" = None,
    ) -> "CreateStorageAccessResourceResponse":

        request = CreateStorageAccessResourceRequest()
        request.billing_account_id = billing_account_id
        request.operator_email = operator_email
        if s3_bucket is not None:
            request.s3_bucket = s3_bucket
        if gcp_user is not None:
            request.gcp_user = gcp_user
        if aws_user is not None:
            request.aws_user = aws_user

        return await self._unary_unary(
            "/unacast.v2.access.StorageAccessService/CreateStorageAccessResource",
            request,
            CreateStorageAccessResourceResponse,
        )

    async def register_storage_access_external_resource(
        self,
        *,
        billing_account_id: str = "",
        operator_email: str = "",
        s3_bucket: "S3Bucket" = None,
    ) -> "RegisterStorageAccessExternalResourceResponse":

        request = RegisterStorageAccessExternalResourceRequest()
        request.billing_account_id = billing_account_id
        request.operator_email = operator_email
        if s3_bucket is not None:
            request.s3_bucket = s3_bucket

        return await self._unary_unary(
            "/unacast.v2.access.StorageAccessService/RegisterStorageAccessExternalResource",
            request,
            RegisterStorageAccessExternalResourceResponse,
        )

    async def get_resource_access_to_allow_uc_delivery(
        self, *, billing_account_id: str = "", s3_bucket: "S3Bucket" = None
    ) -> "GetResourcePolicyResponse":

        request = GetResourcePolicyRequest()
        request.billing_account_id = billing_account_id
        if s3_bucket is not None:
            request.s3_bucket = s3_bucket

        return await self._unary_unary(
            "/unacast.v2.access.StorageAccessService/GetResourceAccessToAllowUCDelivery",
            request,
            GetResourcePolicyResponse,
        )

    async def list_storage_access_resources(
        self, *, billing_account_id: str = ""
    ) -> "ListStorageAccessResponse":

        request = ListStorageAccessRequest()
        request.billing_account_id = billing_account_id

        return await self._unary_unary(
            "/unacast.v2.access.StorageAccessService/ListStorageAccessResources",
            request,
            ListStorageAccessResponse,
        )


from .. import catalog as _catalog__
