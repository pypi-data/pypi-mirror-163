# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: unacast/byo/v1/byo_service.proto, unacast/byo/v1/poi_collection_service.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List, Optional

import betterproto
import grpclib


class Region(betterproto.Enum):
    NOT_DEFINED = 0
    US = 1
    NON_US = 2


class ReportType(betterproto.Enum):
    ONE_TIME = 0
    RECURRING = 1


class ReportStatus(betterproto.Enum):
    Undefined = 0
    Pending = 1
    Running = 2
    Succeeded = 3
    Failed = 4
    Archived = 5


@dataclass(eq=False, repr=False)
class LatLonToPolygonRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(2)
    point_radii: List["PointRadius"] = betterproto.message_field(6)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class LatLonToPolygonResponse(betterproto.Message):
    pois: List["PointOfInterestFromLookup"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class IndexToUnacatRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(1)
    report_id: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ScheduleReportRefreshRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(1)
    extend_to: "__unatype__.Date" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class RefreshReportRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(1)
    report_id: str = betterproto.string_field(2)
    extend_to: "__unatype__.Date" = betterproto.message_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ValidateGeometryRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(2)
    poi_collection_reference: str = betterproto.string_field(7)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListMetricsRequest(betterproto.Message):
    regions: List["Region"] = betterproto.enum_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListMetricsResponse(betterproto.Message):
    metric_refs_regions: List["MetricReferenceForRegion"] = betterproto.message_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CreateStoredCollectionRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(2)
    pois: List["PointOfInterest"] = betterproto.message_field(1)
    foreign_collection_id: str = betterproto.string_field(4)
    display_name: str = betterproto.string_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CreateStoredCollectionResponse(betterproto.Message):
    collection_reference_combined: str = betterproto.string_field(1)
    collection_version_id: str = betterproto.string_field(2)
    storage_reference: str = betterproto.string_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class InitChunkedCollectionUploadRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class InitChunkedCollectionUploadResponse(betterproto.Message):
    chunk_ref: str = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class AppendCollectionChunkRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(1)
    chunk_ref: str = betterproto.string_field(2)
    pois: List["PointOfInterest"] = betterproto.message_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class AppendCollectionChunkResponse(betterproto.Message):
    pass

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CreateStoredCollectionFromChunksRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(1)
    chunk_ref: str = betterproto.string_field(2)
    foreign_collection_id: str = betterproto.string_field(4)
    display_name: str = betterproto.string_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CreateReportFromStoredCollectionRequest(betterproto.Message):
    report_type: "ReportType" = betterproto.enum_field(8)
    report_name: str = betterproto.string_field(1)
    billing_context: str = betterproto.string_field(2)
    observation_period: "Period" = betterproto.message_field(3)
    metric_refs: List["MetricReference"] = betterproto.message_field(5)
    client_name: str = betterproto.string_field(6)
    poi_collection_reference: str = betterproto.string_field(7)
    region: "Region" = betterproto.enum_field(9)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CreateReportFromPassedCollectionRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(2)
    observation_period: "Period" = betterproto.message_field(3)
    metric_refs: List["MetricReference"] = betterproto.message_field(5)
    pois: List["PointOfInterest"] = betterproto.message_field(6)
    region: "Region" = betterproto.enum_field(9)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class StopRecurringReportRequest(betterproto.Message):
    report_id: str = betterproto.string_field(1)
    billing_context: str = betterproto.string_field(2)
    end_date: "__unatype__.Date" = betterproto.message_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class StopRecurringReportResponse(betterproto.Message):
    report_details: "ReportDetails" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ReadMetricReportRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(2)
    report_id: str = betterproto.string_field(3)
    metric_id: str = betterproto.string_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class MetricReferenceForRegion(betterproto.Message):
    region: "Region" = betterproto.enum_field(1)
    metric_refs: List["MetricReference"] = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class MetricReference(betterproto.Message):
    metric_id: str = betterproto.string_field(1)
    metric_category: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Period(betterproto.Message):
    start: "__unatype__.Date" = betterproto.message_field(1)
    end: "__unatype__.Date" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PointOfInterest(betterproto.Message):
    name: str = betterproto.string_field(1)
    polygon: "MultiPolygon" = betterproto.message_field(4)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PointOfInterestFromLookup(betterproto.Message):
    name: str = betterproto.string_field(1)
    polygon: "MultiPolygon" = betterproto.message_field(2)
    area_contruction_method: str = betterproto.string_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class MultiPolygon(betterproto.Message):
    polygons: List["Polygon"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Polygon(betterproto.Message):
    rings: List["PolygonRing"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PolygonRing(betterproto.Message):
    coordinates: List["Coordinate"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Coordinate(betterproto.Message):
    lon: str = betterproto.string_field(1)
    lat: str = betterproto.string_field(4)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PrepareReportResponse(betterproto.Message):
    metrics_on_pois: List["PreparedMetricOnPois"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PreparedMetricOnPois(betterproto.Message):
    metric_id: str = betterproto.string_field(1)
    result_token: str = betterproto.string_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CreateReportResponse(betterproto.Message):
    metrics_on_pois: List["MetricOnPois"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListReportsRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListReportsResponse(betterproto.Message):
    reports: List["ReportDetails"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ReportDetailsRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(2)
    report_id: str = betterproto.string_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ReportDetails(betterproto.Message):
    report_type: "ReportType" = betterproto.enum_field(13)
    report_id: str = betterproto.string_field(1)
    report_name: str = betterproto.string_field(2)
    client_name: str = betterproto.string_field(12)
    report_status: "ReportStatus" = betterproto.enum_field(3)
    created_by: str = betterproto.string_field(4)
    created_time: int = betterproto.int64_field(5)
    expiry_time: int = betterproto.int64_field(6)
    item_count: int = betterproto.int64_field(14)
    storage_reference: str = betterproto.string_field(15)
    observation_period: "Period" = betterproto.message_field(7)
    region: "Region" = betterproto.enum_field(8)
    metrics: List[str] = betterproto.string_field(9)
    results: List["ReportDetailsMetricResult"] = betterproto.message_field(16)
    billing_context: str = betterproto.string_field(10)
    poi_collection_reference: str = betterproto.string_field(11)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ReportDetailsMetricResult(betterproto.Message):
    metric: str = betterproto.string_field(1)
    storage_reference: str = betterproto.string_field(2)
    unacat_catalog_id: str = betterproto.string_field(3)
    unacat_metric_id: str = betterproto.string_field(4)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ReportValidation(betterproto.Message):
    csv_result: str = betterproto.string_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class MetricOnPois(betterproto.Message):
    metric_id: str = betterproto.string_field(1)
    csv_result: str = betterproto.string_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class MetricValuesOnPois(betterproto.Message):
    # ReportID + MetricID ?
    metric_version: "__v2_metric__.MetricVersion" = betterproto.message_field(1)
    values: List["__v2_metric__.MetricValue"] = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PointRadius(betterproto.Message):
    name: str = betterproto.string_field(1)
    coordinate: "Coordinate" = betterproto.message_field(2)
    fallback_radius: int = betterproto.int32_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class DraftReport(betterproto.Message):
    report_id: str = betterproto.string_field(1)
    info: str = betterproto.string_field(2)
    details: str = betterproto.string_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class DraftReportInfo(betterproto.Message):
    report_id: str = betterproto.string_field(1)
    info: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListDraftReportsResponse(betterproto.Message):
    reports: List["DraftReportInfo"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class DraftReportIdentifier(betterproto.Message):
    report_id: str = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Nothing(betterproto.Message):
    pass

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CreateNewCollectionRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(1)
    region: "Region" = betterproto.enum_field(2)
    name: str = betterproto.string_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CreateNewCollectionResponse(betterproto.Message):
    collection_id: str = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PoiGeometry(betterproto.Message):
    circle: "PoiGeometryPointWithRadius" = betterproto.message_field(
        1, group="geometry"
    )
    polygon: "PoiGeometryPolygon" = betterproto.message_field(2, group="geometry")
    multi_polygon: "PoiGeometryMultiPolygon" = betterproto.message_field(
        3, group="geometry"
    )
    error: "PoiGeometryError" = betterproto.message_field(4, group="geometry")

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PoiGeometryPointWithRadius(betterproto.Message):
    centroid: "Coordinate" = betterproto.message_field(1)
    radius: int = betterproto.int32_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PoiGeometryPolygon(betterproto.Message):
    rings: List["PolygonRing"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PoiGeometryMultiPolygon(betterproto.Message):
    polygons: List["Polygon"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PoiGeometryError(betterproto.Message):
    message: str = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PoiDetailsBasic(betterproto.Message):
    collection_id: str = betterproto.string_field(1)
    poi_id: str = betterproto.string_field(2)
    name: str = betterproto.string_field(3)
    centroid: "Coordinate" = betterproto.message_field(4)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class NewBasedOnLatLon(betterproto.Message):
    name: str = betterproto.string_field(1)
    centroid: "Coordinate" = betterproto.message_field(2)
    fallback_radius: int = betterproto.int32_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class NewBasedOnGeometry(betterproto.Message):
    name: str = betterproto.string_field(1)
    geometry: "PoiGeometry" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class AddPoisBasedOnLatLonRequest(betterproto.Message):
    collection_id: str = betterproto.string_field(1)
    pois: List["NewBasedOnLatLon"] = betterproto.message_field(2)
    fallback_radius: int = betterproto.int32_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class AddPoisBasedOnGeometryRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(1)
    collection_id: str = betterproto.string_field(2)
    pois: List["NewBasedOnGeometry"] = betterproto.message_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class AddPoisResponse(betterproto.Message):
    pois: List["PoiDetailsBasic"] = betterproto.message_field(1)
    errors: List["AddPoisResponsePoisError"] = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class AddPoisResponsePoisError(betterproto.Message):
    error: str = betterproto.string_field(1)
    name: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class AddAddressResponse(betterproto.Message):
    pois: List["PoiDetailsBasic"] = betterproto.message_field(1)
    errors: List["AddAddressResponseAddressError"] = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class AddAddressResponseAddressError(betterproto.Message):
    error: str = betterproto.string_field(1)
    address: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetCollectionRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetCollectionResponse(betterproto.Message):
    collections: List["PoiCollectionData"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PoiCollectionData(betterproto.Message):
    collection_id: str = betterproto.string_field(1)
    created_by: str = betterproto.string_field(2)
    name: str = betterproto.string_field(3)
    created_time: int = betterproto.int64_field(4)
    last_publish_time: int = betterproto.int64_field(5)
    item_count: int = betterproto.int64_field(6)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class UpdatePoiRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(1)
    collection_id: str = betterproto.string_field(2)
    poi_id: str = betterproto.string_field(3)
    name: str = betterproto.string_field(4)
    geometry: "PoiGeometry" = betterproto.message_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class RemovePoiRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(1)
    collection_id: str = betterproto.string_field(2)
    poi_id: str = betterproto.string_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetPoiCollectionRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(1)
    collection_id: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetPoiCollectionResponse(betterproto.Message):
    collection: "PoiCollectionData" = betterproto.message_field(1)
    items: List["PoiItem"] = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PoiItem(betterproto.Message):
    collection_id: str = betterproto.string_field(1)
    poi_id: str = betterproto.string_field(2)
    name: str = betterproto.string_field(3)
    centroid_lat: float = betterproto.double_field(4)
    centroid_lon: float = betterproto.double_field(5)
    geometry_data: "PoiGeometry" = betterproto.message_field(6)
    country_code: str = betterproto.string_field(7)
    updated_by: str = betterproto.string_field(8)
    updated_time: int = betterproto.int64_field(9)
    geometry_type: int = betterproto.int32_field(10)
    creation_method: "CreationMethod" = betterproto.message_field(11)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CreationMethod(betterproto.Message):
    type: int = betterproto.int32_field(1)
    address_lookup_value: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetPoiItemRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(1)
    collection_id: str = betterproto.string_field(2)
    poi_id: str = betterproto.string_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PublishCollectionVersionRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(1)
    collection_id: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PublishCollectionVersionResponse(betterproto.Message):
    collection_version_id: str = betterproto.string_field(1)
    storage_reference: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class DeleteCollectionRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(1)
    collection_id: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Address(betterproto.Message):
    name: str = betterproto.string_field(1)
    address: str = betterproto.string_field(2)
    radius: int = betterproto.int32_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class AddPoisBasedOnAddressRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(1)
    collection_id: str = betterproto.string_field(2)
    addresses: List["Address"] = betterproto.message_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CollectionAsGeoJsonRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(1)
    collection_id: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CollectionAsGeoJsonResponse(betterproto.Message):
    geo_json: bytes = betterproto.bytes_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ValidateGeometryFileRequest(betterproto.Message):
    storage: "__v2_access__.RegisterStorageAccessExternalResourceRequest" = (
        betterproto.message_field(1)
    )
    filename: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ValidateGeometryFileResponse(betterproto.Message):
    file_is_valid: bool = betterproto.bool_field(1)
    error: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


class ByoServiceStub(betterproto.ServiceStub):
    async def create_stored_collection(
        self,
        *,
        billing_context: str = "",
        pois: Optional[List["PointOfInterest"]] = None,
        foreign_collection_id: str = "",
        display_name: str = "",
    ) -> "CreateStoredCollectionResponse":
        pois = pois or []

        request = CreateStoredCollectionRequest()
        request.billing_context = billing_context
        if pois is not None:
            request.pois = pois
        request.foreign_collection_id = foreign_collection_id
        request.display_name = display_name

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/CreateStoredCollection",
            request,
            CreateStoredCollectionResponse,
        )

    async def init_chunked_collection_upload(
        self, *, billing_context: str = ""
    ) -> "InitChunkedCollectionUploadResponse":

        request = InitChunkedCollectionUploadRequest()
        request.billing_context = billing_context

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/InitChunkedCollectionUpload",
            request,
            InitChunkedCollectionUploadResponse,
        )

    async def append_collection_chunk(
        self,
        *,
        billing_context: str = "",
        chunk_ref: str = "",
        pois: Optional[List["PointOfInterest"]] = None,
    ) -> "AppendCollectionChunkResponse":
        pois = pois or []

        request = AppendCollectionChunkRequest()
        request.billing_context = billing_context
        request.chunk_ref = chunk_ref
        if pois is not None:
            request.pois = pois

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/AppendCollectionChunk",
            request,
            AppendCollectionChunkResponse,
        )

    async def create_stored_collection_from_chunks(
        self,
        *,
        billing_context: str = "",
        chunk_ref: str = "",
        foreign_collection_id: str = "",
        display_name: str = "",
    ) -> "CreateStoredCollectionResponse":

        request = CreateStoredCollectionFromChunksRequest()
        request.billing_context = billing_context
        request.chunk_ref = chunk_ref
        request.foreign_collection_id = foreign_collection_id
        request.display_name = display_name

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/CreateStoredCollectionFromChunks",
            request,
            CreateStoredCollectionResponse,
        )

    async def create_report_from_passed_collection(
        self,
        *,
        billing_context: str = "",
        observation_period: "Period" = None,
        metric_refs: Optional[List["MetricReference"]] = None,
        pois: Optional[List["PointOfInterest"]] = None,
        region: "Region" = None,
    ) -> "CreateReportResponse":
        metric_refs = metric_refs or []
        pois = pois or []

        request = CreateReportFromPassedCollectionRequest()
        request.billing_context = billing_context
        if observation_period is not None:
            request.observation_period = observation_period
        if metric_refs is not None:
            request.metric_refs = metric_refs
        if pois is not None:
            request.pois = pois
        request.region = region

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/CreateReportFromPassedCollection",
            request,
            CreateReportResponse,
        )

    async def create_report_from_stored_collection(
        self,
        *,
        report_type: "ReportType" = None,
        report_name: str = "",
        billing_context: str = "",
        observation_period: "Period" = None,
        metric_refs: Optional[List["MetricReference"]] = None,
        client_name: str = "",
        poi_collection_reference: str = "",
        region: "Region" = None,
    ) -> "CreateReportResponse":
        metric_refs = metric_refs or []

        request = CreateReportFromStoredCollectionRequest()
        request.report_type = report_type
        request.report_name = report_name
        request.billing_context = billing_context
        if observation_period is not None:
            request.observation_period = observation_period
        if metric_refs is not None:
            request.metric_refs = metric_refs
        request.client_name = client_name
        request.poi_collection_reference = poi_collection_reference
        request.region = region

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/CreateReportFromStoredCollection",
            request,
            CreateReportResponse,
        )

    async def prepare_report_from_stored_collection(
        self,
        *,
        report_type: "ReportType" = None,
        report_name: str = "",
        billing_context: str = "",
        observation_period: "Period" = None,
        metric_refs: Optional[List["MetricReference"]] = None,
        client_name: str = "",
        poi_collection_reference: str = "",
        region: "Region" = None,
    ) -> "ReportDetails":
        metric_refs = metric_refs or []

        request = CreateReportFromStoredCollectionRequest()
        request.report_type = report_type
        request.report_name = report_name
        request.billing_context = billing_context
        if observation_period is not None:
            request.observation_period = observation_period
        if metric_refs is not None:
            request.metric_refs = metric_refs
        request.client_name = client_name
        request.poi_collection_reference = poi_collection_reference
        request.region = region

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/PrepareReportFromStoredCollection",
            request,
            ReportDetails,
        )

    async def stop_recurring_report(
        self,
        *,
        report_id: str = "",
        billing_context: str = "",
        end_date: "__unatype__.Date" = None,
    ) -> "StopRecurringReportResponse":

        request = StopRecurringReportRequest()
        request.report_id = report_id
        request.billing_context = billing_context
        if end_date is not None:
            request.end_date = end_date

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/StopRecurringReport",
            request,
            StopRecurringReportResponse,
        )

    async def read_metric_report(
        self, *, billing_context: str = "", report_id: str = "", metric_id: str = ""
    ) -> "MetricOnPois":

        request = ReadMetricReportRequest()
        request.billing_context = billing_context
        request.report_id = report_id
        request.metric_id = metric_id

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/ReadMetricReport", request, MetricOnPois
        )

    async def read_metric_report2(
        self, *, billing_context: str = "", report_id: str = "", metric_id: str = ""
    ) -> "MetricValuesOnPois":

        request = ReadMetricReportRequest()
        request.billing_context = billing_context
        request.report_id = report_id
        request.metric_id = metric_id

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/ReadMetricReport2", request, MetricValuesOnPois
        )

    async def list_reports(self, *, billing_context: str = "") -> "ListReportsResponse":

        request = ListReportsRequest()
        request.billing_context = billing_context

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/ListReports", request, ListReportsResponse
        )

    async def do_process_report(
        self, *, billing_context: str = "", report_id: str = ""
    ) -> "ReportDetails":

        request = ReportDetailsRequest()
        request.billing_context = billing_context
        request.report_id = report_id

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/DoProcessReport", request, ReportDetails
        )

    async def get_report_details(
        self, *, billing_context: str = "", report_id: str = ""
    ) -> "ReportDetails":

        request = ReportDetailsRequest()
        request.billing_context = billing_context
        request.report_id = report_id

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/GetReportDetails", request, ReportDetails
        )

    async def read_report_validation(
        self, *, billing_context: str = "", report_id: str = ""
    ) -> "ReportValidation":

        request = ReportDetailsRequest()
        request.billing_context = billing_context
        request.report_id = report_id

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/ReadReportValidation", request, ReportValidation
        )

    async def archive_metric_report(
        self, *, billing_context: str = "", report_id: str = ""
    ) -> "betterproto_lib_google_protobuf.Empty":

        request = ReportDetailsRequest()
        request.billing_context = billing_context
        request.report_id = report_id

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/ArchiveMetricReport",
            request,
            betterproto_lib_google_protobuf.Empty,
        )

    async def list_metrics(
        self, *, regions: Optional[List["Region"]] = None
    ) -> "ListMetricsResponse":
        regions = regions or []

        request = ListMetricsRequest()
        request.regions = regions

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/ListMetrics", request, ListMetricsResponse
        )

    async def lat_lon_to_polygon(
        self,
        *,
        billing_context: str = "",
        point_radii: Optional[List["PointRadius"]] = None,
    ) -> "LatLonToPolygonResponse":
        point_radii = point_radii or []

        request = LatLonToPolygonRequest()
        request.billing_context = billing_context
        if point_radii is not None:
            request.point_radii = point_radii

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/LatLonToPolygon",
            request,
            LatLonToPolygonResponse,
        )

    async def index_to_unacat(
        self, *, billing_context: str = "", report_id: str = ""
    ) -> "betterproto_lib_google_protobuf.Empty":

        request = IndexToUnacatRequest()
        request.billing_context = billing_context
        request.report_id = report_id

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/IndexToUnacat",
            request,
            betterproto_lib_google_protobuf.Empty,
        )

    async def schedule_report_refresh(
        self, *, billing_context: str = "", extend_to: "__unatype__.Date" = None
    ) -> "betterproto_lib_google_protobuf.Empty":

        request = ScheduleReportRefreshRequest()
        request.billing_context = billing_context
        if extend_to is not None:
            request.extend_to = extend_to

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/ScheduleReportRefresh",
            request,
            betterproto_lib_google_protobuf.Empty,
        )

    async def refresh_report(
        self,
        *,
        billing_context: str = "",
        report_id: str = "",
        extend_to: "__unatype__.Date" = None,
    ) -> "betterproto_lib_google_protobuf.Empty":

        request = RefreshReportRequest()
        request.billing_context = billing_context
        request.report_id = report_id
        if extend_to is not None:
            request.extend_to = extend_to

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/RefreshReport",
            request,
            betterproto_lib_google_protobuf.Empty,
        )

    async def validate_geometry(
        self, *, billing_context: str = "", poi_collection_reference: str = ""
    ) -> "betterproto_lib_google_protobuf.Empty":

        request = ValidateGeometryRequest()
        request.billing_context = billing_context
        request.poi_collection_reference = poi_collection_reference

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/ValidateGeometry",
            request,
            betterproto_lib_google_protobuf.Empty,
        )

    async def list_draft_reports(self) -> "ListDraftReportsResponse":

        request = betterproto_lib_google_protobuf.Empty()

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/ListDraftReports",
            request,
            ListDraftReportsResponse,
        )

    async def get_draft_report(self, *, report_id: str = "") -> "DraftReport":

        request = DraftReportIdentifier()
        request.report_id = report_id

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/GetDraftReport", request, DraftReport
        )

    async def store_draft_report(
        self, *, report_id: str = "", info: str = "", details: str = ""
    ) -> "betterproto_lib_google_protobuf.Empty":

        request = DraftReport()
        request.report_id = report_id
        request.info = info
        request.details = details

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/StoreDraftReport",
            request,
            betterproto_lib_google_protobuf.Empty,
        )

    async def delete_draft_report(
        self, *, report_id: str = ""
    ) -> "betterproto_lib_google_protobuf.Empty":

        request = DraftReportIdentifier()
        request.report_id = report_id

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/DeleteDraftReport",
            request,
            betterproto_lib_google_protobuf.Empty,
        )


class PoiCollectionServiceStub(betterproto.ServiceStub):
    async def create_new_collection(
        self, *, billing_context: str = "", region: "Region" = None, name: str = ""
    ) -> "CreateNewCollectionResponse":

        request = CreateNewCollectionRequest()
        request.billing_context = billing_context
        request.region = region
        request.name = name

        return await self._unary_unary(
            "/unacast.byo.v1.PoiCollectionService/CreateNewCollection",
            request,
            CreateNewCollectionResponse,
        )

    async def add_pois_based_on_geometry(
        self,
        *,
        billing_context: str = "",
        collection_id: str = "",
        pois: Optional[List["NewBasedOnGeometry"]] = None,
    ) -> "AddPoisResponse":
        pois = pois or []

        request = AddPoisBasedOnGeometryRequest()
        request.billing_context = billing_context
        request.collection_id = collection_id
        if pois is not None:
            request.pois = pois

        return await self._unary_unary(
            "/unacast.byo.v1.PoiCollectionService/AddPoisBasedOnGeometry",
            request,
            AddPoisResponse,
        )

    async def add_pois_based_on_address(
        self,
        *,
        billing_context: str = "",
        collection_id: str = "",
        addresses: Optional[List["Address"]] = None,
    ) -> "AddAddressResponse":
        addresses = addresses or []

        request = AddPoisBasedOnAddressRequest()
        request.billing_context = billing_context
        request.collection_id = collection_id
        if addresses is not None:
            request.addresses = addresses

        return await self._unary_unary(
            "/unacast.byo.v1.PoiCollectionService/AddPoisBasedOnAddress",
            request,
            AddAddressResponse,
        )

    async def update_poi(
        self,
        *,
        billing_context: str = "",
        collection_id: str = "",
        poi_id: str = "",
        name: str = "",
        geometry: "PoiGeometry" = None,
    ) -> "Nothing":

        request = UpdatePoiRequest()
        request.billing_context = billing_context
        request.collection_id = collection_id
        request.poi_id = poi_id
        request.name = name
        if geometry is not None:
            request.geometry = geometry

        return await self._unary_unary(
            "/unacast.byo.v1.PoiCollectionService/UpdatePoi", request, Nothing
        )

    async def remove_poi(
        self, *, billing_context: str = "", collection_id: str = "", poi_id: str = ""
    ) -> "Nothing":

        request = RemovePoiRequest()
        request.billing_context = billing_context
        request.collection_id = collection_id
        request.poi_id = poi_id

        return await self._unary_unary(
            "/unacast.byo.v1.PoiCollectionService/RemovePoi", request, Nothing
        )

    async def get_collections_based_on_billing_context(
        self, *, billing_context: str = ""
    ) -> "GetCollectionResponse":

        request = GetCollectionRequest()
        request.billing_context = billing_context

        return await self._unary_unary(
            "/unacast.byo.v1.PoiCollectionService/GetCollectionsBasedOnBillingContext",
            request,
            GetCollectionResponse,
        )

    async def get_poi_collection(self) -> "GetPoiCollectionResponse":

        request = GetPoiCollectionRequest()

        return await self._unary_unary(
            "/unacast.byo.v1.PoiCollectionService/GetPOICollection",
            request,
            GetPoiCollectionResponse,
        )

    async def get_poi_item(self) -> "PoiItem":

        request = GetPoiItemRequest()

        return await self._unary_unary(
            "/unacast.byo.v1.PoiCollectionService/GetPOIItem", request, PoiItem
        )

    async def publish_collection_version(
        self, *, billing_context: str = "", collection_id: str = ""
    ) -> "PublishCollectionVersionResponse":

        request = PublishCollectionVersionRequest()
        request.billing_context = billing_context
        request.collection_id = collection_id

        return await self._unary_unary(
            "/unacast.byo.v1.PoiCollectionService/PublishCollectionVersion",
            request,
            PublishCollectionVersionResponse,
        )

    async def delete_collection(
        self, *, billing_context: str = "", collection_id: str = ""
    ) -> "Nothing":

        request = DeleteCollectionRequest()
        request.billing_context = billing_context
        request.collection_id = collection_id

        return await self._unary_unary(
            "/unacast.byo.v1.PoiCollectionService/DeleteCollection", request, Nothing
        )

    async def collection_as_geo_json(self) -> "CollectionAsGeoJsonResponse":

        request = CollectionAsGeoJsonRequest()

        return await self._unary_unary(
            "/unacast.byo.v1.PoiCollectionService/CollectionAsGeoJSON",
            request,
            CollectionAsGeoJsonResponse,
        )

    async def validate_geometry_file(
        self,
        *,
        storage: "__v2_access__.RegisterStorageAccessExternalResourceRequest" = None,
        filename: str = "",
    ) -> "ValidateGeometryFileResponse":

        request = ValidateGeometryFileRequest()
        if storage is not None:
            request.storage = storage
        request.filename = filename

        return await self._unary_unary(
            "/unacast.byo.v1.PoiCollectionService/ValidateGeometryFile",
            request,
            ValidateGeometryFileResponse,
        )


from ... import unatype as __unatype__
from ...v2 import access as __v2_access__
from ...v2 import metric as __v2_metric__
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
