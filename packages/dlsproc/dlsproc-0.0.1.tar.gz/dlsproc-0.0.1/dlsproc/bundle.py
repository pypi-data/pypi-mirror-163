# AUTOGENERATED! DO NOT EDIT! File to edit: 20_bundle.ipynb (unless otherwise specified).

__all__ = ['read_zip', 'read_deleted_zip', 'read_zips_directory']

# Cell
import pathlib
import zipfile

import pandas as pd
from IPython.display import display

import dlsproc.structure
import dlsproc.xml

# Cell
def read_zip(
    input_file: str | pathlib.Path, concatenate: bool = False, return_filenames: bool = False
) -> list | pd.DataFrame | tuple[list, list] | tuple[pd.DataFrame, list]:
    """
    Reads and parses an XML file into a `pd.DataFrame`.

    **Parameters**

    - input_file: str or Path

        Input file.

    - concatenate: bool

        Whether or not to concatenate all the files in a single `pd.DataFrame`.

    - return_filenames: bool

        Whether or not names of the files (read) within the zip are returned.

    **Returns**

    - out: pd.DataFrame

        A Pandas DataFrame with XML data.

    """

    dfs = []

    # zip file is opened
    with zipfile.ZipFile(input_file) as zip_file:

        # for the sake of convenience
        filenames = zip_file.namelist()

        # every file within it...
        for name in filenames:

            # ...is opened...
            with zip_file.open(name) as f:

                # ...and processed
                dfs.append(dlsproc.xml.to_curated_df(f))

    if concatenate:

        dfs = pd.concat(dfs, keys=filenames, names=['file name', 'entry'])

    if return_filenames:

        return dfs, filenames

    else:

        return dfs

# Cell
def read_deleted_zip(input_file: str | pathlib.Path) -> pd.Series:
    """
    Reads and parses an XML file into a `pd.DataFrame`.

    **Parameters**

    - input_file: str or Path

        Input file.

    **Returns**

    - out: pd.Series

        A Pandas Series with XML data.

    """

    series = []

    # zip file is opened
    with zipfile.ZipFile(input_file) as zip_file:

        # for the sake of convenience
        filenames = zip_file.namelist()

        # every file within it...
        for name in filenames:

            # ...is opened...
            with zip_file.open(name) as f:

                # ...and processed
                series.append(dlsproc.xml.deleted_to_series(f))

    return pd.concat(series, keys=filenames, names=['file name', 'id'])
    # return series

# Cell
def read_zips_directory(input_directory: str | pathlib.Path, concatenate: bool = False) -> list | pd.DataFrame:
    """
    Reads and parses an XML file into a `pd.DataFrame`.

    **Parameters**

    - input_directory: str or Path

        Input directory.

    - concatenate: bool

        Whether or not to concatenate all the files in a single `pd.DataFrame`.

    **Returns**

    - out: pd.DataFrame

        A Pandas DataFrame with XML data.

    """

    res = []

    filenames = []

    for f in input_directory.glob('*.zip'):

        res.append(read_zip(f, concatenate))

        filenames.append(f.name)

    if concatenate:

        # CAVEAT: the `names` of the index in the first zip file are used (and extended)
        res = pd.concat(res, keys=filenames, names=['zip'] + res[0].index.names)

    return res