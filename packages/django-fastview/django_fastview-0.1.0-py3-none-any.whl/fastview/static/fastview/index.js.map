{"version":3,"file":"index.js","mappings":"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","sources":["webpack://django_fastview/./static_src/formset/index.js","webpack://django_fastview/./static_src/index.js"],"sourcesContent":["/**\n * Formset management\n */\n\nconst defaultDataFormset = 'fastview-formset';\nconst defaultDataForm = 'fastview-formset-form';\nconst defaultDataTemplate = 'fastview-formset-template';\nconst defaultDataPk = 'fastview-formset-pk';\n\nclass Form {\n  /**\n   * Track forms within a formset\n   */\n  constructor(formset, rootEl, prefix) {\n    this.formset = formset;\n    this.rootEl = rootEl;\n    this.prefix = prefix;\n\n    // Set a flag so CSS can change its layout\n    this.rootEl.classList.add(\"js-enabled\");\n\n    this.deleteEl = this.getDeleteEl();\n    this.deleteCon = this.getDeleteCon();\n    this.render();\n  }\n\n  isExtra(fieldDefaults, pkName) {\n    /**\n     * Check if this is an extra form which can be removed on page load\n     *\n     * Extra forms have the same values as the template, and have no ID\n     */\n\n    // See if all field elements are empty (default)\n    const fields = Array.from(this.rootEl.querySelectorAll('input, select, textarea'));\n    const hasContent = fields.some(\n      fieldEl => {\n        // Return true if the field has a non-default value\n        const fieldName = fieldEl.name.replace(`${this.prefix}-`, '');\n        if (fieldName == pkName && fieldEl.value) {\n          // PK is set\n          return true;\n        }\n        if (fieldName in fieldDefaults && fieldEl.value == fieldDefaults[fieldName]) {\n          // Field is known and value is default\n          return false;\n        };\n        // Unexpected value\n        return true;\n      }\n    );\n    // We're checking if it's empty\n    return !hasContent;\n  }\n\n  getDeleteEl() {\n    let checkbox = this.rootEl.querySelector(`[name=\"${this.prefix}-DELETE\"]`);\n    if (!checkbox) {\n      return;\n    }\n\n    checkbox.onchange = () => {\n      if (checkbox.checked) {\n        this.deleted();\n      } else {\n        this.undeleted();\n      }\n    };\n    return checkbox\n  }\n\n  getDeleteCon() {\n    if (!this.deleteEl) {\n      return;\n    }\n    return this.deleteEl.parentNode;\n  }\n\n  get isDeleted() {\n    return this.deleteEl.checked;\n  }\n\n  deleted() {\n    /**\n     * Notify the formset that the form has been deleted\n     */\n    this.formset.deletedForm(this);\n  }\n\n  undeleted() {\n    /**\n     * Notify the formset that the form has been added\n     */\n    this.formset.addedForm(this);\n  }\n\n  formsetChanged() {\n    this.render();\n  }\n\n  render() {\n    /**\n     * Render the form whenever there is a change to delete state\n     */\n    if (!this.deleteCon) {\n      return;\n    }\n\n    // Update root style for CSS\n    this.rootEl.classList.toggle(\"deleted\", this.isDeleted);\n\n    // Show or hide the delete button\n    if (this.formset.canDelete) {\n      this.deleteCon.style.removeProperty('display');\n\n    } else {\n      this.deleteCon.style.setProperty('display', 'none');\n    }\n  }\n}\n\nexport class Formset {\n  /**\n   * Manage a formset\n   */\n\n  dataForm = defaultDataForm;\n  dataTemplate = defaultDataTemplate;\n  dataPk = defaultDataPk;\n  formClass = Form;\n\n  constructor(rootEl, prefix) {\n    this.rootEl = rootEl;\n    this.prefix = prefix;\n\n    // Find management form\n    this.totalFormsEl = document.getElementById(`id_${prefix}-TOTAL_FORMS`);\n    this.initialFormsEl = document.getElementById(`id_${prefix}-INITIAL_FORMS`);\n    this.numFormsMin = parseInt(document.getElementById(`id_${prefix}-MIN_NUM_FORMS`).value, 10);\n    this.numFormsMax = parseInt(document.getElementById(`id_${prefix}-MAX_NUM_FORMS`).value, 10);\n\n    // Collect other metadata\n    const pkName = rootEl.getAttribute(`data-${this.dataPk}`);\n\n    // Find template form\n    this.template = rootEl.querySelector(`[data-${this.dataTemplate}]`);\n    this.templatePrefix = this.template.getAttribute(`data-${this.dataTemplate}`);\n\n    // Find existing forms; reverse them so we can discard empty from the end\n    const formEls = Array.from(\n      rootEl.querySelectorAll(`[data-${this.dataForm}]`)\n    ).reverse();\n\n    // Update total number of forms - this may have changed if the page wsa refreshed\n    this.numForms = formEls.length;\n\n    // We're removing if we have empty extra forms\n    const initialForms = parseInt(this.initialFormsEl.value, 10);\n    let removing = (this.numForms > initialForms);\n\n    // Build list of template fields so we can see which values have changed\n    const fieldDefaults = {};\n    if (removing) {\n      Array.from(this.template.querySelectorAll('input, select, textarea')).forEach(\n        fieldEl => {\n          const fieldName = fieldEl.name.replace(`${this.templatePrefix}-`, '');\n          fieldDefaults[fieldName] = fieldEl.value;\n        }\n      );\n    }\n\n    // Build list of form class instances for active forms\n    this.forms = []\n    formEls.forEach(formEl => {\n      let formPrefix = formEl.getAttribute(`data-${this.dataForm}`);\n      let form = new this.formClass(this, formEl, formPrefix);\n\n      // Try to remove extra empty forms from the end\n      if (removing) {\n        if (form.isExtra(fieldDefaults, pkName)) {\n          formEl.remove();\n          this.numForms -= 1;\n\n          formEl.dispatchEvent(\n            new CustomEvent(\n              'fastview-formset-destroyForm',\n              {bubbles: true, detail: {formset: this, form: form}},\n            )\n          );\n          return;\n        }\n      }\n\n      // Keep\n      this.forms.push(form);\n    });\n    this.forms.reverse();\n\n    // Find add button\n    this.addEl = this.getAddEl();\n    this.addCon = this.getAddCon();\n\n    // Re-render this and all forms\n    this.render();\n  }\n\n  getAddEl() {\n    let button = document.createElement('button');\n    button.innerHTML = 'Add';\n    button.type = 'button';\n    button.className = 'fastview-add';\n    this.rootEl.appendChild(button);\n    button.onclick = () => {\n      this.addForm();\n    }\n    return button;\n  }\n\n  getAddCon() {\n    return this.addEl;\n  }\n\n  addForm() {\n    /**\n     * Create and insert a new form, and let all forms know the formset has changed\n     */\n    // Get new form ID\n    let id = this.nextId;\n\n    // Create and insert\n    let formRoot = this.createForm(id);\n    let newForm = this.insertForm(id, formRoot);\n\n    // Notify handlers\n    this.addedForm(newForm);\n\n    formRoot.dispatchEvent(\n      new CustomEvent(\n        'fastview-formset-createForm',\n        {bubbles: true, detail: {formset: this, form: newForm}},\n      )\n    );\n  }\n\n  render() {\n    /**\n     * Re-render formset and forms\n     */\n    this.forms.forEach(form => {\n      form.formsetChanged();\n    });\n\n    if (this.canAdd) {\n      this.addCon.style.removeProperty('display');\n    } else {\n      this.addCon.style.setProperty('display', 'none');\n    }\n  }\n\n  get numForms() {\n    return parseInt(this.totalFormsEl.value, 10)\n  }\n\n  set numForms(value) {\n    this.totalFormsEl.value = value;\n  }\n\n  get nextId() {\n    // Forms are 0-indexed, so last ID is num-1\n    return this.numForms;\n  }\n\n  createForm(id) {\n    /**\n     * Create a new form\n     */\n    // Clone template, replacing __prefix__\n    let template = this.template.innerHTML;\n    let formHtml = template.replace(/__prefix__/g, id);\n    let formRoot = this.template.cloneNode();\n\n    formRoot.classList.add('added');\n    formRoot.removeAttribute(\"style\");\n    formRoot.innerHTML = formHtml;\n\n    return formRoot\n  }\n\n  insertForm(id, formRoot) {\n    /**\n     * Insert the new form into the formset\n     */\n    // Add to the end of the existing forms, or after the template if no forms yet\n    let lastForm = this.template;\n    if (this.forms.length > 0) {\n      lastForm = this.forms[this.forms.length - 1].rootEl;\n    }\n    lastForm.parentNode.insertBefore(formRoot, lastForm.nextSibling);\n\n    // Register form\n    let newPrefix = this.templatePrefix.replace('__prefix__', id)\n    let form = new Form(this, formRoot, newPrefix)\n    this.forms.push(form);\n    return form;\n  }\n\n  addedForm(form) {\n    /**\n     * Called when the form has been added to the formset\n     *\n     * Hides and shows the add button\n     */\n    this.numForms += 1\n    this.render();\n    form.rootEl.dispatchEvent(\n      new CustomEvent(\n        'fastview-formset-addForm',\n        {bubbles: true, detail: {formset: this, form: form}},\n      )\n    );\n  }\n\n  deletedForm(form) {\n    form.rootEl.dispatchEvent(\n      new CustomEvent(\n        'fastview-formset-deleteForm',\n         {bubbles: true, detail: {formset: this, form: form}},\n      )\n    );\n    this.numForms -= 1\n    this.render();\n  }\n\n  get canAdd() {\n    /**\n     * Can add if the limit has not been reached\n     */\n    return this.numForms < this.numFormsMax;\n  }\n\n  get canDelete() {\n    /**\n     * Can delete if there are more than the minimum number\n     */\n    return this.numForms > this.numFormsMin;\n  }\n}\n\nexport function formsets(\n  dataFormset = defaultDataFormset,\n  formsetClass = Formset,\n) {\n  /**\n   * Initialise formsets with the data attribute matching dataFormset\n   */\n  let rootEls = document.querySelectorAll(`[data-${dataFormset}]`);\n  rootEls.forEach(rootEl => {\n    let prefix = rootEl.getAttribute(`data-${dataFormset}`);\n    new formsetClass(rootEl, prefix);\n  });\n}\n","import { formsets } from './formset/index.js';\nimport { listView } from './list/index.js';\n\ndocument.addEventListener('DOMContentLoaded', (event) => {\n  formsets();\n  listView();\n})\n"],"names":["defaultDataFormset","Form","formset","rootEl","prefix","this","classList","add","deleteEl","getDeleteEl","deleteCon","getDeleteCon","render","fieldDefaults","pkName","Array","from","querySelectorAll","some","fieldEl","fieldName","name","replace","value","checkbox","querySelector","onchange","checked","deleted","undeleted","parentNode","deletedForm","addedForm","toggle","isDeleted","canDelete","style","removeProperty","setProperty","Formset","totalFormsEl","document","getElementById","initialFormsEl","numFormsMin","parseInt","numFormsMax","getAttribute","dataPk","template","dataTemplate","templatePrefix","formEls","dataForm","reverse","numForms","length","initialForms","removing","forEach","forms","formEl","formPrefix","form","formClass","isExtra","remove","dispatchEvent","CustomEvent","bubbles","detail","push","addEl","getAddEl","addCon","getAddCon","button","createElement","innerHTML","type","className","appendChild","onclick","addForm","id","nextId","formRoot","createForm","newForm","insertForm","formsetChanged","canAdd","formHtml","cloneNode","removeAttribute","lastForm","insertBefore","nextSibling","newPrefix","addEventListener","event","dataFormset","formsetClass","formsets"],"sourceRoot":""}