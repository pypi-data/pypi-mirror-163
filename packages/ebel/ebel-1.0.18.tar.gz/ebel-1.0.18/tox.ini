[tox]
envlist =
    # Delete previous coverage reports
    coverage-clean

    # Check the MANIFEST to make sure all files are accounted for
    manifest

    # flake8 checks that PEP8 style guidelines are followed
    flake8

    # Make sure all the documentation files are in order
    docs

    # Runs the tests and reports how much of the base code is covered
    py
    coverage-report

[testenv]
commands = coverage run -p -m pytest
deps=
    coverage
    pytest

[testenv:coverage-clean]
deps = coverage
skip_install = true
commands = coverage erase

[testenv:coverage-report]
deps = coverage
skip_install = true
commands =
    coverage combine
    coverage report

[testenv:manifest]
deps = check-manifest
skip_install = true
commands = check-manifest

[testenv:flake8:base]
skip_install = true
deps =
    flake8
    flake8-colors
    flake8-docstrings
commands =
    flake8 {posargs:ebel/ tests/ setup.py}

[testenv:flake8]
deps = {[testenv:flake8:base]deps}
commands =
    flake8 ebel/ setup.py

[testenv:docs]
description = invoke sphinx-build to build the HTML docs
changedir = docs
whitelist_externals =
    /usr/bin/cp
    /usr/bin/mkdir
deps =
    sphinx
    sphinx_rtd_theme
    sphinx-click
    sphinx_autodoc_typehints
    numpydoc
    mistune==0.8.4
    sphinxcontrib-openapi

commands =
    mkdir -p {envdir}/ebel/web
    cp -r source {envtmpdir}/source
    cp -r ../ebel/web/openapi.yml {envdir}/ebel/web/openapi.yml
    sphinx-build -Q -b html -d {envtmpdir}/build/doctrees {envtmpdir}/source {envtmpdir}/build/html
    sphinx-build -Q -b coverage -d {envtmpdir}/build/doctrees {envtmpdir}/source {envtmpdir}/build/coverage

####################
# Deployment tools #
####################

[testenv:bumpversion]
commands = bumpversion {posargs}
skip_install = true
deps =
    bumpversion

[testenv:build]
basepython = python3
skip_install = true
deps =
    wheel
    setuptools
commands =
    python setup.py -q sdist bdist_wheel

[testenv:release]
basepython = python3
skip_install = true
deps =
    {[testenv:build]deps}
    twine
commands =
    {[testenv:build]commands}
    twine check dist/*
    twine upload --skip-existing dist/* --verbose

[testenv:finish]
basepython = python3
skip_install = true
whitelist_externals =
    /bin/git
    /usr/local/bin/git
deps =
    {[testenv:build]deps}
    {[testenv:release]deps}
    bumpversion
commands =
    bumpversion patch
    {[testenv:release]commands}