"""
This type stub file was generated by pyright.
"""

"""
General helpers required for `tqdm.std`.
"""
CUR_OS = ...
IS_WIN = ...
IS_NIX = ...
RE_ANSI = ...
class FormatReplace:
    """
    >>> a = FormatReplace('something')
    >>> "{:5d}".format(a)
    'something'
    """
    def __init__(self, replace=...) -> None:
        ...
    
    def __format__(self, _): # -> str:
        ...
    


class Comparable:
    """Assumes child has self._comparable attr/@property"""
    def __lt__(self, other) -> bool:
        ...
    
    def __le__(self, other) -> bool:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __ne__(self, other) -> bool:
        ...
    
    def __gt__(self, other) -> bool:
        ...
    
    def __ge__(self, other) -> bool:
        ...
    


class ObjectWrapper:
    def __getattr__(self, name): # -> Any:
        ...
    
    def __setattr__(self, name, value): # -> None:
        ...
    
    def wrapper_getattr(self, name): # -> Any:
        """Actual `self.getattr` rather than self._wrapped.getattr"""
        ...
    
    def wrapper_setattr(self, name, value): # -> None:
        """Actual `self.setattr` rather than self._wrapped.setattr"""
        ...
    
    def __init__(self, wrapped) -> None:
        """
        Thin wrapper around a given object
        """
        ...
    


class SimpleTextIOWrapper(ObjectWrapper):
    """
    Change only `.write()` of the wrapped object by encoding the passed
    value and passing the result to the wrapped object's `.write()` method.
    """
    def __init__(self, wrapped, encoding) -> None:
        ...
    
    def write(self, s): # -> Any:
        """
        Encode `s` and pass to the wrapped object's `.write()` method.
        """
        ...
    
    def __eq__(self, other) -> bool:
        ...
    


class DisableOnWriteError(ObjectWrapper):
    """
    Disable the given `tqdm_instance` upon `write()` or `flush()` errors.
    """
    @staticmethod
    def disable_on_exception(tqdm_instance, func): # -> (*args: Unknown, **kwargs: Unknown) -> Unknown:
        """
        Quietly set `tqdm_instance.miniters=inf` if `func` raises `errno=5`.
        """
        ...
    
    def __init__(self, wrapped, tqdm_instance) -> None:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    


class CallbackIOWrapper(ObjectWrapper):
    def __init__(self, callback, stream, method=...) -> None:
        """
        Wrap a given `file`-like object's `read()` or `write()` to report
        lengths to the given `callback`
        """
        ...
    


def disp_len(data): # -> int:
    """
    Returns the real on-screen length of a string which may contain
    ANSI control codes and wide chars.
    """
    ...

def disp_trim(data, length):
    """
    Trim a string which may contain ANSI control characters.
    """
    ...

