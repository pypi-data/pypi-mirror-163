{"version":3,"file":"51ef681b.js","mappings":";;AA2BA;;AAGA;AACA;AACA;;AAEA;AAGA;;AAEA;;;AAGA;;AAGA;AACA;;;;AAIA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA7CA;;ACmIA;AAEA;;;AAKA;;;;AAIA;;AATA;AAeA;;;AAUA;;AAIA;;AAIA;;AAIA;AACA;AAGA;;AAEA;;;AALA;;AAeA;;AAEA;;AAnFA;;;;AAyFA;;AAEA;AACA;;AAEA;;AAEA;;AAGA;;AAEA;AAEA;;;;AAKA;;;;AAIA;;;;AAIA;;;AAGA;;;AAGA;;AAGA;AAGA;;;AAGA;AAGA;;;AAGA;AAEA;AAEA;;;AAGA;AAGA;;;AAGA;;;AAKA;;AAEA;;;AAKA;;AAGA;;;AAKA;AAGA;;;AAGA;AAGA;;AAEA;AAEA;;AAGA;;;AAKA;AAGA;;;AAGA;AAGA;;AAEA;;;AA7CA;;;AAoDA;AACA;;;;;;;AAaA;;;AAIA;;;;AAQA;;;;;;;AAiBA;;;AAIA;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAjUA;;;ACPA;;;AAKA;;;;;;AAkBA;AACA;;;;AAIA;;;;;AAUA;;AAEA;;AAEA;;;;;;AAhDA;;;;;;;;;;;;;;;AAnBA","sources":["webpack://home-assistant-frontend/./src/layouts/hass-subpage.ts","webpack://home-assistant-frontend/./src/panels/config/system-health/ha-config-system-health.ts","webpack://home-assistant-frontend/./src/panels/config/system-health/integrations-card.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, eventOptions, property } from \"lit/decorators\";\nimport { restoreScroll } from \"../common/decorators/restore-scroll\";\nimport \"../components/ha-icon-button-arrow-prev\";\nimport \"../components/ha-menu-button\";\nimport { HomeAssistant } from \"../types\";\n\n@customElement(\"hass-subpage\")\nclass HassSubpage extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public header?: string;\n\n  @property({ type: Boolean, attribute: \"main-page\" }) public mainPage = false;\n\n  @property({ type: String, attribute: \"back-path\" }) public backPath?: string;\n\n  @property({ type: Boolean, reflect: true }) public narrow = false;\n\n  @property({ type: Boolean }) public supervisor = false;\n\n  // @ts-ignore\n  @restoreScroll(\".content\") private _savedScrollPos?: number;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"toolbar\">\n        ${this.mainPage || history.state?.root\n          ? html`\n              <ha-menu-button\n                .hassio=${this.supervisor}\n                .hass=${this.hass}\n                .narrow=${this.narrow}\n              ></ha-menu-button>\n            `\n          : this.backPath\n          ? html`\n              <a href=${this.backPath}>\n                <ha-icon-button-arrow-prev\n                  .hass=${this.hass}\n                ></ha-icon-button-arrow-prev>\n              </a>\n            `\n          : html`\n              <ha-icon-button-arrow-prev\n                .hass=${this.hass}\n                @click=${this._backTapped}\n              ></ha-icon-button-arrow-prev>\n            `}\n\n        <div class=\"main-title\">${this.header}</div>\n        <slot name=\"toolbar-icon\"></slot>\n      </div>\n      <div class=\"content\" @scroll=${this._saveScrollPos}><slot></slot></div>\n    `;\n  }\n\n  @eventOptions({ passive: true })\n  private _saveScrollPos(e: Event) {\n    this._savedScrollPos = (e.target as HTMLDivElement).scrollTop;\n  }\n\n  private _backTapped(): void {\n    history.back();\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n        height: 100%;\n        background-color: var(--primary-background-color);\n      }\n\n      :host([narrow]) {\n        width: 100%;\n        position: fixed;\n      }\n\n      .toolbar {\n        display: flex;\n        align-items: center;\n        font-size: 20px;\n        height: var(--header-height);\n        padding: 0 16px;\n        pointer-events: none;\n        background-color: var(--app-header-background-color);\n        font-weight: 400;\n        color: var(--app-header-text-color, white);\n        border-bottom: var(--app-header-border-bottom, none);\n        box-sizing: border-box;\n      }\n      .toolbar a {\n        color: var(--sidebar-text-color);\n        text-decoration: none;\n      }\n\n      ha-menu-button,\n      ha-icon-button-arrow-prev,\n      ::slotted([slot=\"toolbar-icon\"]) {\n        pointer-events: auto;\n        color: var(--sidebar-icon-color);\n      }\n\n      .main-title {\n        margin: 0 0 0 24px;\n        line-height: 20px;\n        flex-grow: 1;\n      }\n\n      .content {\n        position: relative;\n        width: 100%;\n        height: calc(100% - 1px - var(--header-height));\n        overflow-y: auto;\n        overflow: auto;\n        -webkit-overflow-scrolling: touch;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hass-subpage\": HassSubpage;\n  }\n}\n","import { ActionDetail } from \"@material/mwc-list\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { mdiContentCopy } from \"@mdi/js\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket/dist/types\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport { formatDateTime } from \"../../../common/datetime/format_date_time\";\nimport { copyToClipboard } from \"../../../common/util/copy-clipboard\";\nimport { subscribePollingCollection } from \"../../../common/util/subscribe-polling\";\nimport \"../../../components/ha-alert\";\nimport \"../../../components/ha-button-menu\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-circular-progress\";\nimport \"../../../components/ha-metric\";\nimport { fetchHassioStats, HassioStats } from \"../../../data/hassio/common\";\nimport {\n  fetchHassioResolution,\n  HassioResolution,\n} from \"../../../data/hassio/resolution\";\nimport { domainToName } from \"../../../data/integration\";\nimport {\n  subscribeSystemHealthInfo,\n  SystemCheckValueObject,\n  SystemHealthInfo,\n} from \"../../../data/system_health\";\nimport { showAlertDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/hass-subpage\";\nimport { SubscribeMixin } from \"../../../mixins/subscribe-mixin\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\nimport { showToast } from \"../../../util/toast\";\nimport \"./integrations-card\";\n\nconst sortKeys = (a: string, b: string) => {\n  if (a === \"homeassistant\") {\n    return -1;\n  }\n  if (b === \"homeassistant\") {\n    return 1;\n  }\n  if (a < b) {\n    return -1;\n  }\n  if (b < a) {\n    return 1;\n  }\n  return 0;\n};\n\nexport const UNSUPPORTED_REASON_URL = {};\nexport const UNHEALTHY_REASON_URL = {\n  privileged: \"/more-info/unsupported/privileged\",\n};\n\n@customElement(\"ha-config-system-health\")\nclass HaConfigSystemHealth extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @state() private _info?: SystemHealthInfo;\n\n  @state() private _supervisorStats?: HassioStats;\n\n  @state() private _resolutionInfo?: HassioResolution;\n\n  @state() private _coreStats?: HassioStats;\n\n  @state() private _error?: { code: string; message: string };\n\n  public hassSubscribe(): Array<UnsubscribeFunc | Promise<UnsubscribeFunc>> {\n    const subs: Array<UnsubscribeFunc | Promise<UnsubscribeFunc>> = [];\n    if (isComponentLoaded(this.hass, \"system_health\")) {\n      subs.push(\n        subscribeSystemHealthInfo(this.hass!, (info) => {\n          this._info = info;\n        })\n      );\n    }\n\n    if (isComponentLoaded(this.hass, \"hassio\")) {\n      subs.push(\n        subscribePollingCollection(\n          this.hass,\n          async () => {\n            this._supervisorStats = await fetchHassioStats(\n              this.hass,\n              \"supervisor\"\n            );\n            this._coreStats = await fetchHassioStats(this.hass, \"core\");\n          },\n          10000\n        )\n      );\n      fetchHassioResolution(this.hass).then((data) => {\n        this._resolutionInfo = data;\n      });\n    }\n\n    return subs;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n\n    this.hass!.loadBackendTranslation(\"system_health\");\n  }\n\n  protected render(): TemplateResult {\n    const sections: TemplateResult[] = [];\n\n    if (!this._info) {\n      sections.push(\n        html`\n          <div class=\"loading-container\">\n            <ha-circular-progress active></ha-circular-progress>\n          </div>\n        `\n      );\n    } else {\n      const domains = Object.keys(this._info).sort(sortKeys);\n      for (const domain of domains) {\n        const domainInfo = this._info[domain];\n        const keys: TemplateResult[] = [];\n\n        for (const key of Object.keys(domainInfo.info)) {\n          let value: unknown;\n\n          if (\n            domainInfo.info[key] &&\n            typeof domainInfo.info[key] === \"object\"\n          ) {\n            const info = domainInfo.info[key] as SystemCheckValueObject;\n\n            if (info.type === \"pending\") {\n              value = html`\n                <ha-circular-progress active size=\"tiny\"></ha-circular-progress>\n              `;\n            } else if (info.type === \"failed\") {\n              value = html`\n                <span class=\"error\">${info.error}</span>${!info.more_info\n                  ? \"\"\n                  : html`\n                      â€“\n                      <a\n                        href=${info.more_info}\n                        target=\"_blank\"\n                        rel=\"noreferrer noopener\"\n                      >\n                        ${this.hass.localize(\n                          \"ui.panel.config.info.system_health.more_info\"\n                        )}\n                      </a>\n                    `}\n              `;\n            } else if (info.type === \"date\") {\n              value = formatDateTime(new Date(info.value), this.hass.locale);\n            }\n          } else {\n            value = domainInfo.info[key];\n          }\n\n          keys.push(html`\n            <tr>\n              <td>\n                ${this.hass.localize(\n                  `component.${domain}.system_health.info.${key}`\n                ) || key}\n              </td>\n              <td>${value}</td>\n            </tr>\n          `);\n        }\n        if (domain !== \"homeassistant\") {\n          sections.push(\n            html`\n              <div class=\"card-header\">\n                <h3>${domainToName(this.hass.localize, domain)}</h3>\n                ${!domainInfo.manage_url\n                  ? \"\"\n                  : html`\n                      <a class=\"manage\" href=${domainInfo.manage_url}>\n                        <mwc-button>\n                          ${this.hass.localize(\n                            \"ui.panel.config.info.system_health.manage\"\n                          )}\n                        </mwc-button>\n                      </a>\n                    `}\n              </div>\n            `\n          );\n        }\n        sections.push(html`\n          <table>\n            ${keys}\n          </table>\n        `);\n      }\n    }\n\n    return html`\n      <hass-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        back-path=\"/config/system\"\n        .header=${this.hass.localize(\"ui.panel.config.system_health.caption\")}\n      >\n        ${this._error\n          ? html`\n              <ha-alert alert-type=\"error\"\n                >${this._error.message || this._error.code}</ha-alert\n              >\n            `\n          : \"\"}\n        ${this._info\n          ? html`\n              <ha-button-menu\n                corner=\"BOTTOM_START\"\n                slot=\"toolbar-icon\"\n                @action=${this._copyInfo}\n              >\n                <ha-icon-button\n                  slot=\"trigger\"\n                  .label=${this.hass.localize(\"ui.panel.config.info.copy_menu\")}\n                  .path=${mdiContentCopy}\n                ></ha-icon-button>\n                <mwc-list-item>\n                  ${this.hass.localize(\"ui.panel.config.info.copy_raw\")}\n                </mwc-list-item>\n                <mwc-list-item>\n                  ${this.hass.localize(\"ui.panel.config.info.copy_github\")}\n                </mwc-list-item>\n              </ha-button-menu>\n            `\n          : \"\"}\n        <div class=\"content\">\n          ${this._resolutionInfo\n            ? html`${this._resolutionInfo.unhealthy.length\n                ? html`<ha-alert alert-type=\"error\">\n                    ${this.hass.localize(\"ui.dialogs.unhealthy.title\")}\n                    <mwc-button\n                      slot=\"action\"\n                      .label=${this.hass.localize(\n                        \"ui.panel.config.common.learn_more\"\n                      )}\n                      @click=${this._unhealthyDialog}\n                    >\n                    </mwc-button\n                  ></ha-alert>`\n                : \"\"}\n              ${this._resolutionInfo.unsupported.length\n                ? html`<ha-alert alert-type=\"warning\">\n                    ${this.hass.localize(\"ui.dialogs.unsupported.title\")}\n                    <mwc-button\n                      slot=\"action\"\n                      .label=${this.hass.localize(\n                        \"ui.panel.config.common.learn_more\"\n                      )}\n                      @click=${this._unsupportedDialog}\n                    >\n                    </mwc-button>\n                  </ha-alert>`\n                : \"\"} `\n            : \"\"}\n\n          <ha-card outlined>\n            <div class=\"card-content\">${sections}</div>\n          </ha-card>\n          ${!this._coreStats && !this._supervisorStats\n            ? \"\"\n            : html`\n                <ha-card outlined>\n                  <div class=\"card-content\">\n                    ${this._coreStats\n                      ? html`\n                          <h3>\n                            ${this.hass.localize(\n                              \"ui.panel.config.system_health.core_stats\"\n                            )}\n                          </h3>\n                          <ha-metric\n                            .heading=${this.hass.localize(\n                              \"ui.panel.config.system_health.cpu_usage\"\n                            )}\n                            .value=${this._coreStats.cpu_percent}\n                          ></ha-metric>\n                          <ha-metric\n                            .heading=${this.hass.localize(\n                              \"ui.panel.config.system_health.ram_usage\"\n                            )}\n                            .value=${this._coreStats.memory_percent}\n                          ></ha-metric>\n                        `\n                      : \"\"}\n                    ${this._supervisorStats\n                      ? html`\n                          <h3>\n                            ${this.hass.localize(\n                              \"ui.panel.config.system_health.supervisor_stats\"\n                            )}\n                          </h3>\n                          <ha-metric\n                            .heading=${this.hass.localize(\n                              \"ui.panel.config.system_health.cpu_usage\"\n                            )}\n                            .value=${this._supervisorStats.cpu_percent}\n                          ></ha-metric>\n                          <ha-metric\n                            .heading=${this.hass.localize(\n                              \"ui.panel.config.system_health.ram_usage\"\n                            )}\n                            .value=${this._supervisorStats.memory_percent}\n                          ></ha-metric>\n                        `\n                      : \"\"}\n                  </div>\n                </ha-card>\n              `}\n\n          <integrations-card\n            .hass=${this.hass}\n            .narrow=${this.narrow}\n          ></integrations-card>\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  private async _unsupportedDialog(): Promise<void> {\n    await showAlertDialog(this, {\n      title: this.hass.localize(\"ui.dialogs.unsupported.title\"),\n      text: html`${this.hass.localize(\"ui.dialogs.unsupported.description\")}\n        <br /><br />\n        <ul>\n          ${this._resolutionInfo!.unsupported.map(\n            (reason) => html`\n              <li>\n                <a\n                  href=${documentationUrl(\n                    this.hass,\n                    UNSUPPORTED_REASON_URL[reason] ||\n                      `/more-info/unsupported/${reason}`\n                  )}\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  ${this.hass.localize(\n                    `ui.dialogs.unsupported.reason.${reason}`\n                  ) || reason}\n                </a>\n              </li>\n            `\n          )}\n        </ul>`,\n    });\n  }\n\n  private async _unhealthyDialog(): Promise<void> {\n    await showAlertDialog(this, {\n      title: this.hass.localize(\"ui.dialogs.unhealthy.title\"),\n      text: html`${this.hass.localize(\"ui.dialogs.unhealthy.description\")}\n        <br /><br />\n        <ul>\n          ${this._resolutionInfo!.unhealthy.map(\n            (reason) => html`\n              <li>\n                <a\n                  href=${documentationUrl(\n                    this.hass,\n                    UNHEALTHY_REASON_URL[reason] ||\n                      `/more-info/unhealthy/${reason}`\n                  )}\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  ${this.hass.localize(\n                    `ui.dialogs.unhealthy.reason.${reason}`\n                  ) || reason}\n                </a>\n              </li>\n            `\n          )}\n        </ul>`,\n    });\n  }\n\n  private async _copyInfo(ev: CustomEvent<ActionDetail>): Promise<void> {\n    const github = ev.detail.index === 1;\n    let haContent: string | undefined;\n    const domainParts: string[] = [];\n\n    for (const domain of Object.keys(this._info!).sort(sortKeys)) {\n      const domainInfo = this._info![domain];\n      let first = true;\n      const parts = [\n        `${\n          github && domain !== \"homeassistant\"\n            ? `<details><summary>${domainToName(\n                this.hass.localize,\n                domain\n              )}</summary>\\n`\n            : \"\"\n        }`,\n      ];\n\n      for (const key of Object.keys(domainInfo.info)) {\n        let value: unknown;\n\n        if (typeof domainInfo.info[key] === \"object\") {\n          const info = domainInfo.info[key] as SystemCheckValueObject;\n\n          if (info.type === \"pending\") {\n            value = \"pending\";\n          } else if (info.type === \"failed\") {\n            value = `failed to load: ${info.error}`;\n          } else if (info.type === \"date\") {\n            value = formatDateTime(new Date(info.value), this.hass.locale);\n          }\n        } else {\n          value = domainInfo.info[key];\n        }\n        if (github && first) {\n          parts.push(`${key} | ${value}\\n-- | --`);\n          first = false;\n        } else {\n          parts.push(`${key}${github ? \" | \" : \": \"}${value}`);\n        }\n      }\n\n      if (domain === \"homeassistant\") {\n        haContent = parts.join(\"\\n\");\n      } else {\n        domainParts.push(parts.join(\"\\n\"));\n        if (github && domain !== \"homeassistant\") {\n          domainParts.push(\"</details>\");\n        }\n      }\n    }\n\n    await copyToClipboard(\n      `${github ? \"## \" : \"\"}System Health\\n${haContent}\\n\\n${domainParts.join(\n        \"\\n\\n\"\n      )}`\n    );\n\n    showToast(this, {\n      message: this.hass.localize(\"ui.common.copied_clipboard\"),\n    });\n  }\n\n  static styles: CSSResultGroup = css`\n    .content {\n      padding: 28px 20px 0;\n      max-width: 1040px;\n      margin: 0 auto;\n    }\n    integrations-card {\n      max-width: 600px;\n      display: block;\n      max-width: 600px;\n      margin: 0 auto;\n      margin-bottom: 24px;\n      margin-bottom: max(24px, env(safe-area-inset-bottom));\n    }\n    ha-card {\n      display: block;\n      max-width: 600px;\n      margin: 0 auto;\n      padding-bottom: 16px;\n      margin-bottom: 24px;\n    }\n    ha-alert {\n      display: block;\n      max-width: 500px;\n      margin: 0 auto;\n      margin-bottom: max(24px, env(safe-area-inset-bottom));\n    }\n    table {\n      width: 100%;\n    }\n\n    td:first-child {\n      width: 45%;\n    }\n\n    td:last-child {\n      direction: ltr;\n    }\n\n    .loading-container {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n\n    .card-header {\n      justify-content: space-between;\n      display: flex;\n      align-items: center;\n    }\n\n    .error {\n      color: var(--error-color);\n    }\n\n    a {\n      color: var(--primary-color);\n    }\n\n    a.manage {\n      text-decoration: none;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-system-health\": HaConfigSystemHealth;\n  }\n}\n","import \"@material/mwc-list/mwc-list\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-clickable-list-item\";\nimport {\n  domainToName,\n  fetchIntegrationManifests,\n  fetchIntegrationSetups,\n  IntegrationManifest,\n  IntegrationSetup,\n} from \"../../../data/integration\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { brandsUrl } from \"../../../util/brands-url\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\n\n@customElement(\"integrations-card\")\nclass IntegrationsCard extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @state() private _manifests?: {\n    [domain: string]: IntegrationManifest;\n  };\n\n  @state() private _setups?: IntegrationSetup[];\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    this._fetchManifests();\n    this._fetchSetups();\n  }\n\n  protected render(): TemplateResult {\n    if (!this._setups) {\n      return html``;\n    }\n\n    return html`\n      <ha-card\n        outlined\n        .header=${this.hass.localize(\n          \"ui.panel.config.system_health.integration_start_time\"\n        )}\n      >\n        <mwc-list>\n          ${this._setups?.map((setup) => {\n            const manifest = this._manifests && this._manifests[setup.domain];\n            const docLink = manifest\n              ? manifest.is_built_in\n                ? documentationUrl(\n                    this.hass,\n                    `/integrations/${manifest.domain}`\n                  )\n                : manifest.documentation\n              : \"\";\n\n            const setupSeconds = setup.seconds?.toFixed(2);\n            return html`\n              <ha-clickable-list-item\n                graphic=\"avatar\"\n                twoline\n                hasMeta\n                openNewTab\n                @click=${this._entryClicked}\n                href=${docLink}\n              >\n                <img\n                  loading=\"lazy\"\n                  src=${brandsUrl({\n                    domain: setup.domain,\n                    type: \"icon\",\n                    useFallback: true,\n                    darkOptimized: this.hass.themes?.darkMode,\n                  })}\n                  referrerpolicy=\"no-referrer\"\n                  slot=\"graphic\"\n                />\n                <span>\n                  ${domainToName(this.hass.localize, setup.domain, manifest)}\n                </span>\n                <span slot=\"secondary\">${setup.domain}</span>\n                <div slot=\"meta\">\n                  ${setupSeconds ? html`${setupSeconds} s` : \"\"}\n                </div>\n              </ha-clickable-list-item>\n            `;\n          })}\n        </mwc-list>\n      </ha-card>\n    `;\n  }\n\n  private async _fetchManifests() {\n    const manifests = {};\n    for (const manifest of await fetchIntegrationManifests(this.hass)) {\n      manifests[manifest.domain] = manifest;\n    }\n    this._manifests = manifests;\n  }\n\n  private async _fetchSetups() {\n    const setups = await fetchIntegrationSetups(this.hass);\n    this._setups = setups.sort((a, b) => {\n      if (a.seconds === b.seconds) {\n        return 0;\n      }\n      if (a.seconds === undefined) {\n        return 1;\n      }\n      if (b.seconds === undefined) {\n        return 1;\n      }\n      return b.seconds - a.seconds;\n    });\n  }\n\n  private _entryClicked(ev) {\n    ev.currentTarget.blur();\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-clickable-list-item {\n        --mdc-list-item-meta-size: 64px;\n        --mdc-typography-caption-font-size: 12px;\n      }\n      img {\n        display: block;\n        max-height: 40px;\n        max-width: 40px;\n      }\n      div[slot=\"meta\"] {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"integrations-card\": IntegrationsCard;\n  }\n}\n"],"names":[],"sourceRoot":""}