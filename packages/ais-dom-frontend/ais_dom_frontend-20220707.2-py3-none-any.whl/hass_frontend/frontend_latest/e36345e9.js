"use strict";(self.webpackChunkhome_assistant_frontend=self.webpackChunkhome_assistant_frontend||[]).push([[55424],{92306:(t,e,n)=>{n.d(e,{v:()=>s});const s=(t,e)=>{const n={};for(const s of t){const t=e(s);t in n?n[t].push(s):n[t]=[s]}return n}},11950:(t,e,n)=>{n.d(e,{l:()=>s});const s=async(t,e)=>new Promise((n=>{const s=e(t,(t=>{s(),n(t)}))}))},81582:(t,e,n)=>{n.d(e,{LZ:()=>s,pB:()=>i,SO:()=>r,iJ:()=>a,Nn:()=>o,Ny:()=>_,T0:()=>c});const s=32143==n.j?["migration_error","setup_error","setup_retry"]:null,i=(t,e)=>{const n={};return e&&(e.type&&(n.type_filter=e.type),e.domain&&(n.domain=e.domain)),t.callWS({type:"config_entries/get",...n})},r=(t,e,n)=>t.callWS({type:"config_entries/update",entry_id:e,...n}),a=(t,e)=>t.callApi("DELETE",`config/config_entries/entry/${e}`),o=(t,e)=>t.callApi("POST",`config/config_entries/entry/${e}/reload`),_=(t,e)=>t.callWS({type:"config_entries/disable",entry_id:e,disabled_by:"user"}),c=(t,e)=>t.callWS({type:"config_entries/disable",entry_id:e,disabled_by:null})},55424:(t,e,n)=>{n.a(t,(async t=>{n.d(e,{Bm:()=>b,o1:()=>v,iK:()=>w,rl:()=>W,P:()=>T,KU:()=>Z,xZ:()=>O,gy:()=>k,ZC:()=>j,_Z:()=>E,Jj:()=>C,UB:()=>M,jB:()=>D,gM:()=>L,yT:()=>N,_n:()=>B,vR:()=>K,vE:()=>A});var s=n(4535),i=n(59699),r=n(32182),a=n(79021),o=n(39244),_=n(27088),c=n(83008),u=n(70390),l=n(47538),y=n(97330),m=n(92306),d=n(11950),f=n(81582),g=n(74186),p=n(58763),h=t([p]);p=(h.then?await h:h)[0];const S=[],b=()=>({stat_energy_from:"",stat_cost:null,entity_energy_from:null,entity_energy_price:null,number_energy_price:null}),v=()=>({stat_energy_to:"",stat_compensation:null,entity_energy_to:null,entity_energy_price:null,number_energy_price:null}),w=()=>({type:"grid",flow_from:[],flow_to:[],cost_adjustment_day:0}),W=()=>({type:"solar",stat_energy_from:"",config_entry_solar_forecast:null}),T=()=>({type:"battery",stat_energy_from:"",stat_energy_to:""}),Z=()=>({type:"gas",stat_energy_from:"",stat_cost:null,entity_energy_from:null,entity_energy_price:null,number_energy_price:null}),O=t=>t.callWS({type:"energy/info"}),k=t=>t.callWS({type:"energy/validate"}),j=t=>t.callWS({type:"energy/get_prefs"}),E=async(t,e)=>{const n=t.callWS({type:"energy/save_prefs",...e});return I(t),n},P=async(t,e,n,s,i,r="hour")=>t.callWS({type:"energy/fossil_energy_consumption",start_time:e.toISOString(),end_time:null==i?void 0:i.toISOString(),energy_statistic_ids:n,co2_statistic_id:s,period:r}),C=t=>(0,m.v)(t.energy_sources,(t=>t.type)),I=t=>{S.forEach((e=>{const n=M(t,{key:e});n.clearPrefs(),n._active&&n.refresh()}))},M=(t,e={})=>{let n="_energy";if(e.key){if(!e.key.startsWith("energy_"))throw new Error("Key need to start with energy_");n=`_${e.key}`}if(t.connection[n])return t.connection[n];S.push(e.key);const m=(0,y._)(t.connection,n,(async()=>{if(m.prefs||(m.prefs=await j(t)),m._refreshTimeout&&clearTimeout(m._refreshTimeout),m._active&&(!m.end||m.end>new Date)){const t=new Date;t.getMinutes()>=20&&t.setHours(t.getHours()+1),t.setMinutes(20,0,0),m._refreshTimeout=window.setTimeout((()=>m.refresh()),t.getTime()-Date.now())}return(async(t,e,n,_,c)=>{const[u,l,y]=await Promise.all([(0,f.pB)(t,{domain:"co2signal"}),(0,d.l)(t.connection,g.LM),O(t)]),m=u.length?u[0]:void 0;let h;if(m)for(const e of l){if(e.config_entry_id!==m.entry_id)continue;const n=t.states[e.entity_id];if(n&&"%"===n.attributes.unit_of_measurement){h=n.entity_id;break}}const S=[],b=[];for(const t of e.energy_sources)if("solar"!==t.type)if("gas"!==t.type)if("battery"!==t.type){for(const e of t.flow_from){S.push(e.stat_energy_from),b.push(e.stat_energy_from),e.stat_cost&&b.push(e.stat_cost);const t=y.cost_sensors[e.stat_energy_from];t&&b.push(t)}for(const e of t.flow_to){b.push(e.stat_energy_to),e.stat_compensation&&b.push(e.stat_compensation);const t=y.cost_sensors[e.stat_energy_to];t&&b.push(t)}}else b.push(t.stat_energy_from),b.push(t.stat_energy_to);else{b.push(t.stat_energy_from),t.stat_cost&&b.push(t.stat_cost);const e=y.cost_sensors[t.stat_energy_from];e&&b.push(e)}else b.push(t.stat_energy_from);const v=(0,s.Z)(_||new Date,n),w=v>35?"month":v>2?"day":"hour",W=(0,i.Z)(n,-1),T=await(0,p.dL)(t,W,_,b,w);let Z,k,j,E,C;if(c){k=v>27&&v<32?(0,r.Z)(n,-1):(0,a.Z)(n,-1*(v+1));const e=(0,i.Z)(k,-1);j=(0,o.Z)(n,-1),Z=await(0,p.dL)(t,e,j,b,w)}void 0!==h&&(E=await P(t,n,S,h,_,v>35?"month":v>2?"day":"hour"),c&&(C=await P(t,k,S,h,j,v>35?"month":v>2?"day":"hour"))),Object.values(T).forEach((t=>{t.length&&new Date(t[0].start)>W&&t.unshift({...t[0],start:W.toISOString(),end:W.toISOString(),sum:0,state:0})}));const I=await(0,p.Py)(t,b),M={};return I.forEach((t=>{M[t.statistic_id]=t})),{start:n,end:_,startCompare:k,endCompare:j,info:y,prefs:e,stats:T,statsMetadata:M,statsCompare:Z,co2SignalConfigEntry:m,co2SignalEntity:h,fossilEnergyConsumption:E,fossilEnergyConsumptionCompare:C}})(t,m.prefs,m.start,m.end,m.compare)})),h=m.subscribe;m.subscribe=t=>{const e=h(t);return m._active++,()=>{m._active--,m._active<1&&(clearTimeout(m._refreshTimeout),m._refreshTimeout=void 0),e()}},m._active=0,m.prefs=e.prefs;const b=new Date;m.start=b.getHours()>0?(0,_.Z)():(0,c.Z)(),m.end=b.getHours()>0?(0,u.Z)():(0,l.Z)();const v=()=>{m._updatePeriodTimeout=window.setTimeout((()=>{m.start=(0,_.Z)(),m.end=(0,u.Z)(),v()}),(0,i.Z)((0,u.Z)(),1).getTime()-Date.now())};return v(),m.clearPrefs=()=>{m.prefs=void 0},m.setPeriod=(t,e)=>{var n;m.start=t,m.end=e,m.start.getTime()!==(0,_.Z)().getTime()||(null===(n=m.end)||void 0===n?void 0:n.getTime())!==(0,u.Z)().getTime()||m._updatePeriodTimeout?m._updatePeriodTimeout&&(clearTimeout(m._updatePeriodTimeout),m._updatePeriodTimeout=void 0):v()},m.setCompare=t=>{m.compare=t},m},D=t=>t.callWS({type:"energy/solar_forecast"}),L=["m³","ft³"],N=["kWh"],B=[...L,...N],K=(t,e)=>{for(const n of e.energy_sources){if("gas"!==n.type)continue;const e=t.states[n.stat_energy_from];if(e)return L.includes(e.attributes.unit_of_measurement)?"volume":"energy"}},A=(t,e,n={})=>{for(const s of e.energy_sources){if("gas"!==s.type)continue;const e=t.states[s.stat_energy_from];if(null!=e&&e.attributes.unit_of_measurement)return"Wh"===e.attributes.unit_of_measurement?"kWh":e.attributes.unit_of_measurement;const i=n[s.stat_energy_from];if(null!=i&&i.unit_of_measurement)return"Wh"===i.unit_of_measurement?"kWh":i.unit_of_measurement}}}))},74186:(t,e,n)=>{n.d(e,{eD:()=>o,Mw:()=>_,vA:()=>c,L3:()=>u,Nv:()=>l,z3:()=>y,hg:()=>m,LM:()=>f,_V:()=>g});var s=n(97330);if(32143==n.j)var i=n(91741);if(32143==n.j)var r=n(85415);var a=n(38346);const o=(t,e)=>e.find((e=>t.states[e.entity_id]&&"battery"===t.states[e.entity_id].attributes.device_class)),_=(t,e)=>e.find((e=>t.states[e.entity_id]&&"battery_charging"===t.states[e.entity_id].attributes.device_class)),c=(t,e)=>{if(e.name)return e.name;const n=t.states[e.entity_id];return n?(0,i.C)(n):e.entity_id},u=(t,e)=>t.callWS({type:"config/entity_registry/get",entity_id:e}),l=(t,e,n)=>t.callWS({type:"config/entity_registry/update",entity_id:e,...n}),y=(t,e)=>t.callWS({type:"config/entity_registry/remove",entity_id:e}),m=t=>t.sendMessagePromise({type:"config/entity_registry/list"}),d=(t,e)=>t.subscribeEvents((0,a.D)((()=>m(t).then((t=>e.setState(t,!0)))),500,!0),"entity_registry_updated"),f=(t,e)=>(0,s.B)("_entityRegistry",m,d,t,e),g=t=>t.sort(((t,e)=>(0,r.f)(t.name||"",e.name||"")))},58763:(t,e,n)=>{n.a(t,(async t=>{n.d(e,{iq:()=>u,vq:()=>l,MG:()=>y,iz:()=>m,Nu:()=>g,uR:()=>p,Py:()=>h,dL:()=>S,h_:()=>b,Cj:()=>v,hN:()=>w,Kj:()=>W,q6:()=>T,Nw:()=>Z,j2:()=>O,Kd:()=>k});var s=n(58831),i=n(29171),r=n(91741),a=t([i]);i=(a.then?await a:a)[0];const o=["climate","humidifier","water_heater"],_=["climate","humidifier","input_datetime","thermostat","water_heater"],c=["temperature","current_temperature","target_temp_low","target_temp_high","hvac_action","humidity","mode"],u=(t,e)=>!t.states[e]||_.includes((0,s.M)(e)),l=(t,e,n,s,i=!1,r,a=!0,o)=>{let _="history/period";return n&&(_+="/"+n.toISOString()),_+="?filter_entity_id="+e,s&&(_+="&end_time="+s.toISOString()),i&&(_+="&skip_initial_state"),void 0!==r&&(_+=`&significant_changes_only=${Number(r)}`),a&&(_+="&minimal_response"),o&&(_+="&no_attributes"),t.callApi("GET",_)},y=(t,e,n,s,i=!1,r,a=!0,o)=>t.callWS({type:"history/history_during_period",start_time:n.toISOString(),end_time:s.toISOString(),significant_changes_only:r||!1,include_start_time_state:!i,minimal_response:a,no_attributes:o||!1,entity_ids:e.split(",")}),m=(t,e,n,s)=>{const i={type:"history/history_during_period",start_time:e.toISOString(),end_time:n.toISOString(),minimal_response:!0,no_attributes:!s.map((e=>u(t,e))).reduce(((t,e)=>t||e),!1)};return 0!==s.length?t.callWS({...i,entity_ids:s}):t.callWS(i)},d=(t,e)=>t.state===e.state&&(!t.attributes||!e.attributes||c.every((n=>t.attributes[n]===e.attributes[n]))),f=t=>"unit_of_measurement"in t||"state_class"in t,g=(t,e,n)=>{const a={},_=[];if(!e)return{line:[],timeline:[]};Object.keys(e).forEach((o=>{const c=e[o];if(0===c.length)return;const u=o in t.states?t.states[o]:void 0,l=!u&&c.find((t=>t.a&&f(t.a)));let y;y=u&&f(u.attributes)?u.attributes.unit_of_measurement||" ":l?l.a.unit_of_measurement||" ":{climate:t.config.unit_system.temperature,counter:"#",humidifier:"%",input_number:"#",number:"#",water_heater:t.config.unit_system.temperature}[(0,s.M)(o)],y?y in a&&o in a[y]?a[y][o].push(...c):(y in a||(a[y]={}),a[y][o]=c):_.push(((t,e,n,s)=>{const a=[],o=s[0];for(const r of s)a.length>0&&r.s===a[a.length-1].state||a.push({state_localize:(0,i.c)(t,e,n,r.a||o.a,r.s),state:r.s,last_changed:1e3*(r.lc?r.lc:r.lu)});return{name:(0,r.a)(n,s[0].a),entity_id:n,data:a}})(n,t.locale,o,c))}));return{line:Object.keys(a).map((t=>((t,e)=>{const n=[];return Object.keys(e).forEach((t=>{const i=e[t],a=i[0],_=(0,s.M)(t),u=[];for(const t of i){let e;if(o.includes(_)){e={state:t.s,last_changed:1e3*t.lu,attributes:{}};for(const n of c)n in t.a&&(e.attributes[n]=t.a[n])}else e={state:t.s,last_changed:1e3*(t.lc?t.lc:t.lu),attributes:{}};u.length>1&&d(e,u[u.length-1])&&d(e,u[u.length-2])||u.push(e)}n.push({domain:_,name:(0,r.a)(t,a.a),entity_id:t,states:u})})),{unit:t,identifier:Object.keys(e).join(""),data:n}})(t,a[t]))),timeline:_}},p=(t,e)=>t.callWS({type:"history/list_statistic_ids",statistic_type:e}),h=(t,e)=>t.callWS({type:"recorder/get_statistics_metadata",statistic_ids:e}),S=(t,e,n,s,i="hour")=>t.callWS({type:"history/statistics_during_period",start_time:e.toISOString(),end_time:null==n?void 0:n.toISOString(),statistic_ids:s,period:i}),b=t=>t.callWS({type:"recorder/validate_statistics"}),v=(t,e,n)=>t.callWS({type:"recorder/update_statistics_metadata",statistic_id:e,unit_of_measurement:n}),w=(t,e)=>t.callWS({type:"recorder/clear_statistics",statistic_ids:e}),W=t=>{if(!t||t.length<2)return null;const e=t[t.length-1].sum;if(null===e)return null;const n=t[0].sum;return null===n?e:e-n},T=(t,e)=>{let n=null;for(const s of e){if(!(s in t))continue;const e=W(t[s]);null!==e&&(null===n?n=e:n+=e)}return n},Z=(t,e)=>t.some((t=>null!==t[e])),O=(t,e,n,s)=>t.callWS({type:"recorder/adjust_sum_statistics",statistic_id:e,start_time:n,adjustment:s}),k=(t,e,n)=>{const s=t.states[e];if(s)return(0,r.C)(s);const i=n[e];return(null==i?void 0:i.name)||e}}))}}]);