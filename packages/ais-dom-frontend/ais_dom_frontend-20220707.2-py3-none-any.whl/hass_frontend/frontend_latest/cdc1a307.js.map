{"version":3,"file":"cdc1a307.js","mappings":";;AA2BA;;AAGA;AACA;AACA;;AAEA;AAGA;;AAEA;;;AAGA;;AAGA;AACA;;;;AAIA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA7CA;;ACwGA;;AAGA;AACA;AACA;AACA;;;;;;;;;;AAjBA;;ACtEA;;;;;;AAMA;;;AAGA;;;AAKA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA3BA;;;ACwCA;AACA;AACA;AACA;;;;;;AAjDA","sources":["webpack://home-assistant-frontend/./src/layouts/hass-subpage.ts","webpack://home-assistant-frontend/./src/panels/config/ais_dom/ha-config-ais-dom-navigation.ts","webpack://home-assistant-frontend/./src/panels/config/ais_dom/ha-config-ais-dom-dashboard.ts","webpack://home-assistant-frontend/./src/panels/config/dashboard/ha-config-navigation.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, eventOptions, property } from \"lit/decorators\";\nimport { restoreScroll } from \"../common/decorators/restore-scroll\";\nimport \"../components/ha-icon-button-arrow-prev\";\nimport \"../components/ha-menu-button\";\nimport { HomeAssistant } from \"../types\";\n\n@customElement(\"hass-subpage\")\nclass HassSubpage extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public header?: string;\n\n  @property({ type: Boolean, attribute: \"main-page\" }) public mainPage = false;\n\n  @property({ type: String, attribute: \"back-path\" }) public backPath?: string;\n\n  @property({ type: Boolean, reflect: true }) public narrow = false;\n\n  @property({ type: Boolean }) public supervisor = false;\n\n  // @ts-ignore\n  @restoreScroll(\".content\") private _savedScrollPos?: number;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"toolbar\">\n        ${this.mainPage || history.state?.root\n          ? html`\n              <ha-menu-button\n                .hassio=${this.supervisor}\n                .hass=${this.hass}\n                .narrow=${this.narrow}\n              ></ha-menu-button>\n            `\n          : this.backPath\n          ? html`\n              <a href=${this.backPath}>\n                <ha-icon-button-arrow-prev\n                  .hass=${this.hass}\n                ></ha-icon-button-arrow-prev>\n              </a>\n            `\n          : html`\n              <ha-icon-button-arrow-prev\n                .hass=${this.hass}\n                @click=${this._backTapped}\n              ></ha-icon-button-arrow-prev>\n            `}\n\n        <div class=\"main-title\">${this.header}</div>\n        <slot name=\"toolbar-icon\"></slot>\n      </div>\n      <div class=\"content\" @scroll=${this._saveScrollPos}><slot></slot></div>\n    `;\n  }\n\n  @eventOptions({ passive: true })\n  private _saveScrollPos(e: Event) {\n    this._savedScrollPos = (e.target as HTMLDivElement).scrollTop;\n  }\n\n  private _backTapped(): void {\n    history.back();\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n        height: 100%;\n        background-color: var(--primary-background-color);\n      }\n\n      :host([narrow]) {\n        width: 100%;\n        position: fixed;\n      }\n\n      .toolbar {\n        display: flex;\n        align-items: center;\n        font-size: 20px;\n        height: var(--header-height);\n        padding: 0 16px;\n        pointer-events: none;\n        background-color: var(--app-header-background-color);\n        font-weight: 400;\n        color: var(--app-header-text-color, white);\n        border-bottom: var(--app-header-border-bottom, none);\n        box-sizing: border-box;\n      }\n      .toolbar a {\n        color: var(--sidebar-text-color);\n        text-decoration: none;\n      }\n\n      ha-menu-button,\n      ha-icon-button-arrow-prev,\n      ::slotted([slot=\"toolbar-icon\"]) {\n        pointer-events: auto;\n        color: var(--sidebar-icon-color);\n      }\n\n      .main-title {\n        margin: 0 0 0 24px;\n        line-height: 20px;\n        flex-grow: 1;\n      }\n\n      .content {\n        position: relative;\n        width: 100%;\n        height: calc(100% - 1px - var(--header-height));\n        overflow-y: auto;\n        overflow: auto;\n        -webkit-overflow-scrolling: touch;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hass-subpage\": HassSubpage;\n  }\n}\n","import \"@polymer/paper-item/paper-item-body\";\nimport \"@polymer/paper-item/paper-item\";\n\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-icon-next\";\nimport { PageNavigation } from \"../../../layouts/hass-tabs-subpage\";\nimport \"../../../components/ha-icon\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"../dashboard/ha-config-navigation\";\nimport {\n  mdiCloudSyncOutline,\n  mdiWifi,\n  mdiMonitorEdit,\n  mdiAccountTieVoice,\n  mdiWeatherNight,\n  mdiWeb,\n  mdiDatabaseSettings,\n  mdiRestart,\n  mdiUsb,\n} from \"@mdi/js\";\nimport { HomeAssistant } from \"../../../types\";\n\nconst aisGateConfigSections: { [name: string]: PageNavigation[] } = {\n  integrations: [\n    {\n      component: \"ais_dom_config_update\",\n      path: \"/config/ais_dom_config_update\",\n      translationKey: \"ais_dom_config_update\",\n      iconPath: mdiCloudSyncOutline,\n      iconColor: \"#43a047\",\n      core: true,\n    },\n    {\n      component: \"ais_dom_config_wifi\",\n      path: \"/config/ais_dom_config_wifi\",\n      translationKey: \"ais_dom_config_wifi\",\n      iconPath: mdiWifi,\n      iconColor: \"#e48629\",\n      core: true,\n    },\n    {\n      component: \"ais_dom_config_display\",\n      path: \"/config/ais_dom_config_display\",\n      translationKey: \"ais_dom_config_display\",\n      iconPath: mdiMonitorEdit,\n      iconColor: \"#00bcd4\",\n      core: true,\n    },\n    {\n      component: \"ais_dom_config_tts\",\n      path: \"/config/ais_dom_config_tts\",\n      translationKey: \"ais_dom_config_tts\",\n      iconPath: mdiAccountTieVoice,\n      iconColor: \"#518c43\",\n      core: true,\n    },\n    {\n      component: \"ais_dom_config_night\",\n      path: \"/config/ais_dom_config_night\",\n      translationKey: \"ais_dom_config_night\",\n      iconPath: mdiWeatherNight,\n      iconColor: \"#0D47A1\",\n      core: true,\n    },\n    {\n      component: \"ais_dom_config_remote\",\n      path: \"/config/ais_dom_config_remote\",\n      translationKey: \"ais_dom_config_remote\",\n      iconPath: mdiWeb,\n      iconColor: \"#4d2ea4\",\n      core: true,\n    },\n    {\n      component: \"ais_dom_config_logs\",\n      path: \"/config/ais_dom_config_logs\",\n      translationKey: \"ais_dom_config_logs\",\n      iconPath: mdiDatabaseSettings,\n      iconColor: \"#b1345c\",\n      core: true,\n    },\n    {\n      component: \"ais_dom_config_usb\",\n      path: \"/config/ais_dom_config_usb\",\n      translationKey: \"ais_dom_config_usb\",\n      iconPath: mdiUsb,\n      iconColor: \"#616161\",\n      core: true,\n    },\n    {\n      component: \"ais_dom_config_power\",\n      path: \"/config/ais_dom_config_power\",\n      translationKey: \"ais_dom_config_power\",\n      iconPath: mdiRestart,\n      iconColor: \"#ff5722\",\n      core: true,\n    },\n  ],\n};\n\n@customElement(\"ha-config-ais-dom-navigation\")\nclass HaConfigAisDomNavigation extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property({ type: Boolean, reflect: true })\n  public narrow!: boolean;\n\n  @property() public showAdvanced!: boolean;\n\n  protected render(): TemplateResult | void {\n    return html`\n      <ha-card>\n        ${Object.values(aisGateConfigSections).map(\n          (section) => html`\n          <ha-config-navigation\n                    .hass=${this.hass}\n                    .narrow=${this.narrow}\n                    .showAdvanced=${this.showAdvanced}\n                    .pages=${section}\n          ></ha-config-navigation>\n      </ha-card>\n        `\n        )}\n      </ha-card>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      a {\n        text-decoration: none;\n        color: var(--primary-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-ais-dom-navigation\": HaConfigAisDomNavigation;\n  }\n}\n","import {css, CSSResultArray, html, LitElement, TemplateResult} from \"lit\";\nimport {customElement, property} from 'lit/decorators';\nimport \"@polymer/app-layout/app-header-layout/app-header-layout\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\n\nimport \"../../../components/ha-menu-button\";\n\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\n\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-icon-next\";\n\nimport \"../ha-config-section\";\nimport \"./ha-config-ais-dom-navigation\";\nimport \"../../../layouts/hass-subpage\";\n\n@customElement(\"ha-config-ais-dom-dashboard\")\nclass HaConfigAisDomDashboard extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public narrow!: boolean;\n\n  @property() public isWide!: boolean;\n\n  @property() public showAdvanced!: boolean;\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-subpage\n        header=${this.hass.localize(\"ui.panel.config.ais_dom_config.header\")}\n      >\n        <div>\n          <div class=\"content\">\n            <ha-config-section is-wide=\"[[isWide]]\">\n              <div slot=\"header\">\n                ${this.hass.localize(\"ui.panel.config.ais_dom_config.header\")}\n              </div>\n              <span slot=\"introduction\">\n                ${this.hass.localize(\n                  \"ui.panel.config.ais_dom_config.introduction\"\n                )}\n              </span>\n              <ha-config-ais-dom-navigation\n                .hass=${this.hass}\n                .show-advanced=${this.showAdvanced}\n              ></ha-config-ais-dom-navigation>\n            </ha-config-section>\n          </div>\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  static get styles(): CSSResultArray {\n    return [\n      haStyle,\n      css`\n        app-header {\n          --app-header-background-color: var(--primary-background-color);\n        }\n        ha-card:last-child {\n          margin-bottom: 24px;\n        }\n        ha-config-section {\n          margin-top: -20px;\n        }\n        ha-card {\n          overflow: hidden;\n        }\n        ha-card a {\n          text-decoration: none;\n          color: var(--primary-text-color);\n        }\n        .promo-advanced {\n          text-align: center;\n          color: var(--secondary-text-color);\n          margin-bottom: 24px;\n        }\n        .promo-advanced a {\n          color: var(--secondary-text-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-ais-dom-dashboard\": HaConfigAisDomDashboard;\n  }\n}\n","import \"@material/mwc-list/mwc-list\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { canShowPage } from \"../../../common/config/can_show_page\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-icon-next\";\nimport \"../../../components/ha-navigation-list\";\nimport type { CloudStatus } from \"../../../data/cloud\";\nimport type { PageNavigation } from \"../../../layouts/hass-tabs-subpage\";\nimport type { HomeAssistant } from \"../../../types\";\n\n@customElement(\"ha-config-navigation\")\nclass HaConfigNavigation extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @property({ attribute: false }) public pages!: PageNavigation[];\n\n  protected render(): TemplateResult {\n    const pages = this.pages\n      .filter((page) =>\n        page.path === \"#external-app-configuration\"\n          ? this.hass.auth.external?.config.hasSettingsScreen\n          : canShowPage(this.hass, page)\n      )\n      .map((page) => ({\n        ...page,\n        name:\n          page.name ||\n          this.hass.localize(\n            `ui.panel.config.dashboard.${page.translationKey}.main`\n          ),\n        description:\n          page.component === \"cloud\" && (page.info as CloudStatus)\n            ? page.info.logged_in\n              ? `\n                  ${this.hass.localize(\n                    \"ui.panel.config.cloud.description_login\"\n                  )}\n                `\n              : `\n                  ${this.hass.localize(\n                    \"ui.panel.config.cloud.description_features\"\n                  )}\n                `\n            : `\n                ${\n                  page.description ||\n                  this.hass.localize(\n                    `ui.panel.config.dashboard.${page.translationKey}.secondary`\n                  )\n                }\n              `,\n      }));\n    return html`\n      <ha-navigation-list\n        hasSecondary\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .pages=${pages}\n        @click=${this._entryClicked}\n      ></ha-navigation-list>\n    `;\n  }\n\n  private _entryClicked(ev) {\n    const anchor = ev\n      .composedPath()\n      .find((n) => (n as HTMLElement).tagName === \"A\") as\n      | HTMLAnchorElement\n      | undefined;\n\n    if (anchor?.href?.endsWith(\"#external-app-configuration\")) {\n      ev.preventDefault();\n      this.hass.auth.external!.fireMessage({\n        type: \"config_screen/show\",\n      });\n    }\n  }\n\n  static styles: CSSResultGroup = css`\n    ha-navigation-list {\n      --navigation-list-item-title-font-size: 16px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-navigation\": HaConfigNavigation;\n  }\n}\n"],"names":[],"sourceRoot":""}