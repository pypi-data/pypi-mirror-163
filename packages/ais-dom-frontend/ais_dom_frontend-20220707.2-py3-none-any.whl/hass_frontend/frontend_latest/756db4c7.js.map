{"version":3,"file":"756db4c7.js","mappings":";;AAwDA;AACA;AAmBA;AACA;;AA0CA;;AAIA;;;;AAKA;;AAEA;AAKA;AASA;;;;AAKA;;AAEA;;AAGA;;AASA;AAeA;AACA;AAmBA;AACA;;;;;;;;;;AClKA;AA8JA;;AAEA;;AAVA;;AAiFA;AACA;AACA;AAGA;AACA;AACA;AACA;AAQA;AAKA;;;;AAIA;;;AAGA;;;;;AAnQA","sources":["webpack://home-assistant-frontend/./src/dialogs/config-flow/show-dialog-config-flow.ts","webpack://home-assistant-frontend/./src/panels/config/ais_dom/ha-config-ais-dom-devices-dashboard.ts"],"sourcesContent":["import { html } from \"lit\";\nimport {\n  createConfigFlow,\n  deleteConfigFlow,\n  fetchConfigFlow,\n  getConfigFlowHandlers,\n  handleConfigFlowStep,\n} from \"../../data/config_flow\";\nimport { domainToName } from \"../../data/integration\";\nimport {\n  DataEntryFlowDialogParams,\n  loadDataEntryFlowDialog,\n  showFlowDialog,\n} from \"./show-dialog-data-entry-flow\";\n\nexport const loadConfigFlowDialog = loadDataEntryFlowDialog;\n\nexport const showConfigFlowDialog = (\n  element: HTMLElement,\n  dialogParams: Omit<DataEntryFlowDialogParams, \"flowConfig\">\n): void =>\n  showFlowDialog(element, dialogParams, {\n    loadDevicesAndAreas: true,\n    getFlowHandlers: async (hass) => {\n      const [integrations, helpers] = await Promise.all([\n        getConfigFlowHandlers(hass, \"integration\"),\n        getConfigFlowHandlers(hass, \"helper\"),\n        hass.loadBackendTranslation(\"title\", undefined, true),\n      ]);\n      return { integrations, helpers };\n    },\n    createFlow: async (hass, handler) => {\n      const [step] = await Promise.all([\n        createConfigFlow(hass, handler),\n        hass.loadBackendTranslation(\"config\", handler),\n        // Used as fallback if no header defined for step\n        hass.loadBackendTranslation(\"title\", handler),\n      ]);\n      return step;\n    },\n    fetchFlow: async (hass, flowId) => {\n      const step = await fetchConfigFlow(hass, flowId);\n      await hass.loadBackendTranslation(\"config\", step.handler);\n      return step;\n    },\n    handleFlowStep: handleConfigFlowStep,\n    deleteFlow: deleteConfigFlow,\n\n    renderAbortDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.abort.${step.reason}`,\n        step.description_placeholders\n      );\n\n      return description\n        ? html`\n            <ha-markdown allowsvg breaks .content=${description}></ha-markdown>\n          `\n        : \"\";\n    },\n\n    renderShowFormStepHeader(hass, step) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.step.${step.step_id}.title`\n        ) || hass.localize(`component.${step.handler}.title`)\n      );\n    },\n\n    renderShowFormStepDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.description`,\n        step.description_placeholders\n      );\n      return description\n        ? html`\n            <ha-markdown allowsvg breaks .content=${description}></ha-markdown>\n          `\n        : \"\";\n    },\n\n    renderShowFormStepFieldLabel(hass, step, field) {\n      return hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.data.${field.name}`\n      );\n    },\n\n    renderShowFormStepFieldHelper(hass, step, field) {\n      return hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.data_description.${field.name}`\n      );\n    },\n\n    renderShowFormStepFieldError(hass, step, error) {\n      return hass.localize(\n        `component.${step.handler}.config.error.${error}`,\n        step.description_placeholders\n      );\n    },\n\n    renderExternalStepHeader(hass, step) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.step.${step.step_id}.title`\n        ) ||\n        hass.localize(\n          \"ui.panel.config.integrations.config_flow.external_step.open_site\"\n        )\n      );\n    },\n\n    renderExternalStepDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.${step.step_id}.description`,\n        step.description_placeholders\n      );\n\n      return html`\n        <p>\n          ${hass.localize(\n            \"ui.panel.config.integrations.config_flow.external_step.description\"\n          )}\n        </p>\n        ${description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\"}\n      `;\n    },\n\n    renderCreateEntryDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.create_entry.${\n          step.description || \"default\"\n        }`,\n        step.description_placeholders\n      );\n\n      return html`\n        ${description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\"}\n        <p>\n          ${hass.localize(\n            \"ui.panel.config.integrations.config_flow.created_config\",\n            \"name\",\n            step.title\n          )}\n        </p>\n      `;\n    },\n\n    renderShowFormProgressHeader(hass, step) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.step.${step.step_id}.title`\n        ) || hass.localize(`component.${step.handler}.title`)\n      );\n    },\n\n    renderShowFormProgressDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.progress.${step.progress_action}`,\n        step.description_placeholders\n      );\n      return description\n        ? html`\n            <ha-markdown allowsvg breaks .content=${description}></ha-markdown>\n          `\n        : \"\";\n    },\n\n    renderMenuHeader(hass, step) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.step.${step.step_id}.title`\n        ) || hass.localize(`component.${step.handler}.title`)\n      );\n    },\n\n    renderMenuDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.description`,\n        step.description_placeholders\n      );\n      return description\n        ? html`\n            <ha-markdown allowsvg breaks .content=${description}></ha-markdown>\n          `\n        : \"\";\n    },\n\n    renderMenuOption(hass, step, option) {\n      return hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.menu_options.${option}`,\n        step.description_placeholders\n      );\n    },\n\n    renderLoadingDescription(hass, reason, handler, step) {\n      if (![\"loading_flow\", \"loading_step\"].includes(reason)) {\n        return \"\";\n      }\n      const domain = step?.handler || handler;\n      return hass.localize(\n        `ui.panel.config.integrations.config_flow.loading.${reason}`,\n        {\n          integration: domain\n            ? domainToName(hass.localize, domain)\n            : // when we are continuing a config flow, we only know the ID and not the domain\n              hass.localize(\n                \"ui.panel.config.integrations.config_flow.loading.fallback_title\"\n              ),\n        }\n      );\n    },\n  });\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { mdiPlus } from \"@mdi/js\";\nimport { HASSDomEvent } from \"../../../common/dom/fire_event\";\nimport { navigate } from \"../../../common/navigate\";\nimport { LocalizeFunc } from \"../../../common/translations/localize\";\nimport {\n  DataTableColumnContainer,\n  DataTableRowData,\n  RowClickedEvent,\n} from \"../../../components/data-table/ha-data-table\";\nimport \"../../../components/entity/ha-battery-icon\";\nimport { AreaRegistryEntry } from \"../../../data/area_registry\";\nimport { ConfigEntry } from \"../../../data/config_entries\";\nimport {\n  computeDeviceName,\n  DeviceEntityLookup,\n  DeviceRegistryEntry,\n} from \"../../../data/device_registry\";\nimport { EntityRegistryEntry } from \"../../../data/entity_registry\";\nimport { domainToName } from \"../../../data/integration\";\nimport \"../../../layouts/hass-tabs-subpage-data-table\";\nimport { HomeAssistant, Route } from \"../../../types\";\nimport { configSections } from \"../ha-panel-config\";\nimport { showConfigFlowDialog } from \"../../../dialogs/config-flow/show-dialog-config-flow\";\nimport \"@material/mwc-fab\";\n\ninterface DeviceRowData extends DeviceRegistryEntry {\n  device?: DeviceRowData;\n  area?: string;\n  integration?: string;\n  battery_entity?: [string | undefined, string | undefined];\n  sw_version: string | null;\n}\n\n@customElement(\"ha-config-ais-dom-devices-dashboard\")\nexport class HaConfigAisDomDeviceDashboard extends LitElement {\n  static get styles(): CSSResultGroup {\n    return css`\n      .content {\n        padding: 4px;\n      }\n      mwc-fab {\n        position: fixed;\n        bottom: 16px;\n        right: 16px;\n        z-index: 1;\n      }\n    `;\n  }\n\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public narrow = false;\n\n  @property() public isWide = false;\n\n  @property() public devices!: DeviceRegistryEntry[];\n\n  @property() public entries!: ConfigEntry[];\n\n  @property() public entities!: EntityRegistryEntry[];\n\n  @property() public areas!: AreaRegistryEntry[];\n\n  @property() public route!: Route;\n\n  @property() private _searchParms = new URLSearchParams(\n    window.location.search\n  );\n\n  private _activeFilters = memoizeOne(\n    (\n      entries: ConfigEntry[],\n      filters: URLSearchParams,\n      localize: LocalizeFunc\n    ): string[] | undefined => {\n      const filterTexts: string[] = [];\n      filters.forEach((value, key) => {\n        switch (key) {\n          case \"config_entry\": {\n            const configEntry = entries.find(\n              (entry) => entry.entry_id === value\n            );\n            if (!configEntry) {\n              break;\n            }\n            const integrationName = domainToName(localize, configEntry.domain);\n            filterTexts.push(\n              `${this.hass.localize(\n                \"ui.panel.config.integrations.integration\"\n              )} ${integrationName}${\n                integrationName !== configEntry.title\n                  ? `: ${configEntry.title}`\n                  : \"\"\n              }`\n            );\n            break;\n          }\n        }\n      });\n      return filterTexts.length ? filterTexts : undefined;\n    }\n  );\n\n  private _devices = memoizeOne(\n    (\n      devices: DeviceRegistryEntry[],\n      entries: ConfigEntry[],\n      entities: EntityRegistryEntry[],\n      areas: AreaRegistryEntry[],\n      filters: URLSearchParams,\n      localize: LocalizeFunc\n    ) => {\n      // Some older installations might have devices pointing at invalid entryIDs\n      // So we guard for that.\n\n      let outputDevices: DeviceRowData[] = devices;\n\n      const deviceLookup: { [deviceId: string]: DeviceRegistryEntry } = {};\n      for (const device of devices) {\n        deviceLookup[device.id] = device;\n      }\n\n      const deviceEntityLookup: DeviceEntityLookup = {};\n      for (const entity of entities) {\n        if (!entity.device_id) {\n          continue;\n        }\n        if (!(entity.device_id in deviceEntityLookup)) {\n          deviceEntityLookup[entity.device_id] = [];\n        }\n        deviceEntityLookup[entity.device_id].push(entity);\n      }\n\n      const entryLookup: { [entryId: string]: ConfigEntry } = {};\n      for (const entry of entries) {\n        entryLookup[entry.entry_id] = entry;\n      }\n\n      const areaLookup: { [areaId: string]: AreaRegistryEntry } = {};\n      for (const area of areas) {\n        areaLookup[area.area_id] = area;\n      }\n\n      filters.forEach((value, key) => {\n        switch (key) {\n          case \"config_entry\":\n            outputDevices = outputDevices.filter((device) =>\n              device.config_entries.includes(value)\n            );\n            break;\n        }\n      });\n\n      outputDevices = outputDevices.map((device) => ({\n        ...device,\n        name: computeDeviceName(\n          device,\n          this.hass,\n          deviceEntityLookup[device.id]\n        ),\n        model: device.model || \"<unknown>\",\n        manufacturer: device.manufacturer || \"<unknown>\",\n        area: device.area_id\n          ? areaLookup[device.area_id].name\n          : this.hass.localize(\"ui.panel.config.devices.data_table.no_area\"),\n        integration: device.config_entries.length\n          ? device.config_entries\n              .filter((entId) => entId in entryLookup)\n              .map(\n                (entId) =>\n                  localize(`component.${entryLookup[entId].domain}.title`) ||\n                  entryLookup[entId].domain\n              )\n              .join(\", \")\n          : \"No integration\",\n        sw_version: device.sw_version,\n      }));\n\n      return outputDevices;\n    }\n  );\n\n  private _columns = memoizeOne((narrow: boolean): DataTableColumnContainer => {\n    const columns: DataTableColumnContainer = narrow\n      ? {\n          name: {\n            title: \"Device\",\n            sortable: true,\n            filterable: true,\n            direction: \"asc\",\n            grows: true,\n            template: (name, device: DataTableRowData) => html`\n              ${name}\n              <div class=\"secondary\">\n                ${device.area} | ${device.integration}\n              </div>\n            `,\n          },\n        }\n      : {\n          name: {\n            title: this.hass.localize(\n              \"ui.panel.config.devices.data_table.device\"\n            ),\n            sortable: true,\n            filterable: true,\n            grows: true,\n            direction: \"asc\",\n          },\n        };\n\n    columns.manufacturer = {\n      title: this.hass.localize(\n        \"ui.panel.config.devices.data_table.manufacturer\"\n      ),\n      sortable: true,\n      hidden: narrow,\n      filterable: true,\n      width: \"15%\",\n    };\n    columns.model = {\n      title: this.hass.localize(\"ui.panel.config.devices.data_table.model\"),\n      sortable: true,\n      hidden: narrow,\n      filterable: true,\n      width: \"15%\",\n    };\n    columns.area = {\n      title: this.hass.localize(\"ui.panel.config.devices.data_table.area\"),\n      sortable: true,\n      hidden: narrow,\n      filterable: true,\n      width: \"15%\",\n    };\n    columns.integration = {\n      title: this.hass.localize(\n        \"ui.panel.config.devices.data_table.integration\"\n      ),\n      sortable: true,\n      hidden: narrow,\n      filterable: true,\n      width: \"15%\",\n    };\n    columns.sw_version = {\n      title: \"Wersja\",\n      sortable: true,\n      width: narrow ? \"90px\" : \"15%\",\n      maxWidth: \"90px\",\n    };\n    return columns;\n  });\n\n  public constructor() {\n    super();\n    window.addEventListener(\"location-changed\", () => {\n      this._searchParms = new URLSearchParams(window.location.search);\n    });\n    window.addEventListener(\"popstate\", () => {\n      this._searchParms = new URLSearchParams(window.location.search);\n    });\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-tabs-subpage-data-table\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .backPath=${this._searchParms.has(\"historyBack\")\n          ? undefined\n          : \"/config\"}\n        .tabs=${configSections.devices}\n        .route=${this.route}\n        .columns=${this._columns(this.narrow)}\n        .data=${this._devices(\n          this.devices,\n          this.entries,\n          this.entities,\n          this.areas,\n          this._searchParms,\n          this.hass.localize\n        )}\n        .activeFilters=${this._activeFilters(\n          this.entries,\n          this._searchParms,\n          this.hass.localize\n        )}\n        @row-click=${this._handleRowClicked}\n      >\n      </hass-tabs-subpage-data-table>\n      <mwc-fab\n        ?is-wide=${true}\n        icon=\"hass:plus\"\n        title=\"Dodaj urządzenie\"\n        @click=${this._addDevice}\n        class=\"\"\n      >\n        <ha-svg-icon slot=\"icon\" path=${mdiPlus}></ha-svg-icon>\n      </mwc-fab>\n    `;\n  }\n\n  private _handleRowClicked(ev: HASSDomEvent<RowClickedEvent>) {\n    const deviceId = ev.detail.id;\n    navigate(`/config/devices/device/${deviceId}`);\n  }\n\n  private _continueFlow(flowId) {\n    showConfigFlowDialog(this, {\n      continueFlowId: flowId,\n      dialogClosedCallback: () => {\n        // eslint-disable-next-line no-console\n        console.log(\"OK\");\n      },\n    });\n  }\n\n  private _addDevice() {\n    this.hass\n      .callApi(\"POST\", \"config/config_entries/flow\", {\n        handler: \"ais_dom_device\",\n      })\n      .then((result: any) => {\n        // eslint-disable-next-line no-console\n        console.log(result);\n        this._continueFlow(result.flow_id);\n      });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-ais-dom-devices-dashboard\": HaConfigAisDomDeviceDashboard;\n  }\n}\n"],"names":[],"sourceRoot":""}