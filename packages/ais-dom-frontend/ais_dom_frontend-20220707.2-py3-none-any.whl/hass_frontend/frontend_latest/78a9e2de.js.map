{"version":3,"file":"78a9e2de.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AA+GA;;;;;;;;;;;;;;;;;;;;;;ACzGA;;ACqBA;;AAGA;AACA;AACA;;AAEA;AAGA;;AAEA;;;AAGA;;AAGA;AACA;;;;AAIA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA7CA;;;ACsDA;AACA;AACA;;;;AAIA;;AAIA;;AAEA;;;AAGA;;;;AAIA;;AAIA;;AAGA;;AAMA;;;;;;AAOA;;AAGA;AACA;AACA;;;AAGA;;AAGA;;;;;;;;;AA6BA;;AAEA;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;AApHA","sources":["webpack://home-assistant-frontend/./node_modules/@polymer/iron-icon/iron-icon.js","webpack://home-assistant-frontend/./src/components/ha-list-item.ts","webpack://home-assistant-frontend/./src/layouts/hass-subpage.ts","webpack://home-assistant-frontend/./src/panels/config/core/ha-config-section-updates.ts"],"sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\n\nimport {IronMeta} from '@polymer/iron-meta/iron-meta.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\nimport {Base} from '@polymer/polymer/polymer-legacy.js';\n\n/**\n\nThe `iron-icon` element displays an icon. By default an icon renders as a 24px\nsquare.\n\nExample using src:\n\n    <iron-icon src=\"star.png\"></iron-icon>\n\nExample setting size to 32px x 32px:\n\n    <iron-icon class=\"big\" src=\"big_star.png\"></iron-icon>\n\n    <style is=\"custom-style\">\n      .big {\n        --iron-icon-height: 32px;\n        --iron-icon-width: 32px;\n      }\n    </style>\n\nThe iron elements include several sets of icons. To use the default set of\nicons, import `iron-icons.js` and use the `icon` attribute to specify an icon:\n\n    <script type=\"module\">\n      import \"@polymer/iron-icons/iron-icons.js\";\n    </script>\n\n    <iron-icon icon=\"menu\"></iron-icon>\n\nTo use a different built-in set of icons, import the specific\n`iron-icons/<iconset>-icons.js`, and specify the icon as `<iconset>:<icon>`.\nFor example, to use a communication icon, you would use:\n\n    <script type=\"module\">\n      import \"@polymer/iron-icons/communication-icons.js\";\n    </script>\n\n    <iron-icon icon=\"communication:email\"></iron-icon>\n\nYou can also create custom icon sets of bitmap or SVG icons.\n\nExample of using an icon named `cherry` from a custom iconset with the ID\n`fruit`:\n\n    <iron-icon icon=\"fruit:cherry\"></iron-icon>\n\nSee `<iron-iconset>` and `<iron-iconset-svg>` for more information about how to\ncreate a custom iconset.\n\nSee the `iron-icons` demo to see the icons available in the various iconsets.\n\n### Styling\n\nThe following custom properties are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--iron-icon` | Mixin applied to the icon | {}\n`--iron-icon-width` | Width of the icon | `24px`\n`--iron-icon-height` | Height of the icon | `24px`\n`--iron-icon-fill-color` | Fill color of the svg icon | `currentcolor`\n`--iron-icon-stroke-color` | Stroke color of the svg icon | none\n\n@group Iron Elements\n@element iron-icon\n@demo demo/index.html\n@hero hero.svg\n@homepage polymer.github.io\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        @apply --layout-inline;\n        @apply --layout-center-center;\n        position: relative;\n\n        vertical-align: middle;\n\n        fill: var(--iron-icon-fill-color, currentcolor);\n        stroke: var(--iron-icon-stroke-color, none);\n\n        width: var(--iron-icon-width, 24px);\n        height: var(--iron-icon-height, 24px);\n        @apply --iron-icon;\n      }\n\n      :host([hidden]) {\n        display: none;\n      }\n    </style>\n`,\n\n  is: 'iron-icon',\n\n  properties: {\n\n    /**\n     * The name of the icon to use. The name should be of the form:\n     * `iconset_name:icon_name`.\n     */\n    icon: {type: String},\n\n    /**\n     * The name of the theme to used, if one is specified by the\n     * iconset.\n     */\n    theme: {type: String},\n\n    /**\n     * If using iron-icon without an iconset, you can set the src to be\n     * the URL of an individual icon image file. Note that this will take\n     * precedence over a given icon attribute.\n     */\n    src: {type: String},\n\n    /**\n     * @type {!IronMeta}\n     */\n    _meta: {value: Base.create('iron-meta', {type: 'iconset'})}\n\n  },\n\n  observers: [\n    '_updateIcon(_meta, isAttached)',\n    '_updateIcon(theme, isAttached)',\n    '_srcChanged(src, isAttached)',\n    '_iconChanged(icon, isAttached)'\n  ],\n\n  _DEFAULT_ICONSET: 'icons',\n\n  _iconChanged: function(icon) {\n    var parts = (icon || '').split(':');\n    this._iconName = parts.pop();\n    this._iconsetName = parts.pop() || this._DEFAULT_ICONSET;\n    this._updateIcon();\n  },\n\n  _srcChanged: function(src) {\n    this._updateIcon();\n  },\n\n  _usesIconset: function() {\n    return this.icon || !this.src;\n  },\n\n  /** @suppress {visibility} */\n  _updateIcon: function() {\n    if (this._usesIconset()) {\n      if (this._img && this._img.parentNode) {\n        dom(this.root).removeChild(this._img);\n      }\n      if (this._iconName === '') {\n        if (this._iconset) {\n          this._iconset.removeIcon(this);\n        }\n      } else if (this._iconsetName && this._meta) {\n        this._iconset = /** @type {?Polymer.Iconset} */ (\n            this._meta.byKey(this._iconsetName));\n        if (this._iconset) {\n          this._iconset.applyIcon(this, this._iconName, this.theme);\n          this.unlisten(window, 'iron-iconset-added', '_updateIcon');\n        } else {\n          this.listen(window, 'iron-iconset-added', '_updateIcon');\n        }\n      }\n    } else {\n      if (this._iconset) {\n        this._iconset.removeIcon(this);\n      }\n      if (!this._img) {\n        this._img = document.createElement('img');\n        this._img.style.width = '100%';\n        this._img.style.height = '100%';\n        this._img.draggable = false;\n      }\n      this._img.src = this.src;\n      dom(this.root).appendChild(this._img);\n    }\n  }\n});\n","import { ListItemBase } from \"@material/mwc-list/mwc-list-item-base\";\nimport { styles } from \"@material/mwc-list/mwc-list-item.css\";\nimport { css, CSSResultGroup } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-list-item\")\nexport class HaListItem extends ListItemBase {\n  static get styles(): CSSResultGroup {\n    return [\n      styles,\n      css`\n        :host {\n          padding-left: var(--mdc-list-side-padding, 20px);\n          padding-right: var(--mdc-list-side-padding, 20px);\n        }\n        :host([graphic=\"avatar\"]:not([twoLine])),\n        :host([graphic=\"icon\"]:not([twoLine])) {\n          height: 48px;\n        }\n        span.material-icons:first-of-type {\n          margin-inline-start: 0px !important;\n          margin-inline-end: var(\n            --mdc-list-item-graphic-margin,\n            16px\n          ) !important;\n          direction: var(--direction);\n        }\n        span.material-icons:last-of-type {\n          margin-inline-start: auto !important;\n          margin-inline-end: 0px !important;\n          direction: var(--direction);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-list-item\": HaListItem;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, eventOptions, property } from \"lit/decorators\";\nimport { restoreScroll } from \"../common/decorators/restore-scroll\";\nimport \"../components/ha-icon-button-arrow-prev\";\nimport \"../components/ha-menu-button\";\nimport { HomeAssistant } from \"../types\";\n\n@customElement(\"hass-subpage\")\nclass HassSubpage extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public header?: string;\n\n  @property({ type: Boolean, attribute: \"main-page\" }) public mainPage = false;\n\n  @property({ type: String, attribute: \"back-path\" }) public backPath?: string;\n\n  @property({ type: Boolean, reflect: true }) public narrow = false;\n\n  @property({ type: Boolean }) public supervisor = false;\n\n  // @ts-ignore\n  @restoreScroll(\".content\") private _savedScrollPos?: number;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"toolbar\">\n        ${this.mainPage || history.state?.root\n          ? html`\n              <ha-menu-button\n                .hassio=${this.supervisor}\n                .hass=${this.hass}\n                .narrow=${this.narrow}\n              ></ha-menu-button>\n            `\n          : this.backPath\n          ? html`\n              <a href=${this.backPath}>\n                <ha-icon-button-arrow-prev\n                  .hass=${this.hass}\n                ></ha-icon-button-arrow-prev>\n              </a>\n            `\n          : html`\n              <ha-icon-button-arrow-prev\n                .hass=${this.hass}\n                @click=${this._backTapped}\n              ></ha-icon-button-arrow-prev>\n            `}\n\n        <div class=\"main-title\">${this.header}</div>\n        <slot name=\"toolbar-icon\"></slot>\n      </div>\n      <div class=\"content\" @scroll=${this._saveScrollPos}><slot></slot></div>\n    `;\n  }\n\n  @eventOptions({ passive: true })\n  private _saveScrollPos(e: Event) {\n    this._savedScrollPos = (e.target as HTMLDivElement).scrollTop;\n  }\n\n  private _backTapped(): void {\n    history.back();\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n        height: 100%;\n        background-color: var(--primary-background-color);\n      }\n\n      :host([narrow]) {\n        width: 100%;\n        position: fixed;\n      }\n\n      .toolbar {\n        display: flex;\n        align-items: center;\n        font-size: 20px;\n        height: var(--header-height);\n        padding: 0 16px;\n        pointer-events: none;\n        background-color: var(--app-header-background-color);\n        font-weight: 400;\n        color: var(--app-header-text-color, white);\n        border-bottom: var(--app-header-border-bottom, none);\n        box-sizing: border-box;\n      }\n      .toolbar a {\n        color: var(--sidebar-text-color);\n        text-decoration: none;\n      }\n\n      ha-menu-button,\n      ha-icon-button-arrow-prev,\n      ::slotted([slot=\"toolbar-icon\"]) {\n        pointer-events: auto;\n        color: var(--sidebar-icon-color);\n      }\n\n      .main-title {\n        margin: 0 0 0 24px;\n        line-height: 20px;\n        flex-grow: 1;\n      }\n\n      .content {\n        position: relative;\n        width: 100%;\n        height: calc(100% - 1px - var(--header-height));\n        overflow-y: auto;\n        overflow: auto;\n        -webkit-overflow-scrolling: touch;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hass-subpage\": HassSubpage;\n  }\n}\n","import type { ActionDetail } from \"@material/mwc-list\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { mdiDotsVertical, mdiRefresh } from \"@mdi/js\";\nimport { HassEntities } from \"home-assistant-js-websocket\";\nimport { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport \"../../../components/ha-alert\";\nimport \"../../../components/ha-bar\";\nimport \"../../../components/ha-button-menu\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-metric\";\nimport { extractApiErrorMessage } from \"../../../data/hassio/common\";\nimport {\n  fetchHassioSupervisorInfo,\n  HassioSupervisorInfo,\n  reloadSupervisor,\n  setSupervisorOption,\n  SupervisorOptions,\n} from \"../../../data/hassio/supervisor\";\nimport {\n  checkForEntityUpdates,\n  filterUpdateEntitiesWithInstall,\n} from \"../../../data/update\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/hass-subpage\";\nimport type { HomeAssistant } from \"../../../types\";\nimport \"../dashboard/ha-config-updates\";\n\n@customElement(\"ha-config-section-updates\")\nclass HaConfigSectionUpdates extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @state() private _showSkipped = false;\n\n  @state() private _supervisorInfo?: HassioSupervisorInfo;\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n\n    if (isComponentLoaded(this.hass, \"hassio\")) {\n      fetchHassioSupervisorInfo(this.hass).then((data) => {\n        this._supervisorInfo = data;\n      });\n    }\n  }\n\n  protected render(): TemplateResult {\n    const canInstallUpdates = this._filterUpdateEntitiesWithInstall(\n      this.hass.states,\n      this._showSkipped\n    );\n\n    return html`\n      <hass-subpage\n        back-path=\"/config/system\"\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .header=${this.hass.localize(\"ui.panel.config.updates.caption\")}\n      >\n        <div slot=\"toolbar-icon\">\n          <ha-icon-button\n            .label=${this.hass.localize(\n              \"ui.panel.config.updates.check_updates\"\n            )}\n            .path=${mdiRefresh}\n            @click=${this._checkUpdates}\n          ></ha-icon-button>\n          <ha-button-menu corner=\"BOTTOM_START\" @action=${this._handleAction}>\n            <ha-icon-button\n              slot=\"trigger\"\n              .label=${this.hass.localize(\"ui.common.menu\")}\n              .path=${mdiDotsVertical}\n            ></ha-icon-button>\n            <mwc-list-item id=\"skipped\">\n              ${this._showSkipped\n                ? this.hass.localize(\"ui.panel.config.updates.hide_skipped\")\n                : this.hass.localize(\"ui.panel.config.updates.show_skipped\")}\n            </mwc-list-item>\n            ${this._supervisorInfo?.channel !== \"dev\"\n              ? html`\n                  <mwc-list-item id=\"beta\">\n                    ${this._supervisorInfo?.channel === \"stable\"\n                      ? this.hass.localize(\"ui.panel.config.updates.join_beta\")\n                      : this.hass.localize(\n                          \"ui.panel.config.updates.leave_beta\"\n                        )}\n                  </mwc-list-item>\n                `\n              : \"\"}\n          </ha-button-menu>\n        </div>\n        <div class=\"content\">\n          <ha-card outlined>\n            <div class=\"card-content\">\n              ${canInstallUpdates.length\n                ? html`\n                    <ha-config-updates\n                      .hass=${this.hass}\n                      .narrow=${this.narrow}\n                      .updateEntities=${canInstallUpdates}\n                      showAll\n                    ></ha-config-updates>\n                  `\n                : html`\n                    <div class=\"no-updates\">\n                      ${this.hass.localize(\n                        \"ui.panel.config.updates.no_updates\"\n                      )}\n                    </div>\n                  `}\n            </div>\n          </ha-card>\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  private _handleAction(ev: CustomEvent<ActionDetail>) {\n    switch (ev.detail.index) {\n      case 0:\n        this._showSkipped = !this._showSkipped;\n        break;\n      case 1:\n        this._toggleBeta();\n        break;\n    }\n  }\n\n  private async _toggleBeta(): Promise<void> {\n    if (this._supervisorInfo!.channel === \"stable\") {\n      const confirmed = await showConfirmationDialog(this, {\n        title: this.hass.localize(\"ui.dialogs.join_beta_channel.title\"),\n        text: html`${this.hass.localize(\"ui.dialogs.join_beta_channel.warning\")}\n          <br />\n          <b> ${this.hass.localize(\"ui.dialogs.join_beta_channel.backup\")} </b>\n          <br /><br />\n          ${this.hass.localize(\"ui.dialogs.join_beta_channel.release_items\")}\n          <ul>\n            <li>Home Assistant Core</li>\n            <li>Home Assistant Supervisor</li>\n            <li>Home Assistant Operating System</li>\n          </ul>\n          <br />\n          ${this.hass.localize(\"ui.dialogs.join_beta_channel.confirm\")}`,\n        confirmText: this.hass.localize(\"ui.panel.config.updates.join_beta\"),\n        dismissText: this.hass.localize(\"ui.common.cancel\"),\n      });\n\n      if (!confirmed) {\n        return;\n      }\n    }\n\n    try {\n      const data: Partial<SupervisorOptions> = {\n        channel: this._supervisorInfo!.channel === \"stable\" ? \"beta\" : \"stable\",\n      };\n      await setSupervisorOption(this.hass, data);\n      await reloadSupervisor(this.hass);\n    } catch (err: any) {\n      showAlertDialog(this, {\n        text: extractApiErrorMessage(err),\n      });\n    }\n  }\n\n  private async _checkUpdates(): Promise<void> {\n    checkForEntityUpdates(this, this.hass);\n  }\n\n  private _filterUpdateEntitiesWithInstall = memoizeOne(\n    (entities: HassEntities, showSkipped: boolean) =>\n      filterUpdateEntitiesWithInstall(entities, showSkipped)\n  );\n\n  static styles = css`\n    .content {\n      padding: 28px 20px 0;\n      max-width: 1040px;\n      margin: 0 auto;\n    }\n    ha-card {\n      max-width: 600px;\n      margin: 0 auto;\n      height: 100%;\n      justify-content: space-between;\n      flex-direction: column;\n      display: flex;\n      margin-bottom: max(24px, env(safe-area-inset-bottom));\n    }\n\n    .card-content {\n      display: flex;\n      justify-content: space-between;\n      flex-direction: column;\n      padding: 0;\n    }\n\n    .no-updates {\n      padding: 16px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-section-updates\": HaConfigSectionUpdates;\n  }\n}\n"],"names":[],"sourceRoot":""}