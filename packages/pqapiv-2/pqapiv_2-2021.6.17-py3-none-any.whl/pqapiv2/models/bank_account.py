# -*- coding: utf-8 -*-

"""
pqapiv2

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pqapiv2.api_helper import APIHelper
from pqapiv2.models.key_value_pair_bank_field_types_string import KeyValuePairBankFieldTypesString


class BankAccount(object):

    """Implementation of the 'bankAccount' model.

    Unique identifier for the bank account

    Attributes:
        token (string): Token representing the resource, prefixed with
            <i>user-</i>, <i>dest-</i>, <i>xfer-</i>, <i>acct-</i>,
            <i>pmnt-</i>, or <i>docu-</i>.
        status (BankAccountStatusTypesEnum): Current verification status type
            of the bank account
        created_on (datetime): Time at which the object was created.
        bank_account_ownership_type (BankAccountOwnershipTypesEnum): Account
            ownership types
        mtype (BankAccountTypesEnum): Financial purpose of the bank account
            (<i>Savings</i>, <i>Investment</i>)
        fields (list of KeyValuePairBankFieldTypesString): TODO: type
            description here.
        bank_currency (CurrencyTypesEnum): Currency code type for the object
        bank_country (CountryTypesEnum): Two-digit country code types
        description (string): User-supplied description of the bank account
            for reference

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "token": 'token',
        "status": 'status',
        "created_on": 'createdOn',
        "bank_account_ownership_type": 'bankAccountOwnershipType',
        "mtype": 'type',
        "fields": 'fields',
        "bank_currency": 'bankCurrency',
        "bank_country": 'bankCountry',
        "description": 'description'
    }

    def __init__(self,
                 token=None,
                 status=None,
                 created_on=None,
                 bank_account_ownership_type=None,
                 mtype=None,
                 fields=None,
                 bank_currency=None,
                 bank_country=None,
                 description=None):
        """Constructor for the BankAccount class"""

        # Initialize members of the class
        self.token = token
        self.status = status
        self.created_on = APIHelper.RFC3339DateTime(created_on) if created_on else None
        self.bank_account_ownership_type = bank_account_ownership_type
        self.mtype = mtype
        self.fields = fields
        self.bank_currency = bank_currency
        self.bank_country = bank_country
        self.description = description

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        token = dictionary.get('token')
        status = dictionary.get('status')
        created_on = APIHelper.RFC3339DateTime.from_value(dictionary.get("createdOn")).datetime if dictionary.get("createdOn") else None
        bank_account_ownership_type = dictionary.get('bankAccountOwnershipType')
        mtype = dictionary.get('type')
        fields = None
        if dictionary.get('fields') is not None:
            fields = [KeyValuePairBankFieldTypesString.from_dictionary(x) for x in dictionary.get('fields')]
        bank_currency = dictionary.get('bankCurrency')
        bank_country = dictionary.get('bankCountry')
        description = dictionary.get('description')

        # Return an object of this model
        return cls(token,
                   status,
                   created_on,
                   bank_account_ownership_type,
                   mtype,
                   fields,
                   bank_currency,
                   bank_country,
                   description)
