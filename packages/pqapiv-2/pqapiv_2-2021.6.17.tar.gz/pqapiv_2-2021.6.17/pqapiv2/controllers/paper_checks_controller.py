# -*- coding: utf-8 -*-

"""
pqapiv2

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from pqapiv2.api_helper import APIHelper
from pqapiv2.configuration import Server
from pqapiv2.controllers.base_controller import BaseController
from pqapiv2.models.paper_check_collection_response import PaperCheckCollectionResponse
from pqapiv2.models.paper_check_response import PaperCheckResponse


class PaperChecksController(BaseController):

    """A Controller to access Endpoints in the pqapiv2 API."""
    def __init__(self, config):
        super(PaperChecksController, self).__init__(config)

    def list_paper_checks(self,
                          user_token,
                          x_my_pay_quicker_version,
                          page=None,
                          page_size=20,
                          filter=None,
                          sort=None,
                          language=None):
        """Does a GET request to /users/{user-token}/paperchecks.

        Retrieve a list of paper checks that supports filtering, sorting, and
        pagination through existing mechanisms.

        Args:
            user_token (string): Auto-generated unique identifier representing
                a user, prefixed with <i>user-</i>.
            x_my_pay_quicker_version (string): Date-based API Version
                specified in the header <i>required</i> on all calls.
            page (int, optional): Page number of specific page to return
            page_size (int, optional): Number of items to be displayed per
                page
            filter (string, optional): Filter request results by specific
                criteria.
            sort (string, optional): Sort request results by specific
                attribute.
            language (LanguageTypesEnum, optional): Filter results by language
                type.

        Returns:
            PaperCheckCollectionResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/users/{user-token}/paperchecks'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'user-token': {'value': user_token, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'page': page,
            'pageSize': page_size,
            'filter': filter,
            'sort': sort,
            'language': language
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'X-MyPayQuicker-Version': x_my_pay_quicker_version
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaperCheckCollectionResponse.from_dictionary)

        return decoded

    def order_paper_check(self,
                          user_token,
                          x_my_pay_quicker_version,
                          body=None):
        """Does a POST request to /users/{user-token}/paperchecks.

        Create a quote for a paper check.

        Args:
            user_token (string): Auto-generated unique identifier representing
                a user, prefixed with <i>user-</i>.
            x_my_pay_quicker_version (string): Date-based API Version
                specified in the header <i>required</i> on all calls.
            body (PaperCheckBase, optional): TODO: type description here.

        Returns:
            PaperCheckResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/users/{user-token}/paperchecks'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'user-token': {'value': user_token, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'X-MyPayQuicker-Version': x_my_pay_quicker_version,
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaperCheckResponse.from_dictionary)

        return decoded

    def retrieve_paper_check(self,
                             user_token,
                             xfer_token,
                             x_my_pay_quicker_version,
                             page=None,
                             page_size=20,
                             filter=None,
                             sort=None,
                             language=None):
        """Does a GET request to /users/{user-token}/paper-checks/{xfer-token}.

        Retrieve a list of paper checks by destination token that supports
        filtering, sorting, and pagination through existing mechanisms.

        Args:
            user_token (string): Auto-generated unique identifier representing
                a user, prefixed with <i>user-</i>.
            xfer_token (string): Auto-generated unique identifier representing
                an individual transfer transaction, prefixed with
                <i>xfer-</i>.
            x_my_pay_quicker_version (string): Date-based API Version
                specified in the header <i>required</i> on all calls.
            page (int, optional): Page number of specific page to return
            page_size (int, optional): Number of items to be displayed per
                page
            filter (string, optional): Filter request results by specific
                criteria.
            sort (string, optional): Sort request results by specific
                attribute.
            language (LanguageTypesEnum, optional): Filter results by language
                type.

        Returns:
            PaperCheckResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/users/{user-token}/paper-checks/{xfer-token}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'user-token': {'value': user_token, 'encode': True},
            'xfer-token': {'value': xfer_token, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'page': page,
            'pageSize': page_size,
            'filter': filter,
            'sort': sort,
            'language': language
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'X-MyPayQuicker-Version': x_my_pay_quicker_version
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaperCheckResponse.from_dictionary)

        return decoded

    def update_paper_check(self,
                           user_token,
                           xfer_token,
                           x_my_pay_quicker_version,
                           body=None):
        """Does a PUT request to /users/{user-token}/paper-checks/{xfer-token}.

        Create a quote for a paper check.

        Args:
            user_token (string): Auto-generated unique identifier representing
                a user, prefixed with <i>user-</i>.
            xfer_token (string): Auto-generated unique identifier representing
                an individual transfer transaction, prefixed with
                <i>xfer-</i>.
            x_my_pay_quicker_version (string): Date-based API Version
                specified in the header <i>required</i> on all calls.
            body (object, optional): TODO: type description here.

        Returns:
            PaperCheckResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/users/{user-token}/paper-checks/{xfer-token}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'user-token': {'value': user_token, 'encode': True},
            'xfer-token': {'value': xfer_token, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'X-MyPayQuicker-Version': x_my_pay_quicker_version,
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.put(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaperCheckResponse.from_dictionary)

        return decoded

    def cancel_paper_check(self,
                           user_token,
                           xfer_token,
                           x_my_pay_quicker_version):
        """Does a DELETE request to /users/{user-token}/paper-checks/{xfer-token}.

        Delete a paper check by destination token.

        Args:
            user_token (string): Auto-generated unique identifier representing
                a user, prefixed with <i>user-</i>.
            xfer_token (string): Auto-generated unique identifier representing
                an individual transfer transaction, prefixed with
                <i>xfer-</i>.
            x_my_pay_quicker_version (string): Date-based API Version
                specified in the header <i>required</i> on all calls.

        Returns:
            void: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/users/{user-token}/paper-checks/{xfer-token}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'user-token': {'value': user_token, 'encode': True},
            'xfer-token': {'value': xfer_token, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'X-MyPayQuicker-Version': x_my_pay_quicker_version
        }

        # Prepare and execute request
        _request = self.config.http_client.delete(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)
