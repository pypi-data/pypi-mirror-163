Metadata-Version: 2.1
Name: optom-automator
Version: 0.0.1
Summary: Automating the boring stuff in optometry.
License: Copyright © 2022 Shivan Sivakumaran
        
        Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
        
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE

# The Optom Automator

_Find yourself saying 1 or 2 a little too much? Then, this tool is for you._

This is a fun hobby project that I have been working on, where the main purpose is to repeat phrases that I commonly say in an eye examination.

## Phrases

How this works?

There is a usual sequence (for refraction). And that is:
    1. (intro)
      a. GREETING ->
      b. HISTORY ->
    2. (preliminary)
      a. RIGHT_VA ->
      b. LEFT_VA ->
    3. (refraction)
      a. RIGHT_REDGREEN ->
      b. RIGHT_CYLINDER ->
      c. RIGHT_SPHERE ->
      d. LEFT_SPHERE(R/G) ->
      e. LEFT_CYLINDER ->
      f. LEFT_SPHERE(FINE) ->
    4. (end)
      END_EXAM -|

The capitals represent the 'stages' of the testing. They can act as keys for tuples. The tuples provide a little variation in testing.

The tuples phrases can be played in sequence or at random.

This is how the dictionary is constructed roughly:

```python
_PHRASES = {
    "STAGE_1": ("random", ("choice1", "choice2")),
    "STAGE_2": ("sequence", ("choice1", "choice2")),
}
```
