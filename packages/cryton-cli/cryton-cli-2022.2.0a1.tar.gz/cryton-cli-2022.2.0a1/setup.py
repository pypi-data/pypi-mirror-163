# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['cryton_cli',
 'cryton_cli.etc',
 'cryton_cli.lib',
 'cryton_cli.lib.commands',
 'cryton_cli.lib.util']

package_data = \
{'': ['*']}

install_requires = \
['Jinja2>=3.0.3,<3.1.0',
 'PyYAML>=6.0,<6.1',
 'click>=8.1.2,<8.2.0',
 'pyfiglet>=0.8.post1,<0.9',
 'python-dotenv>=0.20.0,<0.21.0',
 'pytz>=2021.3,<2021.4',
 'requests>=2.27.0,<2.28.0',
 'termcolor>=1.1.0,<1.2.0',
 'tzlocal>=4.1,<4.2']

entry_points = \
{'console_scripts': ['cryton-cli = cryton_cli.lib.cli:cli']}

setup_kwargs = {
    'name': 'cryton-cli',
    'version': '2022.2.0a1',
    'description': 'Command line interface for Cryton',
    'long_description': '[[_TOC_]]\n\n![Coverage](https://gitlab.ics.muni.cz/beast-public/cryton/cryton-cli/badges/master/coverage.svg)\n\n# Cryton CLI\n\n## Description\nCryton CLI is a command line interface used to interact with [Cryton Core](https://gitlab.ics.muni.cz/beast-public/cryton/cryton-core) (its API).\n\nTo be able to execute attack scenarios, you also need to install **[Cryton Core](https://gitlab.ics.muni.cz/beast-public/cryton/cryton-core)** \nand **[Cryton Worker](https://gitlab.ics.muni.cz/beast-public/cryton/cryton-worker)** package.\n\nCryton toolset is tested and targeted primarily on **Debian** and **Kali Linux**, however it **should** be possible to \nuse it everywhere if the requirements are met. Please keep in mind that **only the latest version is supported** and \nissues regarding different OS or distributions may **not** be resolved.\n\n[Link to the documentation](https://beast-public.gitlab-pages.ics.muni.cz/cryton/cryton-documentation/).\n\n## Settings\nCryton CLI uses environment variables for its settings. Please update them to your needs.\n\n| name                      | value   | example        | description                                                                                                                                                                                     |\n|---------------------------|---------|----------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| CRYTON_CLI_TIME_ZONE      | string  | AUTO           | What [timezone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) to use for scheduling (for example when scheduling a run). <br> Use the `AUTO` value to use your system timezone. |\n| CRYTON_CLI_API_HOST       | string  | 127.0.0.1      | REST API address used for connection                                                                                                                                                            |\n| CRYTON_CLI_API_PORT       | int     | 8000           | REST API port used for connection                                                                                                                                                               |\n| CRYTON_CLI_API_SSL        | boolean | false          | Use SSL to connect to REST API                                                                                                                                                                  |\n| CRYTON_CLI_API_ROOT       | string  | api/           | REST API URL **(do not change, if you don\'t know what you\'re doing)**                                                                                                                           |\n| CRYTON_CLI_APP_DIRECTORY  | string  | ~/.cryton-cli/ | Path to the Cryton CLI directory. **(do not change/set/export, if you don\'t know what you\'re doing)** <br> If changed, update the commands in this guide accordingly.                           |\n\nTo store the settings, we will **create an app directory**:\n```shell\nmkdir ~/.cryton-cli/\n```\n\nNext, we download example settings (**change the version to match the app version**):\n```shell\ncurl -o ~/.cryton-cli/.env https://gitlab.ics.muni.cz/beast-public/cryton/cryton-cli/-/raw/<version>/.env\n```\nUpdate these settings to your needs.\n\nTo override the persistent settings, you can set/export the variables yourself using the **export** command \n(use **unset** to remove the variable). For example:\n```shell\nexport CRYTON_CLI_API_HOST=127.0.0.1\n```\n\nSome environment variables can be overridden in CLI. Try using `cryton-cli --help`.\n\n## Installation\nCryton CLI is available in the PyPI and can be simply installed using `pip`. However, we recommend installing the app \nin an isolated environment using [pipx](https://pypa.github.io/pipx/).\n\n**Requirements**\n- [Python](https://www.python.org/about/gettingstarted/) >=3.8\n- [pipx](https://pypa.github.io/pipx/)\n\nFirst, install the requirements:\n```shell\napt install python3\napt install pipx\n```\n\nOptionally check respective guides if you prefer a different installation method:\n- [Python](https://www.python.org/about/gettingstarted/)\n- [pipx](https://pypa.github.io/pipx/)\n\nMake sure that the requirements are satisfied:\n```shell\npython3 --version\npipx --version\n```\n\nOnce you have *pipx* ready on your system, you can start the installation:\n```shell\npipx install cryton-cli\n```\n\nMake sure you\'ve correctly set the [settings](#settings).\n\nOptionally, you can set up [shell completion](#shell-completion)\n\nEverything should be set. Check if the installation was successful:\n```shell\ncryton-cli\n```\n\nYou should see a help page:\n```\nUsage: cryton-cli [OPTIONS] COMMAND [ARGS]...\n\n  A CLI wrapper for Cryton API.\n\nOptions:\n  ...\n```\n\n## Development\nTo install Cryton CLI for development, you have to install [Poetry](https://python-poetry.org/docs/).\n\nThen go to the correct directory, create shell, and install the project.\n```shell\ncd cryton-cli\npoetry shell\npoetry install\n```\n\nMake sure you\'ve correctly set the [settings](#settings).  \nTo override the settings quickly, you can use this handy oneliner:\n```shell\nexport $(grep -v \'^#\' .env | xargs)\n```\n\nOptionally, you can set up [shell completion](#shell-completion)\n\nEverything should be set. Check if the installation was successful:\n```shell\ncryton-cli\n```\n\nYou should see a help page:\n```\nUsage: cryton-cli [OPTIONS] COMMAND [ARGS]...\n\n  A CLI wrapper for Cryton API.\n\nOptions:\n  ...\n```\n\n## Usage\n**IMPORTANT: Please keep in mind that the [Cryton Core](https://gitlab.ics.muni.cz/beast-public/cryton/cryton-core) \nmust be running and its API must be reachable.**\n\nTo change the default API host/port use *-H* and *-p* options (to change them permanently, see the [settings section](#settings)).\n```shell\ncryton-cli -H 127.0.0.1 -p 8000 <your command>\n```\n\n**To learn about each command\'s options use**:\n```shell\ncryton-cli <your command> --help\n```\n\nFor a better understanding of the results, we highlight the successful ones with **green** and the others with **red** color.\n\n### Example\n#### 1. Create plan template\nCreate a Plan template using a file containing the desired plan YAML.\n```shell\ncryton-cli plan-templates create my-plan.yml\n```\n\nDesired output:\n```\nTemplate successfully created! (<response detail>).\n```\n\n#### 2. Create Plan instance\nCreate a Plan instance with the saved plan template.\n```shell\ncryton-cli plans create 1\n```\n\nCreate a Plan instance using the template and an inventory file.\n```shell\ncryton-cli plans create 1 -i inventory_file\n```\n\nDesired output:\n```\nPlan successfully created! (<response detail>).\n```\n\n#### 3. Create Worker\nTo execute Plans (Runs) we have to define a Worker(s).\n```shell\ncryton-cli workers create customName -d "This is my first Worker!"\n```\n\nDesired output:\n```\nWorker successfully created! (<response detail>).\n```\n\n#### 4. Create Run\nCreate a Run by choosing a Plan instance and providing a list of Workers for execution.\n```shell\ncryton-cli runs create 1 1\n```\n\nDesired output:\n```\nRun successfully created! (<response detail>).\n```\n\n#### 5. Schedule or Execute Run\nYou can either Schedule the Run for a specific date/time or execute it directly. Run will then be executed on every Worker \nsimultaneously.\n\n**Execute Run**\n```shell\ncryton-cli runs execute 1\n```\n\nDesired output:\n```\nRun successfully executed! (Run 1 was executed.).\n```\n\n**Schedule Run**\nYou can schedule a Run using the local timezone.\n```shell\ncryton-cli runs schedule 1 2020-06-08 10:00:00\n```\n\nDesired output:\n```\nRun successfully scheduled! (Run 1 is scheduled for 2020-06-08 10:00:00.).\n```\n\nOr you can schedule it using UTC timezone with the flag `--utc-timezone`. Otherwise, your preset timezone is used.\n\n#### 6. Read Run report\nAnytime during the execution, a report can be generated, which also complies with YAML format, and it contains a list of \nStages/Steps and their results. Timestamps are by default displayed in UTC timezone, use the `--localize` flag to display \nthem using your preset timezone.\n```shell\ncryton-cli runs report 1\n```\n\nDesired output:\n```\nSuccessfully created Run\'s report! (file saved at: /tmp/report_run_1_2020-06-08-10-15-00-257994_xdQeV)\n```\n\n## Shell completion\nShell completion is available for the *Bash*, *Zsh*, and *Fish* shell and has to be manually enabled.\n\n### Bash\nFirst, **create an app directory** (if you haven\'t already):\n```shell\nmkdir ~/.cryton-cli/\n```\n\nDownload the completion file (**change the version to match the app version**):\n```shell\ncurl -o ~/.cryton-cli/.cryton-cli-complete.bash https://gitlab.ics.muni.cz/beast-public/cryton/cryton-cli/-/raw/<version>/.cryton-cli-complete.bash\n```\n\nSource the file in the `~/.bashrc` file:\n```shell\necho ". ~/.cryton-cli/.cryton-cli-complete.bash" >> ~/.bashrc\n```\n\nAfter modifying the shell config, start a new shell to load the changes.\n\n### Zsh\nFirst, **create an app directory** (if you haven\'t already):\n```shell\nmkdir ~/.cryton-cli/\n```\n\nDownload the completion file (**change the version to match the app version**):\n```shell\ncurl -o ~/.cryton-cli/.cryton-cli-complete.zsh https://gitlab.ics.muni.cz/beast-public/cryton/cryton-cli/-/raw/<version>/.cryton-cli-complete.zsh\n```\n\nSource the file in the `~/.zshrc` file:\n```shell\necho ". ~/.cryton-cli/.cryton-cli-complete.zsh" >> ~/.zshrc\n```\n\nAfter modifying the shell config, start a new shell to load the changes.\n\n### Fish\nDownload the completion file (**change the version to match the app version**):\n```shell\ncurl -o ~/.config/fish/completions/.cryton-cli-complete.fish https://gitlab.ics.muni.cz/beast-public/cryton/cryton-cli/-/raw/<version>/.cryton-cli-complete.fish\n```\n\nAfter modifying the shell config, start a new shell to load the changes.\n',
    'author': 'Ivo Nutár',
    'author_email': 'nutar@ics.muni.cz',
    'maintainer': 'Jiří Rája',
    'maintainer_email': 'raja@ics.muni.cz',
    'url': 'https://gitlab.ics.muni.cz/beast-public/cryton',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
