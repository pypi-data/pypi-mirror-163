
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABORT ASSIGN COLON DO ELSE END ID IF INV LBRACE LBRAKET LSBRAKET MUL_EQ NONDET_CHOICE QVAR RBRACE RBRAKET RSBRAKET SEMICOLON SKIP THEN WHILE ZEROprog : QVAR id_ls predicates_ls sequence predicates_lssequence : sentencesequence : sequence SEMICOLON sentence\n    sentence : skip\n        | abort\n        | init\n        | unitary\n        | if\n        | while\n        | nondet_choice\n    nondet_choice : LBRAKET sequence NONDET_CHOICE sequence RBRAKETif : IF ID id_ls THEN sequence ELSE sequence ENDwhile : inv_ls WHILE ID id_ls DO sequence ENDskip : SKIPabort : ABORTunitary : id_ls MUL_EQ ID\n                | ID MUL_EQ IDinit : id_ls ASSIGN ZERO\n            | ID ASSIGN ZEROinv_ls : inv_pre RBRACEinv_pre : inv_pre ID id_lsinv_pre : LBRACE INV COLON ID id_lspredicates_ls : predicates_pre RBRACEpredicates_pre : predicates_pre ID id_lspredicates_pre : LBRACE ID id_lsid_ls : id_ls_pre RSBRAKETid_ls_pre : id_ls_pre IDid_ls_pre : LSBRAKET ID'
    
_lr_action_items = {'QVAR':([0,],[2,]),'$end':([1,30,35,],[0,-23,-1,]),'LSBRAKET':([2,6,27,30,31,32,36,39,43,53,54,57,60,62,65,],[5,5,5,-23,5,5,5,5,5,5,5,5,5,5,5,]),'LBRACE':([3,6,9,13,14,15,16,17,18,19,20,21,22,23,27,30,36,47,48,49,50,51,54,57,62,63,65,68,69,],[8,29,-26,8,-2,-4,-5,-6,-7,-8,-9,-10,-14,-15,29,-23,29,-18,-16,-3,-19,-17,29,29,29,-11,29,-13,-12,]),'RSBRAKET':([4,10,11,],[9,-27,-28,]),'ID':([4,5,6,7,8,9,10,11,25,27,28,30,34,36,38,40,45,46,54,55,56,57,62,64,65,],[10,11,24,31,32,-26,-27,-28,39,24,43,-23,48,24,51,53,-24,-25,24,-21,60,24,24,-22,24,]),'SKIP':([6,27,30,36,54,57,62,65,],[22,22,-23,22,22,22,22,22,]),'ABORT':([6,27,30,36,54,57,62,65,],[23,23,-23,23,23,23,23,23,]),'IF':([6,27,30,36,54,57,62,65,],[25,25,-23,25,25,25,25,25,]),'LBRAKET':([6,27,30,36,54,57,62,65,],[27,27,-23,27,27,27,27,27,]),'RBRACE':([7,9,28,45,46,55,64,],[30,-26,42,-24,-25,-21,-22,]),'ASSIGN':([9,12,24,],[-26,33,37,]),'MUL_EQ':([9,12,24,],[-26,34,38,]),'THEN':([9,52,],[-26,57,]),'DO':([9,58,],[-26,62,]),'SEMICOLON':([13,14,15,16,17,18,19,20,21,22,23,41,47,48,49,50,51,59,61,63,66,67,68,69,],[36,-2,-4,-5,-6,-7,-8,-9,-10,-14,-15,36,-18,-16,-3,-19,-17,36,36,-11,36,36,-13,-12,]),'NONDET_CHOICE':([14,15,16,17,18,19,20,21,22,23,41,47,48,49,50,51,63,68,69,],[-2,-4,-5,-6,-7,-8,-9,-10,-14,-15,54,-18,-16,-3,-19,-17,-11,-13,-12,]),'RBRAKET':([14,15,16,17,18,19,20,21,22,23,47,48,49,50,51,59,63,68,69,],[-2,-4,-5,-6,-7,-8,-9,-10,-14,-15,-18,-16,-3,-19,-17,63,-11,-13,-12,]),'ELSE':([14,15,16,17,18,19,20,21,22,23,47,48,49,50,51,61,63,68,69,],[-2,-4,-5,-6,-7,-8,-9,-10,-14,-15,-18,-16,-3,-19,-17,65,-11,-13,-12,]),'END':([14,15,16,17,18,19,20,21,22,23,47,48,49,50,51,63,66,67,68,69,],[-2,-4,-5,-6,-7,-8,-9,-10,-14,-15,-18,-16,-3,-19,-17,-11,68,69,-13,-12,]),'WHILE':([26,42,],[40,-20,]),'INV':([29,],[44,]),'ZERO':([33,37,],[47,50,]),'COLON':([44,],[56,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,],[1,]),'id_ls':([2,6,27,31,32,36,39,43,53,54,57,60,62,65,],[3,12,12,45,46,12,52,55,58,12,12,64,12,12,]),'id_ls_pre':([2,6,27,31,32,36,39,43,53,54,57,60,62,65,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'predicates_ls':([3,13,],[6,35,]),'predicates_pre':([3,13,],[7,7,]),'sequence':([6,27,54,57,62,65,],[13,41,59,61,66,67,]),'sentence':([6,27,36,54,57,62,65,],[14,14,49,14,14,14,14,]),'skip':([6,27,36,54,57,62,65,],[15,15,15,15,15,15,15,]),'abort':([6,27,36,54,57,62,65,],[16,16,16,16,16,16,16,]),'init':([6,27,36,54,57,62,65,],[17,17,17,17,17,17,17,]),'unitary':([6,27,36,54,57,62,65,],[18,18,18,18,18,18,18,]),'if':([6,27,36,54,57,62,65,],[19,19,19,19,19,19,19,]),'while':([6,27,36,54,57,62,65,],[20,20,20,20,20,20,20,]),'nondet_choice':([6,27,36,54,57,62,65,],[21,21,21,21,21,21,21,]),'inv_ls':([6,27,36,54,57,62,65,],[26,26,26,26,26,26,26,]),'inv_pre':([6,27,36,54,57,62,65,],[28,28,28,28,28,28,28,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> QVAR id_ls predicates_ls sequence predicates_ls','prog',5,'p_prog','NQPV_parser.py',13),
  ('sequence -> sentence','sequence',1,'p_sequence_form','NQPV_parser.py',22),
  ('sequence -> sequence SEMICOLON sentence','sequence',3,'p_sequence_append','NQPV_parser.py',26),
  ('sentence -> skip','sentence',1,'p_sentence','NQPV_parser.py',32),
  ('sentence -> abort','sentence',1,'p_sentence','NQPV_parser.py',33),
  ('sentence -> init','sentence',1,'p_sentence','NQPV_parser.py',34),
  ('sentence -> unitary','sentence',1,'p_sentence','NQPV_parser.py',35),
  ('sentence -> if','sentence',1,'p_sentence','NQPV_parser.py',36),
  ('sentence -> while','sentence',1,'p_sentence','NQPV_parser.py',37),
  ('sentence -> nondet_choice','sentence',1,'p_sentence','NQPV_parser.py',38),
  ('nondet_choice -> LBRAKET sequence NONDET_CHOICE sequence RBRAKET','nondet_choice',5,'p_nondet_choice','NQPV_parser.py',43),
  ('if -> IF ID id_ls THEN sequence ELSE sequence END','if',8,'p_if','NQPV_parser.py',47),
  ('while -> inv_ls WHILE ID id_ls DO sequence END','while',7,'p_while','NQPV_parser.py',51),
  ('skip -> SKIP','skip',1,'p_skip','NQPV_parser.py',56),
  ('abort -> ABORT','abort',1,'p_abort','NQPV_parser.py',60),
  ('unitary -> id_ls MUL_EQ ID','unitary',3,'p_unitary','NQPV_parser.py',64),
  ('unitary -> ID MUL_EQ ID','unitary',3,'p_unitary','NQPV_parser.py',65),
  ('init -> id_ls ASSIGN ZERO','init',3,'p_init','NQPV_parser.py',72),
  ('init -> ID ASSIGN ZERO','init',3,'p_init','NQPV_parser.py',73),
  ('inv_ls -> inv_pre RBRACE','inv_ls',2,'p_inv_end','NQPV_parser.py',81),
  ('inv_pre -> inv_pre ID id_ls','inv_pre',3,'p_inv_append','NQPV_parser.py',85),
  ('inv_pre -> LBRACE INV COLON ID id_ls','inv_pre',5,'p_inv_start','NQPV_parser.py',89),
  ('predicates_ls -> predicates_pre RBRACE','predicates_ls',2,'p_predicates_end','NQPV_parser.py',95),
  ('predicates_pre -> predicates_pre ID id_ls','predicates_pre',3,'p_predicates_append','NQPV_parser.py',99),
  ('predicates_pre -> LBRACE ID id_ls','predicates_pre',3,'p_predicates_start','NQPV_parser.py',103),
  ('id_ls -> id_ls_pre RSBRAKET','id_ls',2,'p_id_ls_end','NQPV_parser.py',108),
  ('id_ls_pre -> id_ls_pre ID','id_ls_pre',2,'p_id_ls_append','NQPV_parser.py',112),
  ('id_ls_pre -> LSBRAKET ID','id_ls_pre',2,'p_id_ls_start','NQPV_parser.py',116),
]
